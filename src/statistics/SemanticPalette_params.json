{
    "tools/cond_estimator.py": {
        "sklearn": {
            "GaussianMixture_74": {
                "variable": {
                    "value": "self.gmm",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "possible_values": [
                        [
                            "self.force_components",
                            "Attribute"
                        ],
                        [
                            "np.arange(self.min_components, self.max_components + 1)",
                            "Call"
                        ],
                        [
                            "n_components[np.argmin(aic)]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "full",
                    "possible_values": []
                },
                "n_init": {
                    "value": "self.n_init",
                    "possible_values": []
                }
            },
            "GaussianMixture_62": {
                "n_components": {
                    "value": "n",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "full",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_114": {
                "variable": {
                    "value": "sem_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "sem_cond",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.approx_p_to_sem_cond(x_sem)",
                            "Call"
                        ],
                        [
                            "self.iter_p_to_sem_cond(x_sem)",
                            "Call"
                        ],
                        [
                            "sem_cond / np.sum(sem_cond, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(sem_cond).float()",
                            "Call"
                        ],
                        [
                            "np.clip(x, a_min=0, a_max=1)",
                            "Call"
                        ],
                        [
                            "np.clip(x, a_min=0, a_max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "ins_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "ins_cond",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(ins_cond, axis=0)",
                            "Call"
                        ],
                        [
                            "(x_ins * self.max_instances).astype(int)",
                            "Call"
                        ],
                        [
                            "np.clip(ins_cond, a_min=ins_min, a_max=ins_max)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ins_cond).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "ins_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            }
        }
    },
    "tools/nearest_cond_indexor.py": {
        "sklearn": {
            "KDTree_50": {
                "variable": {
                    "value": "self.tree",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.concatenate(sem_cond, axis=0)",
                            "Call"
                        ],
                        [
                            "x / self.sem_means",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([x, x_ins / self.ins_means], axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_style_generator/utils/visualizer.py": {
        "tensorflow": {
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {
            "BaseDataset_17": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.load_seg": {
                    "value": "load_seg",
                    "possible_values": []
                },
                "self.load_img": {
                    "value": "load_img",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                },
                "self.phase": {
                    "value": "phase",
                    "possible_values": [
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.seg_paths": {
                    "value": "seg_paths",
                    "possible_values": [
                        [
                            "sorted(seg_paths)",
                            "Call"
                        ],
                        [
                            "seg_paths[:opt.max_dataset_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "self.ins_paths": {
                    "value": "ins_paths",
                    "possible_values": [
                        [
                            "sorted(ins_paths) if ins_paths is not None else ins_paths",
                            "IfExp"
                        ],
                        [
                            "ins_paths[:opt.max_dataset_size] if ins_paths is not None else ins_paths",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "self.img_paths": {
                    "value": "img_paths",
                    "possible_values": [
                        [
                            "sorted(img_paths)",
                            "Call"
                        ],
                        [
                            "img_paths[:opt.max_dataset_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "time_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "empty",
                    "possible_values": []
                }
            }
        }
    },
    "data/image_folder.py": {
        "torch": {
            "ImageFolder_63": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.imgs": {
                    "value": "imgs",
                    "possible_values": [
                        [
                            "make_dataset(root)",
                            "Call"
                        ]
                    ]
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.return_paths": {
                    "value": "return_paths",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loader": {
                    "value": "loader",
                    "possible_values": [
                        [
                            "default_loader",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "data/semi_synthetic_dataset.py": {
        "torch": {
            "SemiSyntheticDataset_7": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "self.dataloader": {
                    "value": "dataloader",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "data/synthetic_dataset.py": {
        "torch": {
            "SyntheticDataset_11": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "conv_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "conv_shape",
                    "possible_values": [
                        [
                            "list(tensor.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim_seg",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[cond_real['sem_cond'], tgt_sem_cond]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[cond_real['ins_cond'], tgt_ins_cond]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "data/utils.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "gaussian_filter",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_semantics",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_semantics",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "gaussian.size()",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_semantics",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_like_38": {
                "variable": {
                    "value": "x_coord_g",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "g.expand(batch, channels, num, height_g, width_g)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_39": {
                "variable": {
                    "value": "y_coord_g",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "g.expand(batch, channels, num, height_g, width_g)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_45": {
                "variable": {
                    "value": "x_coord",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(max_dim), int(aspect_ratio * max_dim))",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "y_coord",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(max_dim), int(aspect_ratio * max_dim))",
                    "possible_values": []
                }
            },
            "max_59": {
                "variable": {
                    "value": "center[aa:bb, cc:dd]",
                    "possible_values": []
                },
                "input": {
                    "value": "center[aa:bb, cc:dd]",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "zero_t",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "height_t",
                    "possible_values": []
                },
                "data": {
                    "value": "[height]",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "width_t",
                    "possible_values": []
                },
                "data": {
                    "value": "[width]",
                    "possible_values": []
                }
            },
            "round_77": {
                "variable": {
                    "value": "up",
                    "possible_values": []
                },
                "input": {
                    "value": "y - 3 * sigma - 1",
                    "possible_values": []
                }
            },
            "round_78": {
                "variable": {
                    "value": "left",
                    "possible_values": []
                },
                "input": {
                    "value": "x - 3 * sigma - 1",
                    "possible_values": []
                }
            },
            "round_79": {
                "variable": {
                    "value": "bottom",
                    "possible_values": []
                },
                "input": {
                    "value": "y + 3 * sigma + 2",
                    "possible_values": []
                }
            },
            "round_80": {
                "variable": {
                    "value": "right",
                    "possible_values": []
                },
                "input": {
                    "value": "x + 3 * sigma + 2",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_t",
                    "possible_values": [
                        [
                            "torch.tensor([0]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_83": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_t",
                    "possible_values": [
                        [
                            "torch.tensor([0]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_85": {
                "variable": {
                    "value": "aa",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_t",
                    "possible_values": [
                        [
                            "torch.tensor([0]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_86": {
                "variable": {
                    "value": "bb",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "possible_values": [
                        [
                            "torch.round(y + 3 * sigma + 2).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_87": {
                "variable": {
                    "value": "cc",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_t",
                    "possible_values": [
                        [
                            "torch.tensor([0]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_88": {
                "variable": {
                    "value": "dd",
                    "possible_values": []
                },
                "input": {
                    "value": "right",
                    "possible_values": [
                        [
                            "torch.round(x + 3 * sigma + 2).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "stacked_center",
                    "possible_values": []
                },
                "input": {
                    "value": "center_mask",
                    "possible_values": [
                        [
                            "(aa <= y_coord) & (y_coord < bb) & (cc <= x_coord) & (x_coord < dd)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "semantic_cond",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_semantics",
                    "possible_values": []
                }
            },
            "unique_108": {
                "variable": {
                    "value": "(unique, counts)",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.flatten()",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "seg_mc",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_semantics, *seg.shape]",
                    "possible_values": []
                }
            },
            "pad_120": {
                "variable": {
                    "value": "padded_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "sem_seg.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad, pad, pad)",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "unique_125": {
                "variable": {
                    "value": "instances",
                    "possible_values": []
                },
                "input": {
                    "value": "seg[seg > 999]",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "instance_center",
                    "possible_values": []
                },
                "*size": {
                    "value": "seg.shape",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "instance_offset",
                    "possible_values": []
                },
                "*size": {
                    "value": "tuple([2]) + seg.shape",
                    "possible_values": []
                }
            },
            "unique_164": {
                "variable": {
                    "value": "instances",
                    "possible_values": []
                },
                "input": {
                    "value": "seg[seg > 999]",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "instance_density",
                    "possible_values": []
                },
                "*size": {
                    "value": "tuple([things_num]) + seg.shape",
                    "possible_values": []
                }
            },
            "unique_180": {
                "variable": {
                    "value": "instances",
                    "possible_values": []
                },
                "input": {
                    "value": "seg[seg > 999]",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "instance_cond",
                    "possible_values": []
                },
                "*size": {
                    "value": "things_num",
                    "possible_values": [
                        [
                            "len(things_idx)",
                            "Call"
                        ],
                        [
                            "len(things_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "instance_edge",
                    "possible_values": []
                },
                "*size": {
                    "value": "seg.shape",
                    "possible_values": []
                }
            },
            "Tensor_17": {},
            "sum_110": {
                "input": {
                    "value": "semantic_cond",
                    "possible_values": [
                        [
                            "torch.zeros(num_semantics)",
                            "Call"
                        ],
                        [
                            "semantic_cond / torch.sum(semantic_cond)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "instance_density[idx]",
                    "possible_values": []
                },
                "data": {
                    "value": "gaussian_filter_density(centers[idx], sigma=sigma)",
                    "possible_values": []
                }
            },
            "pad_201": {
                "variable": {
                    "value": "instance_edge",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_edge",
                    "possible_values": [
                        [
                            "torch.zeros(seg.shape).bool()",
                            "Call"
                        ],
                        [
                            "instance_edge.float()",
                            "Call"
                        ],
                        [
                            "instance_edge.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "instance_edge.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.pad(instance_edge, (pad, pad, pad, pad), mode='reflect')",
                            "Call"
                        ],
                        [
                            "gaussian_filter(instance_edge).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad, pad, pad)",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "gaussian",
                    "possible_values": [
                        [
                            "torch.Tensor(np.exp(-((x - x0) ** 2 + (y - y0) ** 2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_40": {
                "input": {
                    "value": "x_coord_g",
                    "possible_values": [
                        [
                            "torch.ones_like(g)",
                            "Call"
                        ],
                        [
                            "torch.cumsum(x_coord_g, dim=1) - 1",
                            "BinOp"
                        ],
                        [
                            "x_coord_g.expand(batch, channels, num, height_g, width_g)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cumsum_41": {
                "input": {
                    "value": "y_coord_g",
                    "possible_values": [
                        [
                            "torch.ones_like(g)",
                            "Call"
                        ],
                        [
                            "torch.cumsum(y_coord_g, dim=0) - 1",
                            "BinOp"
                        ],
                        [
                            "y_coord_g.expand(batch, channels, num, height_g, width_g)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cumsum_47": {
                "input": {
                    "value": "x_coord",
                    "possible_values": [
                        [
                            "torch.ones((int(max_dim), int(aspect_ratio * max_dim)))",
                            "Call"
                        ],
                        [
                            "torch.cumsum(x_coord, dim=1) - 1",
                            "BinOp"
                        ],
                        [
                            "x_coord.expand(batch, channels, num, height, width)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cumsum_48": {
                "input": {
                    "value": "y_coord",
                    "possible_values": [
                        [
                            "torch.ones((int(max_dim), int(aspect_ratio * max_dim)))",
                            "Call"
                        ],
                        [
                            "torch.cumsum(y_coord, dim=0) - 1",
                            "BinOp"
                        ],
                        [
                            "y_coord.expand(batch, channels, num, height, width)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_98": {
                "input": {
                    "value": "stacked_center",
                    "possible_values": [
                        [
                            "torch.zeros_like(center_mask).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "discrete_gaussian",
                    "possible_values": [
                        [
                            "get_gaussian(sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_82": {
                "input": {
                    "value": "bottom",
                    "possible_values": [
                        [
                            "torch.round(y + 3 * sigma + 2).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_84": {
                "input": {
                    "value": "right",
                    "possible_values": [
                        [
                            "torch.round(x + 3 * sigma + 2).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_130": {
                "input": {
                    "value": "scaled_x_coord[mask]",
                    "possible_values": []
                }
            },
            "mean_131": {
                "input": {
                    "value": "scaled_y_coord[mask]",
                    "possible_values": []
                }
            },
            "mean_171": {
                "input": {
                    "value": "scaled_x_coord[mask]",
                    "possible_values": []
                }
            },
            "mean_172": {
                "input": {
                    "value": "scaled_y_coord[mask]",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/generator_statistics_tester.py": {
        "torch": {
            "zeros_83": {
                "variable": {
                    "value": "pred_sem_seg",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, self.opt.num_semantics, h, w)",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "pred_sem_count",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "possible_values": []
                }
            },
            "diag_109": {
                "variable": {
                    "value": "tp",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_matrix",
                    "possible_values": [
                        [
                            "get_confusion_matrix(sem_index_real, sem_index_pred, self.opt.num_semantics)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "train_confusion_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.opt.num_semantics, self.opt.num_semantics)",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "test_confusion_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.opt.num_semantics, self.opt.num_semantics)",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_110": {
                "input": {
                    "value": "torch.Tensor([1.0])",
                    "possible_values": []
                }
            },
            "max_115": {
                "input": {
                    "value": "torch.Tensor([1.0])",
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "variable": {
                    "value": "d_sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_228": {
                "variable": {
                    "value": "d_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "d_sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "resized_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_small_seg['sem_seg']",
                    "possible_values": []
                },
                "size": {
                    "value": "data['img'].shape[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "variable": {
                    "value": "d_sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_263": {
                "variable": {
                    "value": "d_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "d_sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "input": {
                    "value": "data['img']",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "[self.opt.fixed_crop[0], int(self.opt.fixed_crop[0] * self.opt.aspect_ratio)]",
                            "List"
                        ],
                        [
                            "[int(self.opt.fixed_crop[1] / self.opt.aspect_ratio), self.opt.fixed_crop[1]]",
                            "List"
                        ],
                        [
                            "img.shape[0]",
                            "Subscript"
                        ],
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/img_generator_trainer.py": {
        "torch": {
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/seg_generator_trainer.py": {
        "torch": {
            "randn_72": {
                "variable": {
                    "value": "data[z_seg]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.engine.batch_size_per_gpu",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.latent_dim",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/seg_img_generator_trainer.py": {
        "torch": {
            "randn_34": {
                "variable": {
                    "value": "data[z_seg]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.engine.batch_size_per_gpu",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "data[z_seg]",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "possible_values": [
                        [
                            "self.opt.eval_batchsize",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/segmentor_trainer.py": {
        "torch": {
            "zeros_89": {
                "variable": {
                    "value": "pred_sem_seg",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, self.opt.num_semantics, h, w)",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "pred_sem_count",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "possible_values": []
                }
            },
            "interpolate_180": {
                "variable": {
                    "value": "data[img]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['img']",
                    "possible_values": []
                },
                "size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ],
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "interpolate_182": {
                "variable": {
                    "value": "data[sem_seg]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['sem_seg']",
                    "possible_values": []
                },
                "size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ],
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_197": {
                "variable": {
                    "value": "data[img]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['img']",
                    "possible_values": []
                },
                "size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ],
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "interpolate_199": {
                "variable": {
                    "value": "data[sem_seg]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['sem_seg']",
                    "possible_values": []
                },
                "size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ],
                        [
                            "(h_scaled, w_scaled)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "resized_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_small_seg['sem_seg']",
                    "possible_values": []
                },
                "size": {
                    "value": "data['img'].shape[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "interpolate_120": {
                "input": {
                    "value": "data['img']",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "[self.opt.fixed_crop[0], int(self.opt.fixed_crop[0] * self.opt.aspect_ratio)]",
                            "List"
                        ],
                        [
                            "[int(self.opt.fixed_crop[1] / self.opt.aspect_ratio), self.opt.fixed_crop[1]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "confusion_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.opt.num_semantics, self.opt.num_semantics)",
                    "possible_values": []
                }
            },
            "diag_279": {
                "variable": {
                    "value": "tp",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_matrix",
                    "possible_values": [
                        [
                            "get_confusion_matrix(sem_index_real, sem_index_pred, self.opt.num_semantics)",
                            "Call"
                        ],
                        [
                            "torch.zeros((self.opt.num_semantics, self.opt.num_semantics)).cuda()",
                            "Call"
                        ],
                        [
                            "confusion_matrix + self.eval_model(data_i, global_iteration, log=i == 0)",
                            "BinOp"
                        ],
                        [
                            "self.engine.all_reduce_tensor(confusion_matrix, norm=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_280": {
                "input": {
                    "value": "torch.Tensor([1.0]).to(pos.get_device())",
                    "possible_values": []
                }
            },
            "max_286": {
                "input": {
                    "value": "torch.Tensor([1.0]).to(pos.get_device())",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/tester.py": {
        "torch": {
            "zeros_83": {
                "variable": {
                    "value": "pred_sem_seg",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, self.opt.num_semantics, h, w)",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "pred_sem_count",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "possible_values": []
                }
            },
            "diag_109": {
                "variable": {
                    "value": "tp",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_matrix",
                    "possible_values": [
                        [
                            "get_confusion_matrix(sem_index_real, sem_index_pred, self.opt.num_semantics)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "train_confusion_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.opt.num_semantics, self.opt.num_semantics)",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "test_confusion_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.opt.num_semantics, self.opt.num_semantics)",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_110": {
                "input": {
                    "value": "torch.Tensor([1.0])",
                    "possible_values": []
                }
            },
            "max_115": {
                "input": {
                    "value": "torch.Tensor([1.0])",
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "variable": {
                    "value": "d_sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_228": {
                "variable": {
                    "value": "d_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "d_sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "resized_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_small_seg['sem_seg']",
                    "possible_values": []
                },
                "size": {
                    "value": "data['img'].shape[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "zeros_like_263": {
                "variable": {
                    "value": "d_sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_264": {
                "variable": {
                    "value": "d_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "d_sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "input": {
                    "value": "data['img']",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "[self.opt.fixed_crop[0], int(self.opt.fixed_crop[0] * self.opt.aspect_ratio)]",
                            "List"
                        ],
                        [
                            "[int(self.opt.fixed_crop[1] / self.opt.aspect_ratio), self.opt.fixed_crop[1]]",
                            "List"
                        ],
                        [
                            "img.shape[0]",
                            "Subscript"
                        ],
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/visualizer.py": {
        "torch": {
            "randn_80": {
                "variable": {
                    "value": "data[z_seg]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.vis_steps",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_seg",
                    "possible_values": [
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "variable": {
                    "value": "fake_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_seg",
                    "possible_values": [
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "real_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "real_sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_111": {
                "variable": {
                    "value": "data[z_seg]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.vis_steps",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_seg",
                    "possible_values": [
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "fake_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_seg",
                    "possible_values": [
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "real_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "real_sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "real_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "real_sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_133": {
                "variable": {
                    "value": "real_raw_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "real_raw",
                    "possible_values": [
                        [
                            "{'img_id': str(i), 'prop': 'target'}",
                            "Dict"
                        ],
                        [
                            "fake_data['real_cropped'].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_149": {
                "variable": {
                    "value": "z0",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "randn_150": {
                "variable": {
                    "value": "z1",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "ins_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c['ins_cond']] * self.batch_size",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "sem_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c['sem_cond']] * self.batch_size",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "randn_165": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "ins_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ins",
                    "possible_values": [
                        [
                            "[ins0 * i / (self.batch_size - 1) + ins1 * (1 - i / (self.batch_size - 1)) for i in range(self.batch_size)]",
                            "ListComp"
                        ],
                        [
                            "[ins0 * i / (self.vis_steps - 1) + ins1 * (1 - i / (self.vis_steps - 1)) for i in range(self.vis_steps)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "sem_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "[sem0 * i / (self.batch_size - 1) + sem1 * (1 - i / (self.batch_size - 1)) for i in range(self.batch_size)]",
                            "ListComp"
                        ],
                        [
                            "[sem0 * i / (self.vis_steps - 1) + sem1 * (1 - i / (self.vis_steps - 1)) for i in range(self.vis_steps)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "randn_186": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "ins_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ins",
                    "possible_values": [
                        [
                            "[ins0 * i / (self.batch_size - 1) + ins1 * (1 - i / (self.batch_size - 1)) for i in range(self.batch_size)]",
                            "ListComp"
                        ],
                        [
                            "[ins0 * i / (self.vis_steps - 1) + ins1 * (1 - i / (self.vis_steps - 1)) for i in range(self.vis_steps)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "sem_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "[sem0 * i / (self.batch_size - 1) + sem1 * (1 - i / (self.batch_size - 1)) for i in range(self.batch_size)]",
                            "ListComp"
                        ],
                        [
                            "[sem0 * i / (self.vis_steps - 1) + sem1 * (1 - i / (self.vis_steps - 1)) for i in range(self.vis_steps)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_258": {
                "variable": {
                    "value": "sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_259": {
                "variable": {
                    "value": "sem0",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "sem_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sem_cond",
                    "possible_values": [
                        [
                            "torch.cat([c['sem_cond']] * self.batch_size, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(sem, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(sem, dim=0)",
                            "Call"
                        ],
                        [
                            "[sem1 * i / (self.vis_steps - 1) + sem0 * (1 - i / (self.vis_steps - 1)) for i in range(self.vis_steps)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(sem_cond, dim=0)",
                            "Call"
                        ],
                        [
                            "data['sem_cond'].cpu()",
                            "Call"
                        ],
                        [
                            "sem_cond - sem_cond[0].clone()",
                            "BinOp"
                        ],
                        [
                            "sem_cond.cpu()",
                            "Call"
                        ],
                        [
                            "sem_cond.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "randn_404": {
                "variable": {
                    "value": "data[z_seg]",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seg_opt.latent_dim",
                    "possible_values": []
                }
            },
            "argmax_440": {
                "variable": {
                    "value": "raw",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_sem",
                    "possible_values": [
                        [
                            "data['raw_sem_seg'].detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_447": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_448": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "data['sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_524": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_528": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_529": {
                "variable": {
                    "value": "fake_ins_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_data['ins_density']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "argmax_620": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_623": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_626": {
                "variable": {
                    "value": "spread",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_mask",
                    "possible_values": [
                        [
                            "fake_data['sem_mask'].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_629": {
                "variable": {
                    "value": "logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_sem_seg + 1e-05",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "sem0",
                    "possible_values": [
                        [
                            "c0['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "c0['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "sem0 / torch.sum(sem0)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(sem_seg.float(), dim=(2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_195": {
                "input": {
                    "value": "sem1",
                    "possible_values": [
                        [
                            "c1['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem1 / torch.sum(sem1)",
                            "BinOp"
                        ],
                        [
                            "data['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ],
                        [
                            "sem0.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_456": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_data['raw_sem_seg'][:, :-1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "mean_458": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[fake[k] for fake in fake_data]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "[fake[k] for fake in fake_data]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_152": {
                "tensors": {
                    "value": "z",
                    "possible_values": [
                        [
                            "[z0 * i / (self.batch_size - 1) + z1 * (1 - i / (self.batch_size - 1)) for i in range(self.batch_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.randn(self.seg_opt.latent_dim)",
                            "Call"
                        ],
                        [
                            "torch.randn(self.seg_opt.latent_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_166": {
                "tensors": {
                    "value": "[z] * self.batch_size",
                    "possible_values": []
                }
            },
            "stack_187": {
                "tensors": {
                    "value": "[z] * self.vis_steps",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "[fake[k] for fake in fake_data]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_435": {
                "tensors": {
                    "value": "[fake[k] for fake in fake_data]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_537": {
                "variable": {
                    "value": "seg_mc",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "fake_data['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_540": {
                "variable": {
                    "value": "sat_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "10 * torch.sqrt(ins_offset[:, 0] ** 2 + ins_offset[:, 1] ** 2)",
                    "possible_values": []
                }
            },
            "tensor_543": {
                "variable": {
                    "value": "offset_rgb",
                    "possible_values": []
                },
                "data": {
                    "value": "offset_rgba[:, :, :, :3]",
                    "possible_values": []
                }
            },
            "tensor_545": {
                "variable": {
                    "value": "offset_rgb[bg]",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 0.0]",
                    "possible_values": []
                }
            },
            "sum_628": {
                "input": {
                    "value": "sem_mask + 1e-06",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_630": {
                "input": {
                    "value": "torch.mul(raw_sem_seg, logprob)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "style",
                    "possible_values": [
                        [
                            "np.load(style_code_path)",
                            "Call"
                        ],
                        [
                            "np.load(style_code_path.replace('/4/', '/5/'))",
                            "Call"
                        ],
                        [
                            "np.load(style_code_path)",
                            "Call"
                        ],
                        [
                            "self.get_style()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_243": {
                "data": {
                    "value": "style",
                    "possible_values": [
                        [
                            "np.load(style_code_path)",
                            "Call"
                        ],
                        [
                            "np.load(style_code_path.replace('/4/', '/5/'))",
                            "Call"
                        ],
                        [
                            "np.load(style_code_path)",
                            "Call"
                        ],
                        [
                            "self.get_style()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_630": {
                "input": {
                    "value": "raw_sem_seg",
                    "possible_values": [
                        [
                            "(sem_mask + 1e-06) / torch.sum(sem_mask + 1e-06, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "logprob",
                    "possible_values": [
                        [
                            "torch.log(raw_sem_seg + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_134": {
                "input": {
                    "value": "real_raw",
                    "possible_values": [
                        [
                            "{'img_id': str(i), 'prop': 'target'}",
                            "Dict"
                        ],
                        [
                            "fake_data['real_cropped'].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "data": {
                    "value": "style",
                    "possible_values": [
                        [
                            "np.load(style_code_path)",
                            "Call"
                        ],
                        [
                            "np.load(style_code_path.replace('/4/', '/5/'))",
                            "Call"
                        ],
                        [
                            "np.load(style_code_path)",
                            "Call"
                        ],
                        [
                            "self.get_style()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_540": {
                "data": {
                    "value": "[1.0]",
                    "possible_values": []
                }
            },
            "max_500": {
                "input": {
                    "value": "fake_sem_cond",
                    "possible_values": [
                        [
                            "torch.mean(fake_sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(fake_sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(fake_data['raw_sem_seg'][:, :-1], dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_540": {
                "input": {
                    "value": "ins_offset[:, 0] ** 2 + ins_offset[:, 1] ** 2",
                    "possible_values": []
                }
            },
            "ones_like_544": {
                "input": {
                    "value": "offset_rgb",
                    "possible_values": [
                        [
                            "torch.tensor(offset_rgba[:, :, :, :3]).float()",
                            "Call"
                        ],
                        [
                            "sat_norm.unsqueeze(-1) * offset_rgb + (1 - sat_norm).unsqueeze(-1) * torch.ones_like(offset_rgb)",
                            "BinOp"
                        ],
                        [
                            "offset_rgb.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_572": {
                "input": {
                    "value": "fake_sem_cond",
                    "possible_values": [
                        [
                            "torch.mean(fake_sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(fake_sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(fake_data['raw_sem_seg'][:, :-1], dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_592": {
                "input": {
                    "value": "fake_ins_cond",
                    "possible_values": [
                        [
                            "torch.sum(fake_data['ins_density'], dim=(2, 3)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_658": {
                "input": {
                    "value": "fake_sem_cond",
                    "possible_values": [
                        [
                            "torch.mean(fake_sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(fake_sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(fake_data['raw_sem_seg'][:, :-1], dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mean(sem_seg, dim=(2, 3)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_539": {
                "input": {
                    "value": "ins_offset[:, 1]",
                    "possible_values": []
                },
                "other": {
                    "value": "ins_offset[:, 0]",
                    "possible_values": []
                }
            }
        }
    },
    "models/__init__.py": {
        "torch": {
            "save_12": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, f'{label}_latest_net_{which_iter}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, f'{label}_net_{which_iter}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "load_path",
                    "possible_values": [
                        [
                            "override_load_path if override_load_path is not None else opt.load_path",
                            "IfExp"
                        ],
                        [
                            "os.path.join(load_path, f'{label}_net_{which_iter}.pth')",
                            "Call"
                        ],
                        [
                            "latest_load_path",
                            "Name"
                        ],
                        [
                            "load_paths[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_59": {
                "f": {
                    "value": "load_path",
                    "possible_values": [
                        [
                            "override_load_path if override_load_path is not None else opt.load_path",
                            "IfExp"
                        ],
                        [
                            "os.path.join(load_path, f'{label}_net_{which_iter}.pth')",
                            "Call"
                        ],
                        [
                            "latest_load_path",
                            "Name"
                        ],
                        [
                            "load_paths[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_generator/models/__init__.py": {
        "torch": {}
    },
    "models/img_generator/models/img_model.py": {
        "torch": {
            "ImgModel_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                },
                "self.is_main": {
                    "value": "is_main",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer_g",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "g_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "g_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer_d",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "d_params + list(self.netD2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "d_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "fake_and_real",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_image, real_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_348": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_349": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_19": {
                "variable": {
                    "value": "self.criterionFeat",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "fake_and_real_image",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_image, real_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "fake_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_seg, fake_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "real_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_seg, real_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "fake_and_real",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['sem_seg'], flat_center, data['ins_offset'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['sem_seg'], data['ins_edge'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_309": {
                "tensors": {
                    "value": "[fake_seg, real_seg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_120": {
                "input": {
                    "value": "data['ins_center']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/models/networks/__init__.py": {
        "torch": {
            "is_available_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/models/networks/architecture.py": {
        "torch": {
            "DepthsepCCBlock_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_27": {
                    "variable": {
                        "value": "self.gen_weights1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(semantic_nc, nhidden, kernel_size=3, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_31": {
                    "variable": {
                        "value": "self.gen_weights2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(semantic_nc, nhidden, kernel_size=3, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_36": {
                    "variable": {
                        "value": "self.gen_se_weights1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(semantic_nc, nhidden, kernel_size=3, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_41": {
                    "variable": {
                        "value": "self.gen_se_weights2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(semantic_nc, nhidden, kernel_size=3, padding=1)",
                        "possible_values": []
                    }
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.conv_1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fin",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ],
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_58": {
                    "variable": {
                        "value": "self.conv_3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ],
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "fout",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "SPADEResnetBlock_109": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_117": {
                    "variable": {
                        "value": "self.conv_0",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fin",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ],
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_118": {
                    "variable": {
                        "value": "self.conv_1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ],
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "fout",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "ResnetBlock_162": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_167": {
                    "variable": {
                        "value": "self.conv_block",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.ReflectionPad2d(pw)",
                        "possible_values": []
                    }
                }
            },
            "VGG19_182": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_186": {
                    "variable": {
                        "value": "self.slice1",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_187": {
                    "variable": {
                        "value": "self.slice2",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_188": {
                    "variable": {
                        "value": "self.slice3",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_189": {
                    "variable": {
                        "value": "self.slice4",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_190": {
                    "variable": {
                        "value": "self.slice5",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "segmap",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "mul_79": {
                "variable": {
                    "value": "dx",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "possible_values": [
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_0(dx, conv_weights1)",
                            "Call"
                        ],
                        [
                            "self.conv_1(dx)",
                            "Call"
                        ],
                        [
                            "torch.mul(dx, se_weights1)",
                            "Call"
                        ],
                        [
                            "self.actvn(dx)",
                            "Call"
                        ],
                        [
                            "self.norm_2(dx)",
                            "Call"
                        ],
                        [
                            "self.conv_2(dx, conv_weights2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(dx)",
                            "Call"
                        ],
                        [
                            "torch.mul(dx, se_weights2)",
                            "Call"
                        ],
                        [
                            "self.actvn(dx)",
                            "Call"
                        ],
                        [
                            "self.conv_0(self.actvn(self.norm_0(x, seg)))",
                            "Call"
                        ],
                        [
                            "self.conv_1(self.actvn(self.norm_1(dx, seg)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "se_weights1",
                    "possible_values": [
                        [
                            "self.gen_se_weights1(segmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_84": {
                "variable": {
                    "value": "dx",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "possible_values": [
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_0(dx, conv_weights1)",
                            "Call"
                        ],
                        [
                            "self.conv_1(dx)",
                            "Call"
                        ],
                        [
                            "torch.mul(dx, se_weights1)",
                            "Call"
                        ],
                        [
                            "self.actvn(dx)",
                            "Call"
                        ],
                        [
                            "self.norm_2(dx)",
                            "Call"
                        ],
                        [
                            "self.conv_2(dx, conv_weights2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(dx)",
                            "Call"
                        ],
                        [
                            "torch.mul(dx, se_weights2)",
                            "Call"
                        ],
                        [
                            "self.actvn(dx)",
                            "Call"
                        ],
                        [
                            "self.conv_0(self.actvn(self.norm_0(x, seg)))",
                            "Call"
                        ],
                        [
                            "self.conv_1(self.actvn(self.norm_1(dx, seg)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "se_weights2",
                    "possible_values": [
                        [
                            "self.gen_se_weights2(segmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "spectral_norm_60": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(fin, fout, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "leaky_relu_99": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "spectral_norm_124": {
                "variable": {
                    "value": "self.conv_0",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "possible_values": []
                }
            },
            "spectral_norm_125": {
                "variable": {
                    "value": "self.conv_1",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "semantic_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fin * 9",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "semantic_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout * 9",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "semantic_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fmiddle",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ],
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sigmoid_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "semantic_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "spectral_norm_127": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_168": {
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_171": {
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "fin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_generator/models/networks/base_network.py": {
        "torch": {
            "BaseNetwork_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/models/networks/condconv.py": {
        "torch": {
            "DepthConv_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.kw": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Unfold_11": {
                    "variable": {
                        "value": "self.unfold",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(self.kw, self.kw)",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "mul_22": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_weights",
                    "possible_values": [
                        [
                            "conv_weights.view(N * C, self.kw * self.kw, H // self.stride, W // self.stride)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.unfold(x).view(N * C, self.kw * self.kw, H // self.stride, W // self.stride)",
                            "Call"
                        ],
                        [
                            "torch.mul(conv_weights, x).sum(dim=1, keepdim=False).view(N, C, H // self.stride, W // self.stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_22": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/models/networks/discriminator.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.enc1",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(input_nc, nf, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.enc2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf * 2, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.enc3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 2, nf * 4, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.enc4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 8, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.enc5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 8, nf * 8, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.lat2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 2, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.lat3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.lat4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 8, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.lat5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 8, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Upsample_59": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.final2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 2, kernel_size=3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.final3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 2, kernel_size=3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.final4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 2, kernel_size=3, padding=1))",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.tf",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.seg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "label_nc",
                    "possible_values": [
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "segemb",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb",
                    "possible_values": [
                        [
                            "self.embedding(segmap)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "variable": {
                    "value": "segemb2",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb",
                    "possible_values": [
                        [
                            "self.embedding(segmap)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "segemb3",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb2",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "segemb4",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb3",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mul_116": {
                "variable": {
                    "value": "sem_pred2",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb2",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg2",
                    "possible_values": [
                        [
                            "self.seg(feat32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_116": {
                "variable": {
                    "value": "sem_pred2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mul_117": {
                "variable": {
                    "value": "sem_pred3",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb3",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg3",
                    "possible_values": [
                        [
                            "self.seg(feat33)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_117": {
                "variable": {
                    "value": "sem_pred3",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mul_118": {
                "variable": {
                    "value": "sem_pred4",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb4",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb3, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg4",
                    "possible_values": [
                        [
                            "self.seg(feat34)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_118": {
                "variable": {
                    "value": "sem_pred4",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "avg_pool2d_147": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.compute_D_input_nc(opt, conditional)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "input_nc + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.compute_D_input_nc(opt, conditional)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "input_nc + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_179": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*sequence[n]",
                    "possible_values": []
                }
            },
            "LeakyReLU_186": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "nf_prev",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_generator/models/networks/encoder.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc_mu",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_var",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "variable": {
                    "value": "self.actvn",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer6(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.actvn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "ndf * 1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ndf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_generator/models/networks/generator.py": {
        "torch": {
            "Sequential_38": {
                "variable": {
                    "value": "self.labelenc1",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(input_nc, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.labelenc2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1, stride=2))",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.labelenc3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1, stride=2))",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.labelenc4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1, stride=2))",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.labelenc5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1, stride=2))",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.labelenc6",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1, stride=2))",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.labellat1",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 1))",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.labellat2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 1))",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.labellat3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 1))",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.labellat4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 1))",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.labellat5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 1))",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.labeldec1",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.labeldec2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.labeldec3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.labeldec4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.labeldec5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv_img",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Upsample_78": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_180": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout1), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout7), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_218": {
                "variable": {
                    "value": "self.conv_img",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Upsample_220": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_277": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout1), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout7), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_287": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16 * nf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.labelenc7",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1, stride=2))",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.labellat6",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 1))",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.labeldec6",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf, 3, padding=1))",
                    "possible_values": []
                }
            },
            "interpolate_106": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16 * nf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_249": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "possible_values": []
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_40": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "leaky_relu_179": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout1), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout7), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "randn_244": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "possible_values": []
                }
            },
            "leaky_relu_276": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout1), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_0(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_1(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_2(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout7), dim=1))",
                            "Call"
                        ],
                        [
                            "self.up_3(x, torch.cat((F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6), dim=1))",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_292": {
                "padding": {
                    "value": "opt.resnet_initial_kernel_size // 2",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_324": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "in_channels": {
                    "value": "nc_out",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_326": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_62": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout4)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout7)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(F.interpolate(seg, size=x.size()[2:], mode='nearest'), segout6)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_293": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.ngf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.resnet_initial_kernel_size",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ],
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "opt.ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_317": {
                "in_channels": {
                    "value": "nc_in",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc_out",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_152": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_157": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_159": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_169": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_171": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_175": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_177": {
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/models/networks/loss.py": {
        "torch": {
            "GANLoss_16": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.real_label": {
                    "value": "target_real_label",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fake_label": {
                    "value": "target_fake_label",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.Tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.FloatTensor",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gan_mode": {
                    "value": "gan_mode",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "VGGLoss_102": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "L1Loss_106": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "KLDLoss_118": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "new_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "minval",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "possible_values": []
                }
            },
            "min_71": {
                "variable": {
                    "value": "minval",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "minval",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "input": {
                    "value": "minval",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_generator/models/networks/normalization.py": {
        "torch": {
            "SPADE_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_90": {
                    "variable": {
                        "value": "self.mlp_shared",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                        "possible_values": []
                    }
                },
                "Conv2d_94": {
                    "variable": {
                        "value": "self.mlp_gamma",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "nhidden",
                        "possible_values": [
                            [
                                "128",
                                "Constant"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "norm_nc",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ks",
                        "possible_values": [
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pw",
                        "possible_values": [
                            [
                                "ks // 2",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Conv2d_95": {
                    "variable": {
                        "value": "self.mlp_beta",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "nhidden",
                        "possible_values": [
                            [
                                "128",
                                "Constant"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "norm_nc",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ks",
                        "possible_values": [
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pw",
                        "possible_values": [
                            [
                                "ks // 2",
                                "BinOp"
                            ]
                        ]
                    }
                }
            },
            "interpolate_103": {
                "variable": {
                    "value": "segmap",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "spectral_norm_26": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "norm_layer",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "layer",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_77": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "label_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_45": {
                "variable": {
                    "value": "norm_layer",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/utils/utils.py": {
        "torch": {
            "load_205": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_196": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "self.cmap",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_generator/utils/visualizer.py": {
        "torch": {
            "Tensor_63": {
                "variable": {
                    "value": "im_new",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/models/__init__.py": {
        "torch": {}
    },
    "models/img_style_generator/models/img_model.py": {
        "torch": {
            "ImgModel_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                },
                "self.is_main": {
                    "value": "is_main",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer_g",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "g_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "g_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optimizer_d",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "d_params + list(self.netD2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "d_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "fake_and_real",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_image, real_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_348": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_349": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_19": {
                "variable": {
                    "value": "self.criterionFeat",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "fake_and_real_image",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_image, real_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "fake_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_seg, fake_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "real_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_seg, real_image]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "fake_and_real",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['sem_seg'], flat_center, data['ins_offset'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['sem_seg'], data['ins_edge'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_309": {
                "tensors": {
                    "value": "[fake_seg, real_seg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_121": {
                "input": {
                    "value": "data['ins_center']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/models/networks/__init__.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/models/networks/architecture.py": {
        "torch": {
            "SPADEResnetBlock_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_rgb": {
                    "value": "use_rgb",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.Block_Name": {
                    "value": "Block_Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_35": {
                    "variable": {
                        "value": "self.conv_0",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fin",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_36": {
                    "variable": {
                        "value": "self.conv_1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "fout",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "ResnetBlock_109": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_114": {
                    "variable": {
                        "value": "self.conv_block",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.ReflectionPad2d(pw)",
                        "possible_values": []
                    }
                }
            },
            "VGG19_129": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_133": {
                    "variable": {
                        "value": "self.slice1",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_134": {
                    "variable": {
                        "value": "self.slice2",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_135": {
                    "variable": {
                        "value": "self.slice3",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_136": {
                    "variable": {
                        "value": "self.slice4",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_137": {
                    "variable": {
                        "value": "self.slice5",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Zencoder_162": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_nc": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "Sequential_182": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "segmap",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=codes.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "codes.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "codes_vector",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b_size, s_size, f_size)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "codes.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "codes.device",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "spectral_norm_42": {
                "variable": {
                    "value": "self.conv_0",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "possible_values": []
                }
            },
            "spectral_norm_43": {
                "variable": {
                    "value": "self.conv_1",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "possible_values": []
                }
            },
            "leaky_relu_104": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "spectral_norm_45": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_115": {
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_118": {
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_167": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_168": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_181": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_181": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_207": {
                "variable": {
                    "value": "component_mask_area",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap.bool()[i, j]",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_178": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_179": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/models/networks/base_network.py": {
        "torch": {
            "BaseNetwork_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/models/networks/discriminator.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.enc1",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(input_nc, nf, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.enc2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf, nf * 2, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.enc3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 2, nf * 4, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.enc4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 8, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.enc5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 8, nf * 8, kernel_size=3, stride=2, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.lat2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 2, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.lat3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.lat4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 8, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.lat5",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 8, nf * 4, kernel_size=1))",
                    "possible_values": []
                }
            },
            "Upsample_59": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.final2",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 2, kernel_size=3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.final3",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 2, kernel_size=3, padding=1))",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.final4",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(nn.Conv2d(nf * 4, nf * 2, kernel_size=3, padding=1))",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.tf",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.seg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "label_nc",
                    "possible_values": [
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "segemb",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb",
                    "possible_values": [
                        [
                            "self.embedding(segmap)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "variable": {
                    "value": "segemb2",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb",
                    "possible_values": [
                        [
                            "self.embedding(segmap)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "segemb3",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb2",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "segemb4",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb3",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mul_116": {
                "variable": {
                    "value": "sem_pred2",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb2",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg2",
                    "possible_values": [
                        [
                            "self.seg(feat32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_116": {
                "variable": {
                    "value": "sem_pred2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mul_117": {
                "variable": {
                    "value": "sem_pred3",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb3",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg3",
                    "possible_values": [
                        [
                            "self.seg(feat33)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_117": {
                "variable": {
                    "value": "sem_pred3",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mul_118": {
                "variable": {
                    "value": "sem_pred4",
                    "possible_values": []
                },
                "input": {
                    "value": "segemb4",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segemb3, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg4",
                    "possible_values": [
                        [
                            "self.seg(feat34)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_118": {
                "variable": {
                    "value": "sem_pred4",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "avg_pool2d_147": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.compute_D_input_nc(opt, conditional)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "input_nc + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "nf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "nf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.compute_D_input_nc(opt, conditional)",
                            "Call"
                        ],
                        [
                            "get_seg_size(opt.num_semantics, opt.num_things, opt.panoptic, opt.instance_type_for_img)",
                            "Call"
                        ],
                        [
                            "input_nc + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_179": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*sequence[n]",
                    "possible_values": []
                }
            },
            "LeakyReLU_186": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "nf_prev",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_style_generator/models/networks/encoder.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc_mu",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_var",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "variable": {
                    "value": "self.actvn",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer6(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.actvn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "ndf * 1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ndf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_style_generator/models/networks/generator.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.num_semantics",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv_img",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Upsample_52": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_115": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg, style_codes, obj_dic=obj_dic)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/models/networks/loss.py": {
        "torch": {
            "GANLoss_16": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.real_label": {
                    "value": "target_real_label",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fake_label": {
                    "value": "target_fake_label",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.Tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.FloatTensor",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gan_mode": {
                    "value": "gan_mode",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "VGGLoss_102": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "L1Loss_106": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "new_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "minval",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "possible_values": []
                }
            },
            "min_71": {
                "variable": {
                    "value": "minval",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "minval",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "input": {
                    "value": "minval",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/img_style_generator/models/networks/normalization.py": {
        "torch": {
            "ACE_71": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ACE_Name": {
                    "value": "ACE_Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.status": {
                    "value": "status",
                    "possible_values": [
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_rgb": {
                    "value": "use_rgb",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_81": {
                    "variable": {
                        "value": "self.blending_gamma",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_82": {
                    "variable": {
                        "value": "self.blending_beta",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_83": {
                    "variable": {
                        "value": "self.noise_var",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(norm_nc)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.dir_path": {
                    "value": "dir_path",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SPADE_235": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_258": {
                    "variable": {
                        "value": "self.mlp_shared",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                        "possible_values": []
                    }
                },
                "Conv2d_263": {
                    "variable": {
                        "value": "self.mlp_gamma",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "nhidden",
                        "possible_values": [
                            [
                                "128",
                                "Constant"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "norm_nc",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ks",
                        "possible_values": [
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ],
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pw",
                        "possible_values": [
                            [
                                "ks // 2",
                                "BinOp"
                            ],
                            [
                                "ks // 2",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Conv2d_264": {
                    "variable": {
                        "value": "self.mlp_beta",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "nhidden",
                        "possible_values": [
                            [
                                "128",
                                "Constant"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "norm_nc",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ks",
                        "possible_values": [
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ],
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pw",
                        "possible_values": [
                            [
                                "ks // 2",
                                "BinOp"
                            ],
                            [
                                "ks // 2",
                                "BinOp"
                            ]
                        ]
                    }
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "segmap",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.fc_mu0",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.fc_mu1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.fc_mu2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.fc_mu3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.fc_mu4",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc_mu5",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc_mu6",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc_mu7",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.fc_mu8",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.fc_mu9",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_222": {
                "variable": {
                    "value": "self.fc_mu10",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.fc_mu11",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.fc_mu12",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.fc_mu13",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.fc_mu14",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.fc_mu15",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.fc_mu16",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.fc_mu17",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.fc_mu18",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_length",
                    "possible_values": [
                        [
                            "self.style_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "spectral_norm_29": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "norm_layer",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "layer",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_93": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv_gamma",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.style_length",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv_beta",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.style_length",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "middle_avg",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b_size, self.style_length, h_size, w_size)",
                    "possible_values": []
                },
                "device": {
                    "value": "normalized.device",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "gamma_alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "self.blending_gamma",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "beta_alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "self.blending_beta",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_245": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "norm_nc",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "label_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ],
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ],
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_260": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_46": {
                "variable": {
                    "value": "norm_layer",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_249": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "randn_117": {
                "*size": {
                    "value": "x.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.shape[2]",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "component_mask_area",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap.bool()[i, j]",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "component_mask_area",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap.bool()[i, j]",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "middle_mu",
                    "possible_values": []
                },
                "input": {
                    "value": "self.__getattr__('fc_mu' + str(j))(style_codes[i][j])",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "middle_mu",
                    "possible_values": []
                },
                "input": {
                    "value": "self.__getattr__('fc_mu' + str(j))(style_code_tmp)",
                    "possible_values": []
                }
            }
        }
    },
    "models/img_style_generator/utils/utils.py": {
        "torch": {
            "load_207": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "self.cmap",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "possible_values": []
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/models/progressive.py": {
        "torch": {
            "ProGANGenerator_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_24": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "blocks",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "ProGANGeneratorBlock_89": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.initial": {
                    "value": "initial",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.final": {
                    "value": "final",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "LeakyReLU_97": {
                    "variable": {
                        "value": "self.lrelu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "ProGANDiscriminator_132": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_144": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "blocks",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "ProGANDiscriminatorBlock_193": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.final": {
                    "value": "final",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "LeakyReLU_200": {
                    "variable": {
                        "value": "self.lrelu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "AvgPool2d_201": {
                    "variable": {
                        "value": "self.downsample",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "cat_55": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, cond['ins_cond'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, cond['delta_cond'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, cond['sem_cond'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['sem_seg'], x['ins_center'], x['ins_offset'], x['ins_edge'], x['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['sem_seg'], x['ins_center'], x['ins_offset'], x['ins_edge'], x['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/models/seg_model.py": {
        "torch": {
            "SegModel_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                },
                "self.is_main": {
                    "value": "is_main",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.is_train": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "spread",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "fake_sem_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "fake_ins_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "pseudo_center_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "real_sem_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "real_ins_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "pseudo_ins_center",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "pseudo_ins_offset",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "entropy",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "mentropy",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "fake_center_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "log_507": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "fake + 1e-05",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "opt_g",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "variable": {
                    "value": "opt_d",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "possible_values": []
                }
            },
            "zeros_like_143": {
                "variable": {
                    "value": "sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "possible_values": [
                        [
                            "seg['sem_seg'].max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "sem.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "sem.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "y_soft.max(dim, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "y_soft.max(dim, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "crop_prop",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "x_fake_things_seg[sem_seg]",
                    "possible_values": []
                },
                "input": {
                    "value": "x_fake_segs[-1]['sem_seg']",
                    "possible_values": []
                }
            },
            "log_271": {
                "variable": {
                    "value": "logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['raw_sem_seg'] + 1e-05",
                    "possible_values": []
                }
            },
            "log_275": {
                "variable": {
                    "value": "logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['sem_seg'] + 1e-05",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "real",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_seg['sem_seg'], real_seg['ins_center'], real_seg['ins_offset'], real_seg['ins_edge'], real_seg['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "fake",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_seg['sem_seg'], fake_seg['ins_center'], fake_seg['ins_offset'], fake_seg['ins_edge'], fake_seg['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_452": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['raw_sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "zeros_like_499": {
                "variable": {
                    "value": "y_hard",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "torch.cat([fake_seg['sem_seg'], fake_seg['ins_center'], fake_seg['ins_offset'], fake_seg['ins_edge'], fake_seg['ins_density']], dim=1)",
                            "Call"
                        ],
                        [
                            "fake_seg['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_518": {
                "variable": {
                    "value": "y_hard",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "torch.log(fake + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "seg[sem_seg]",
                    "possible_values": []
                },
                "input": {
                    "value": "seg['sem_seg']",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "input": {
                    "value": "t",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "(int(self.opt.dim), int(self.opt.aspect_ratio * self.opt.dim))",
                            "Tuple"
                        ],
                        [
                            "(int(self.opt.seg_dim), int(self.opt.aspect_ratio * self.opt.seg_dim)) if self.opt.dim != self.opt.seg_dim else None",
                            "IfExp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'bilinear' if self.opt.discretization == 'none' or self.opt.bilimax else 'nearest'",
                            "IfExp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "edge",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.zeros_like(index, dtype=bool)",
                            "Call"
                        ],
                        [
                            "mask + (sem[:, [i]] == 1.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_172": {
                "variable": {
                    "value": "cond[sem_cond]",
                    "possible_values": []
                },
                "input": {
                    "value": "sem * crop_edge",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "cond_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "cond['sem_cond']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_182": {
                "variable": {
                    "value": "real_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_189": {
                "variable": {
                    "value": "inter",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(target_cond, real_cond)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "cond[sem_cond]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cond['sem_cond'], bg_cond]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_205": {
                "input": {
                    "value": "cond['sem_cond']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_314": {
                "variable": {
                    "value": "scaled_sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sem).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fake_seg['sem_seg'].size()[2:]",
                    "possible_values": [
                        [
                            "self.postprocess_output(fake_seg)",
                            "Call"
                        ],
                        [
                            "self.generate_fake(real_cond, real_seg, z, interpolate, alpha, hard, log, global_iteration)",
                            "Call"
                        ],
                        [
                            "self.postprocess_output(fake_seg)",
                            "Call"
                        ],
                        [
                            "fake_segs[-1]",
                            "Subscript"
                        ],
                        [
                            "self.netG.interpolate(z, alpha, sem, cond=real_cond)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.netG(z, sem, cond=real_cond)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Tensor_429": {
                "variable": {
                    "value": "real_center_mask",
                    "possible_values": []
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_457": {
                "variable": {
                    "value": "real_sem_cond",
                    "possible_values": []
                }
            },
            "isnan_508": {
                "input": {
                    "value": "logits.max()",
                    "possible_values": []
                }
            },
            "empty_like_511": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "torch.log(fake + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_511": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "target_cond_tot",
                    "possible_values": []
                },
                "input": {
                    "value": "target_cond_selection",
                    "possible_values": [
                        [
                            "cond['sem_cond'][i][self.opt.bias_sem] * self.opt.bias_mul",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_152": {
                "variable": {
                    "value": "cond[sem_cond][i]",
                    "possible_values": []
                },
                "input": {
                    "value": "sem[i, :, :, start:stop]",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "mean_176": {
                "input": {
                    "value": "mask.float() + crop_edge.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_272": {
                "input": {
                    "value": "torch.mul(fake_seg['raw_sem_seg'], logprob)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_273": {
                "input": {
                    "value": "entropy",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "-torch.sum(torch.mul(fake_seg['raw_sem_seg'], logprob), dim=1, keepdim=True)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_276": {
                "input": {
                    "value": "torch.mul(fake_seg['sem_seg'], logprob)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_277": {
                "input": {
                    "value": "mentropy",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "-torch.sum(torch.mul(fake_seg['sem_seg'], logprob), dim=1, keepdim=True)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_285": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['raw_sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "log_286": {
                "variable": {
                    "value": "logprob_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_cond + 1e-05",
                    "possible_values": []
                }
            },
            "sum_294": {
                "variable": {
                    "value": "fake_ins_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['ins_density']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_302": {
                "variable": {
                    "value": "spread",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_mask",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "fake_seg['sem_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_322": {
                "variable": {
                    "value": "scal",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_codes * real_codes",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_367": {
                "variable": {
                    "value": "fake_raw_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem[:16]",
                    "possible_values": []
                }
            },
            "rand_186": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target_cond.shape[0], 1)",
                    "possible_values": []
                }
            },
            "min_189": {
                "input": {
                    "value": "target_cond",
                    "possible_values": [
                        [
                            "cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "0.75 * real_cond + 0.25 * target_cond",
                            "BinOp"
                        ],
                        [
                            "alpha * target_cond + (1.0 - alpha) * real_cond",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_199": {
                "input": {
                    "value": "cond['sem_cond']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_202": {
                "input": {
                    "value": "cond['sem_cond']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mul_272": {
                "input": {
                    "value": "fake_seg['raw_sem_seg']",
                    "possible_values": []
                },
                "other": {
                    "value": "logprob",
                    "possible_values": [
                        [
                            "torch.log(fake_seg['raw_sem_seg'] + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.log(fake_seg['sem_seg'] + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_276": {
                "input": {
                    "value": "fake_seg['sem_seg']",
                    "possible_values": []
                },
                "other": {
                    "value": "logprob",
                    "possible_values": [
                        [
                            "torch.log(fake_seg['raw_sem_seg'] + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.log(fake_seg['sem_seg'] + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_329": {
                "input": {
                    "value": "(fake_seg['sem_seg'] - scaled_sem) ** 2",
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mse_loss_341": {
                "input": {
                    "value": "fake_seg['ins_center']",
                    "possible_values": []
                },
                "target": {
                    "value": "pseudo_ins_center",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_342": {
                "input": {
                    "value": "x_fake_seg['ins_offset']",
                    "possible_values": []
                },
                "target": {
                    "value": "pseudo_ins_offset",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_362": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "fake_raw_sem_seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_raw_sem_seg, bg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "kl_div_287": {
                "input": {
                    "value": "logprob_cond",
                    "possible_values": [
                        [
                            "torch.log(fake_sem_cond + 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_sem_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "real_cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "real_cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "l1_loss_295": {
                "input": {
                    "value": "fake_ins_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "torch.sum(fake_seg['ins_density'], dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_ins_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "real_cond['ins_cond']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_303": {
                "input": {
                    "value": "(spread - 1) ** 2",
                    "possible_values": []
                }
            },
            "argmax_319": {
                "input": {
                    "value": "fake_seg['raw_sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_323": {
                "input": {
                    "value": "scal",
                    "possible_values": [
                        [
                            "torch.sum(fake_codes * real_codes, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_326": {
                "input": {
                    "value": "(fake_seg['sem_seg'] - scaled_sem) ** 2",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/models/style.py": {
        "torch": {
            "StyleGANGenerator_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.aspect_ratio": {
                    "value": "aspect_ratio",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_46": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "blocks",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "Sequential_53": {
                    "variable": {
                        "value": "self.style",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*style_layers",
                        "possible_values": []
                    }
                },
                "self.rgb": {
                    "value": "rgb",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StyleGANGeneratorBlock_156": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "LeakyReLU_178": {
                    "variable": {
                        "value": "self.lrelu1",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    }
                },
                "LeakyReLU_183": {
                    "variable": {
                        "value": "self.lrelu2",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    }
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, *c)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "*args": {
                    "value": "modules.FusedUpsample(in_channels, out_channels, kernel_size=3, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "size * self.aspect_ratio",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "Upsample_172": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/blur.py": {
        "torch": {
            "BlurFunctionBackward_6": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "BlurFunction_28": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Blur_49": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "tensor_53": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "[[1, 2, 1], [2, 4, 2], [1, 2, 1]]",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "torch.float32",
                        "possible_values": []
                    }
                },
                "flip_56": {
                    "variable": {
                        "value": "weight_flip",
                        "possible_values": []
                    },
                    "input": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "torch.tensor([[1, 2, 1], [2, 4, 2], [1, 2, 1]], dtype=torch.float32)",
                                "Call"
                            ],
                            [
                                "weight.view(1, 1, 3, 3)",
                                "Call"
                            ],
                            [
                                "weight / weight.sum()",
                                "BinOp"
                            ]
                        ]
                    },
                    "dims": {
                        "value": "[2, 3]",
                        "possible_values": []
                    }
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel_flip",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "grad_output.shape[1]",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "gradgrad_output",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "gradgrad_output.shape[1]",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.shape[1]",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/cond_mask.py": {
        "torch": {
            "BaseActivation_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Softmax2d_15": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "AssistedBlock_183": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.to_alpha": {
                    "value": "to_alpha",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "LeakyReLU_201": {
                    "variable": {
                        "value": "self.lrelu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Mask_239": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Alpha_267": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CondJoint_277": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "interpolate_334": {
                "variable": {
                    "value": "sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "F.interpolate(sem, size=pred_sem.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(sem, size=sem_seg.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "pred_sem.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "zeros_like_335": {
                "variable": {
                    "value": "final_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "F.interpolate(sem, size=pred_sem.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(sem, size=sem_seg.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "ins_offset",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "ins_edge",
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "variable": {
                    "value": "ins_density",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "variable": {
                    "value": "ins_center",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_center",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.center_activation(ins_center)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ins_center)",
                            "Call"
                        ],
                        [
                            "self.center_activation(ins_center)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_64": {
                "variable": {
                    "value": "ins_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_offset",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i + 1:i + 3]",
                            "Subscript"
                        ],
                        [
                            "self.offset_activation(ins_offset)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ins_offset)",
                            "Call"
                        ],
                        [
                            "self.offset_activation(ins_offset)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "ins_edge",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_edge",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.edge_activation(ins_edge)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ins_edge)",
                            "Call"
                        ],
                        [
                            "self.edge_activation(ins_edge)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "ins_density",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_density",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i:i + self.num_things]",
                            "Subscript"
                        ],
                        [
                            "self.density_activation(ins_density)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ins_density)",
                            "Call"
                        ],
                        [
                            "self.cond_density_activation(ins_density, ins_cond)",
                            "Call"
                        ],
                        [
                            "F.softmax(ins_density.view(*ins_density.size()[:2], -1), dim=2).view_as(ins_density)",
                            "Call"
                        ],
                        [
                            "ins_density * ins_cond.view(ins_density.size(0), -1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "ins_density",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_density.view(*ins_density.size()[:2], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sem_seg, ins_center, ins_offset, ins_edge, ins_density]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sem_seg, ins_center, ins_offset, ins_edge, ins_density)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "sem_seg[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "self.softmax(sem_seg)",
                            "Call"
                        ],
                        [
                            "x[:, :self.out_semantics]",
                            "Subscript"
                        ],
                        [
                            "self.sem_activation(sem_seg)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sem_seg)",
                            "Call"
                        ],
                        [
                            "F.softmax(sem_seg.view(*sem_seg.size()[:2], -1), dim=2).view_as(sem_seg)",
                            "Call"
                        ],
                        [
                            "alpha * sem_seg + (1 - alpha) * input_sem_seg",
                            "BinOp"
                        ],
                        [
                            "(sem_seg + eps) / torch.sum(sem_seg + eps, dim=(2, 3), keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "sem_mask / torch.sum(sem_mask, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x[:, :self.out_semantics]",
                            "Subscript"
                        ],
                        [
                            "self.sem_activation(sem_seg)",
                            "Call"
                        ],
                        [
                            "raw_sem_seg",
                            "Name"
                        ],
                        [
                            "merge_sem(sem, raw_sem_seg, self.fill_crop_only, self.num_semantics, self.sem_label_ban)",
                            "Call"
                        ],
                        [
                            "self.sem_conv(x)",
                            "Call"
                        ],
                        [
                            "raw_sem_seg",
                            "Name"
                        ],
                        [
                            "merge_sem(sem, raw_sem_seg, self.fill_crop_only, self.num_semantics, self.sem_label_ban)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg.view(*sem_seg.size()[:2], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "interpolate_116": {
                "variable": {
                    "value": "sem",
                    "possible_values": []
                },
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "F.interpolate(sem, size=pred_sem.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(sem, size=sem_seg.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "sem_seg.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Tensor_165": {
                "variable": {
                    "value": "sem_mask",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sem_seg, ins_center, ins_offset, ins_edge, ins_density)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sem_seg, ins_seg)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_274": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[sem_seg, ins_center, ins_offset, ins_edge, ins_density]",
                            "List"
                        ],
                        [
                            "torch.cat((sem_seg, ins_center, ins_offset, ins_edge, ins_density), dim=1)",
                            "Call"
                        ],
                        [
                            "[sem_seg, ins_center, ins_offset, ins_edge, ins_density]",
                            "List"
                        ],
                        [
                            "torch.cat((sem_seg, ins_center, ins_offset, ins_edge, ins_density), dim=1)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(alpha) * x + self.lrelu(beta)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((sem_seg, ins_seg), dim=1)",
                            "Call"
                        ],
                        [
                            "sem_seg",
                            "Name"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.to_mask(x)",
                            "Call"
                        ],
                        [
                            "self.base_activation(x, as_list=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_298": {
                "variable": {
                    "value": "self.assisted_blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.assisted_blocks",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "sem_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "sem_cond",
                    "possible_values": [
                        [
                            "sem_cond.clone()",
                            "Call"
                        ],
                        [
                            "sem_cond / torch.sum(sem_cond, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.filter_sem_cond(sem_cond, sem_seg.size(2), sem_seg.size(3))",
                            "Call"
                        ],
                        [
                            "cond['sem_cond']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "sem_mask",
                    "possible_values": [
                        [
                            "sem_seg * sem_cond.view(sem_seg.size(0), -1, 1, 1) * sem_seg.size(2) * sem_seg.size(3)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor([])",
                            "Call"
                        ],
                        [
                            "torch.tensor([])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "Tensor_88": {},
            "sum_117": {
                "input": {
                    "value": "sem + eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "sem_seg + eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "max_338": {
                "input": {
                    "value": "sem",
                    "possible_values": [
                        [
                            "F.interpolate(sem, size=pred_sem.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(sem, size=sem_seg.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/equalized.py": {
        "torch": {
            "EqualizedConv2d_8": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                },
                "self.scale": {
                    "value": "std",
                    "possible_values": [
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ],
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "EqualizedLinear_46": {
                "base_class_0": {
                    "value": "torch.nn.Linear",
                    "possible_values": []
                },
                "self.scale": {
                    "value": "std",
                    "possible_values": [
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ],
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_41": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "possible_values": [
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "linear_59": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "possible_values": [
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "data": {
                    "value": "weight.data",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/fused.py": {
        "torch": {
            "FusedUpsample_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "randn_10": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "kernel_size",
                        "possible_values": []
                    },
                    "layout": {
                        "value": "kernel_size",
                        "possible_values": []
                    }
                },
                "zeros_11": {
                    "variable": {
                        "value": "bias",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "out_channel",
                        "possible_values": []
                    }
                },
                "Parameter_16": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ],
                            [
                                "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Parameter_17": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ],
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ]
                        ]
                    }
                },
                "self.pad": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FusedDownsample_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "randn_39": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "out": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "kernel_size",
                        "possible_values": []
                    },
                    "layout": {
                        "value": "kernel_size",
                        "possible_values": []
                    }
                },
                "zeros_40": {
                    "variable": {
                        "value": "bias",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "out_channel",
                        "possible_values": []
                    }
                },
                "Parameter_45": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ],
                            [
                                "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Parameter_46": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ],
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ]
                        ]
                    }
                },
                "self.pad": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_22": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight * self.multiplier",
                    "possible_values": []
                },
                "pad": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "conv_transpose2d_30": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ],
                        [
                            "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight * self.multiplier",
                    "possible_values": []
                },
                "pad": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ],
                        [
                            "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/gan_loss.py": {
        "torch": {
            "DiscreteImprovedWGANLoss_145": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.discriminator": {
                    "value": "discriminator",
                    "possible_values": [
                        [
                            "torch.Tensor([])",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.lambda_": {
                    "value": "lambda_",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ],
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GANSampler_179": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "real_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - d_real",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "real_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "fake_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + d_fake",
                    "possible_values": []
                }
            },
            "mean_66": {
                "variable": {
                    "value": "fake_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_81": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "x_real.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "variable": {
                    "value": "grad_outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_interpolates",
                    "possible_values": [
                        [
                            "forward(interpolates)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_151": {
                "variable": {
                    "value": "fake_cumsum",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_152": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "fake.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "fake.size(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake.size(3)",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "(fake_cumsum < alpha) * 1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cumsum_188": {
                "variable": {
                    "value": "fake_cumsum",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_189": {
                "variable": {
                    "value": "rand_mat",
                    "possible_values": []
                },
                "*size": {
                    "value": "fake.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "fake.size(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake.size(3)",
                    "possible_values": []
                }
            },
            "unsqueeze_189": {
                "variable": {
                    "value": "rand_mat",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_191": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "(fake_cumsum < rand_mat) * 1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "gather_193": {
                "variable": {
                    "value": "x_fake",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ind",
                    "possible_values": [
                        [
                            "torch.sum((fake_cumsum < alpha) * 1, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "sample_ind.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum((fake_cumsum < rand_mat) * 1, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "sample_ind.type(torch.cuda.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "dis_interpolates",
                    "possible_values": [
                        [
                            "forward(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "possible_values": [
                        [
                            "alpha * x_real.detach() + (1 - alpha) * x_fake.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "possible_values": [
                        [
                            "torch.ones_like(dis_interpolates).to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_215": {
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_216": {
                "input": {
                    "value": "log_softmax_grad",
                    "possible_values": [
                        [
                            "torch.log(fake).grad",
                            "Attribute"
                        ],
                        [
                            "torch.log(fake).grad",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "x_fake",
                    "possible_values": [
                        [
                            "self.sample(fake)",
                            "Call"
                        ],
                        [
                            "torch.gather(fake, dim=1, index=sample_ind)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seg_completor/modules/input.py": {
        "torch": {
            "ConstantInput_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_8": {
                    "variable": {
                        "value": "self.input",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, channel, size, size * aspect_ratio)",
                        "possible_values": []
                    }
                }
            },
            "randn_8": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size * aspect_ratio",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/instance_refiner.py": {
        "torch": {
            "Tensor_12": {
                "variable": {
                    "value": "self.things_idx",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "pseudo_center",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_center",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "pseudo_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_offset",
                    "possible_values": [
                        [
                            "ins_offset * has_thing_in_pxl",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, 2, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "ins_offset * seg_mc.detach()[:, self.things_idx]",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, shape[-2], shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "variable": {
                    "value": "fake_center_count",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_center.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "center_count",
                    "possible_values": []
                },
                "input": {
                    "value": "is_center.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "thing_count",
                    "possible_values": []
                },
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "topk_115": {
                "variable": {
                    "value": "(center_values, center_pos)",
                    "possible_values": []
                },
                "input": {
                    "value": "(ins_center * is_center).view(batch, channels, -1)",
                    "possible_values": []
                },
                "k": {
                    "value": "num",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "closest_center_mc",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": []
                },
                "out": {
                    "value": "num",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "height",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "possible_values": [
                        [
                            "int(self.sigma[self.dim_ind])",
                            "Call"
                        ],
                        [
                            "width + 1 if width % 2 == 0 else width",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_138": {
                "variable": {
                    "value": "sum_pseudo_instance",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_instance",
                    "possible_values": [
                        [
                            "things_seg.view(batch, channels, 1, height, width) * closest_center_mc",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "possible_values": []
                }
            },
            "round_141": {
                "variable": {
                    "value": "pseudo_x",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 * torch.sum(pseudo_instance_x, dim=(3, 4)) / sum_pseudo_instance * height",
                    "possible_values": []
                }
            },
            "round_143": {
                "variable": {
                    "value": "pseudo_y",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 * torch.sum(pseudo_instance_y, dim=(3, 4)) / sum_pseudo_instance * height",
                    "possible_values": []
                }
            },
            "empty_like_151": {
                "variable": {
                    "value": "pseudo_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_offset",
                    "possible_values": [
                        [
                            "ins_offset * has_thing_in_pxl",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, 2, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "ins_offset * seg_mc.detach()[:, self.things_idx]",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, shape[-2], shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_152": {
                "variable": {
                    "value": "pseudo_offset[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_offset_x",
                    "possible_values": [
                        [
                            "pseudo_instance_offset_x * pseudo_instance",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "pseudo_offset[:, 1]",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_offset_y",
                    "possible_values": [
                        [
                            "pseudo_instance_offset_y * pseudo_instance",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "max_pool2d_160": {
                "variable": {
                    "value": "window_maxima",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_center",
                    "possible_values": [
                        [
                            "ins_center.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "width",
                    "possible_values": [
                        [
                            "int(self.sigma[self.dim_ind])",
                            "Call"
                        ],
                        [
                            "width + 1 if width % 2 == 0 else width",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "width // 2",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "min_130": {
                "input": {
                    "value": "squared_dis",
                    "possible_values": [
                        [
                            "dis_x ** 2 + dis_y ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "mask_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "possible_values": []
                }
            },
            "gather_126": {
                "input": {
                    "value": "fake_x",
                    "possible_values": [
                        [
                            "center_pos % width",
                            "BinOp"
                        ],
                        [
                            "fake_x.expand(height, width, batch, channels, num).permute(2, 3, 4, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "things_id",
                    "possible_values": [
                        [
                            "things_seg.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "things_id.expand(num, batch, 1, height, width).permute(1, 2, 0, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_127": {
                "input": {
                    "value": "fake_y",
                    "possible_values": [
                        [
                            "center_pos / width",
                            "BinOp"
                        ],
                        [
                            "fake_y.expand(height, width, batch, channels, num).permute(2, 3, 4, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "things_id",
                    "possible_values": [
                        [
                            "things_seg.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "things_id.expand(num, batch, 1, height, width).permute(1, 2, 0, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_72": {
                "*size": {
                    "value": "mask_shape",
                    "possible_values": [
                        [
                            "torch.sum(mask.long())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "mask_shape",
                    "possible_values": [
                        [
                            "torch.sum(mask.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "max_113": {
                "input": {
                    "value": "nms_mask.view(batch, channels, -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_66": {
                "input": {
                    "value": "scaled_x_coord[mask]",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "scaled_y_coord[mask]",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "sub_mask.float()",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "pseudo_instance_x",
                    "possible_values": [
                        [
                            "pseudo_instance * scaled_x_coord.view(1, 1, 1, height, width)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "pseudo_instance_y",
                    "possible_values": [
                        [
                            "pseudo_instance * scaled_y_coord.view(1, 1, 1, height, width)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "scaled_x_coord[mask][sub_mask]",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "scaled_y_coord[mask][sub_mask]",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/interpolate.py": {
        "torch": {
            "NearestInterpolate_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale_factor": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BilinearInterpolate_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale_factor": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_12": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                }
            },
            "interpolate_22": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/noise.py": {
        "torch": {
            "NoiseInjection_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_8": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, channel, 1, 1)",
                        "possible_values": []
                    }
                }
            },
            "zeros_8": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/norm.py": {
        "torch": {
            "AdaptiveInstanceNorm_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "InstanceNorm2d_9": {
                    "variable": {
                        "value": "self.norm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "in_channel",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "models/seg_completor/modules/pixel_norm.py": {
        "torch": {
            "PixelNorm_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_11": {
                "input": {
                    "value": "x ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_completor/modules/spade.py": {
        "torch": {
            "SPADE_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_44": {
                    "variable": {
                        "value": "self.mlp_shared",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                        "possible_values": []
                    }
                },
                "Conv2d_48": {
                    "variable": {
                        "value": "self.mlp_gamma",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "nhidden",
                        "possible_values": [
                            [
                                "128",
                                "Constant"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "norm_nc",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ks",
                        "possible_values": [
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pw",
                        "possible_values": [
                            [
                                "ks // 2",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Conv2d_49": {
                    "variable": {
                        "value": "self.mlp_beta",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "nhidden",
                        "possible_values": [
                            [
                                "128",
                                "Constant"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "norm_nc",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ks",
                        "possible_values": [
                            [
                                "int(parsed.group(2))",
                                "Call"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pw",
                        "possible_values": [
                            [
                                "ks // 2",
                                "BinOp"
                            ]
                        ]
                    }
                }
            },
            "SPADEResnetBlock_75": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_83": {
                    "variable": {
                        "value": "self.conv_0",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fin",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_84": {
                    "variable": {
                        "value": "self.conv_1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fmiddle",
                        "possible_values": [
                            [
                                "min(fin, fout)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "fout",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "interpolate_57": {
                "variable": {
                    "value": "segmap",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_31": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "spectral_norm_90": {
                "variable": {
                    "value": "self.conv_0",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "possible_values": []
                }
            },
            "spectral_norm_91": {
                "variable": {
                    "value": "self.conv_1",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "possible_values": []
                }
            },
            "leaky_relu_123": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "label_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "spectral_norm_93": {
                "variable": {
                    "value": "self.conv_s",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.param_free_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/models/progressive.py": {
        "torch": {
            "ProGANGenerator_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_22": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "blocks",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "ProGANGeneratorBlock_84": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.initial": {
                    "value": "initial",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.final": {
                    "value": "final",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "LeakyReLU_92": {
                    "variable": {
                        "value": "self.lrelu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "ProGANDiscriminator_126": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_142": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "blocks",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "ProGANDiscriminatorBlock_204": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.final": {
                    "value": "final",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "LeakyReLU_212": {
                    "variable": {
                        "value": "self.lrelu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "AvgPool2d_213": {
                    "variable": {
                        "value": "self.downsample",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "cat_48": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, cond['sem_cond'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, cond['ins_cond'])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_cond]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_cond]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['sem_seg'], x['ins_center'], x['ins_offset'], x['ins_edge'], x['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['sem_seg'], x['ins_center'], x['ins_offset'], x['ins_edge'], x['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/models/seg_model.py": {
        "torch": {
            "SegModel_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                },
                "self.is_main": {
                    "value": "is_main",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "spread",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "fake_sem_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "fake_ins_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "pseudo_center_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "fake_raw_filtered_sem_seg",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "real_sem_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "real_ins_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "pseudo_ins_center",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "pseudo_ins_offset",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "entropy",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "fake_center_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "log_392": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "fake + 1e-05",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "opt_g",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "opt_d",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "possible_values": []
                }
            },
            "log_179": {
                "variable": {
                    "value": "logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['sem_seg'] + 1e-05",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "real",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_seg['sem_seg'], real_seg['ins_center'], real_seg['ins_offset'], real_seg['ins_edge'], real_seg['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "fake",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_seg['sem_seg'], fake_seg['ins_center'], fake_seg['ins_offset'], fake_seg['ins_edge'], fake_seg['ins_density']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_340": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "x_fake_seg['sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "zeros_like_384": {
                "variable": {
                    "value": "y_hard",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "torch.cat([fake_seg['sem_seg'], fake_seg['ins_center'], fake_seg['ins_offset'], fake_seg['ins_edge'], fake_seg['ins_density']], dim=1)",
                            "Call"
                        ],
                        [
                            "fake_seg['sem_seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_403": {
                "variable": {
                    "value": "y_hard",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "torch.log(fake + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "seg[sem_seg]",
                    "possible_values": []
                },
                "input": {
                    "value": "seg['sem_seg']",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "input": {
                    "value": "t",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "(int(self.opt.dim), int(self.opt.aspect_ratio * self.opt.dim))",
                            "Tuple"
                        ],
                        [
                            "(int(self.opt.seg_dim), int(self.opt.aspect_ratio * self.opt.seg_dim)) if self.opt.dim != self.opt.seg_dim else None",
                            "IfExp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'bilinear' if self.opt.discretization == 'none' or self.opt.bilimax else 'nearest'",
                            "IfExp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_291": {
                "input": {
                    "value": "real_seg['sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "Tensor_319": {
                "variable": {
                    "value": "real_center_mask",
                    "possible_values": []
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_345": {
                "variable": {
                    "value": "real_sem_cond",
                    "possible_values": []
                }
            },
            "isnan_393": {
                "input": {
                    "value": "logits.max()",
                    "possible_values": []
                }
            },
            "empty_like_396": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "torch.log(fake + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_396": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_180": {
                "input": {
                    "value": "torch.mul(fake_seg['sem_seg'], logprob)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "entropy",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "-torch.sum(torch.mul(fake_seg['sem_seg'], logprob), dim=1, keepdim=True)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_190": {
                "variable": {
                    "value": "fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['sem_seg']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "zeros_like_192": {
                "variable": {
                    "value": "d_fake_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['sem_seg']",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "d_fake_sem_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_sem_seg",
                    "possible_values": [
                        [
                            "torch.zeros_like(fake_seg['sem_seg']).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "log_194": {
                "variable": {
                    "value": "logprob_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_cond + 1e-05",
                    "possible_values": []
                }
            },
            "log_195": {
                "variable": {
                    "value": "d_logprob_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_sem_cond + 1e-05",
                    "possible_values": []
                }
            },
            "sum_204": {
                "variable": {
                    "value": "fake_ins_cond",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_seg['ins_density']",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_213": {
                "variable": {
                    "value": "spread",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_sem_mask",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "fake_seg['sem_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mul_180": {
                "input": {
                    "value": "fake_seg['sem_seg']",
                    "possible_values": []
                },
                "other": {
                    "value": "logprob",
                    "possible_values": [
                        [
                            "torch.log(fake_seg['sem_seg'] + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mse_loss_235": {
                "input": {
                    "value": "fake_seg['ins_center']",
                    "possible_values": []
                },
                "target": {
                    "value": "pseudo_ins_center",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_236": {
                "input": {
                    "value": "x_fake_seg['ins_offset']",
                    "possible_values": []
                },
                "target": {
                    "value": "pseudo_ins_offset",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "fake_raw_filtered_sem_seg",
                    "possible_values": []
                },
                "*size": {
                    "value": "fake_raw_sem_seg[:16].cpu().shape",
                    "possible_values": []
                }
            },
            "kl_div_196": {
                "input": {
                    "value": "logprob_cond",
                    "possible_values": [
                        [
                            "torch.log(fake_sem_cond + 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_sem_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "real_cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "real_cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "kl_div_197": {
                "input": {
                    "value": "d_logprob_cond",
                    "possible_values": [
                        [
                            "torch.log(d_fake_sem_cond + 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_sem_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "real_cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "real_cond['sem_cond']",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "l1_loss_205": {
                "input": {
                    "value": "fake_ins_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "torch.sum(fake_seg['ins_density'], dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_ins_cond",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "real_cond['ins_cond']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_214": {
                "input": {
                    "value": "(spread - 1) ** 2",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_219": {
                "input": {
                    "value": "torch.sum(fake_sem_mask[:, other_idx], dim=1) * fake_sem_mask[:, idx]",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "fake_sem_mask[:, other_idx]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/blur.py": {
        "torch": {
            "BlurFunctionBackward_6": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "BlurFunction_28": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Blur_49": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "tensor_53": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "[[1, 2, 1], [2, 4, 2], [1, 2, 1]]",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "torch.float32",
                        "possible_values": []
                    }
                },
                "flip_56": {
                    "variable": {
                        "value": "weight_flip",
                        "possible_values": []
                    },
                    "input": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "torch.tensor([[1, 2, 1], [2, 4, 2], [1, 2, 1]], dtype=torch.float32)",
                                "Call"
                            ],
                            [
                                "weight.view(1, 1, 3, 3)",
                                "Call"
                            ],
                            [
                                "weight / weight.sum()",
                                "BinOp"
                            ]
                        ]
                    },
                    "dims": {
                        "value": "[2, 3]",
                        "possible_values": []
                    }
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel_flip",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "grad_output.shape[1]",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "gradgrad_output",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "gradgrad_output.shape[1]",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.shape[1]",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/cond_mask.py": {
        "torch": {
            "BaseActivation_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Softmax2d_13": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "AssistedBlock_179": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "LeakyReLU_196": {
                    "variable": {
                        "value": "self.lrelu",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Mask_227": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CondJoint_253": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CondMask_299": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "ins_offset",
                    "possible_values": []
                }
            },
            "Tensor_23": {
                "variable": {
                    "value": "ins_edge",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "ins_density",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "ins_center",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_center",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.center_activation(ins_center)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ins_center)",
                            "Call"
                        ],
                        [
                            "self.center_activation(ins_center)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "ins_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_offset",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i + 1:i + 3]",
                            "Subscript"
                        ],
                        [
                            "self.offset_activation(ins_offset)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ins_offset)",
                            "Call"
                        ],
                        [
                            "self.offset_activation(ins_offset)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "ins_edge",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_edge",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.edge_activation(ins_edge)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ins_edge)",
                            "Call"
                        ],
                        [
                            "self.edge_activation(ins_edge)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "ins_density",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_density",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(ins_seg.get_device())",
                            "Call"
                        ],
                        [
                            "ins_seg[:, i:i + self.num_things]",
                            "Subscript"
                        ],
                        [
                            "self.density_activation(ins_density)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ins_density)",
                            "Call"
                        ],
                        [
                            "self.cond_density_activation(ins_density, ins_cond)",
                            "Call"
                        ],
                        [
                            "F.softmax(ins_density.view(*ins_density.size()[:2], -1), dim=2).view_as(ins_density)",
                            "Call"
                        ],
                        [
                            "ins_density * ins_cond.view(ins_density.size(0), -1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "ins_density",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_density.view(*ins_density.size()[:2], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seg",
                    "possible_values": [
                        [
                            "torch.cat(seg, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sem_seg, ins_center, ins_offset, ins_edge, ins_density)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "things_cond",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[things_cond, bg_cond]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "sem_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stuff_mask, things_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg",
                    "possible_values": [
                        [
                            "sem_seg[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "self.softmax(sem_seg)",
                            "Call"
                        ],
                        [
                            "x[:, :self.out_semantics]",
                            "Subscript"
                        ],
                        [
                            "self.sem_activation(sem_seg)",
                            "Call"
                        ],
                        [
                            "sem_seg[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(sem_seg)",
                            "Call"
                        ],
                        [
                            "F.softmax(sem_seg.view(*sem_seg.size()[:2], -1), dim=2).view_as(sem_seg)",
                            "Call"
                        ],
                        [
                            "(sem_mask + eps) / torch.sum(sem_mask + eps, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x[:, :self.out_semantics]",
                            "Subscript"
                        ],
                        [
                            "self.sem_activation(sem_seg)",
                            "Call"
                        ],
                        [
                            "self.sem_conv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "sem_seg.view(*sem_seg.size()[:2], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "sem_mask",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sem_seg, ins_center, ins_offset, ins_edge, ins_density)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sem_seg, ins_seg)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self.assisted_blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.assisted_blocks",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "sem_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "raw_sem_seg",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "sem_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "raw_sem_seg",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "sem_cond",
                    "possible_values": [
                        [
                            "sem_cond.clone()",
                            "Call"
                        ],
                        [
                            "sem_cond / torch.sum(sem_cond, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.filter_sem_cond(sem_cond, sem_seg.size(2), sem_seg.size(3))",
                            "Call"
                        ],
                        [
                            "cond['sem_cond']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "stuff_cond",
                    "possible_values": [
                        [
                            "sem_cond[:, self.stuff_idx]",
                            "Subscript"
                        ],
                        [
                            "stuff_cond / torch.sum(stuff_cond, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "sem_mask + eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Tensor_86": {},
            "sum_112": {
                "input": {
                    "value": "things_cond",
                    "possible_values": [
                        [
                            "sem_cond[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([things_cond, bg_cond], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/equalized.py": {
        "torch": {
            "EqualizedConv2d_8": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                },
                "self.scale": {
                    "value": "std",
                    "possible_values": [
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ],
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "EqualizedLinear_46": {
                "base_class_0": {
                    "value": "torch.nn.Linear",
                    "possible_values": []
                },
                "self.scale": {
                    "value": "std",
                    "possible_values": [
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ],
                        [
                            "gain / math.sqrt(fan_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_41": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "possible_values": [
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "linear_59": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "possible_values": [
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "data": {
                    "value": "weight.data",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/fused.py": {
        "torch": {
            "FusedUpsample_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "randn_10": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "kernel_size",
                        "possible_values": []
                    },
                    "layout": {
                        "value": "kernel_size",
                        "possible_values": []
                    }
                },
                "zeros_11": {
                    "variable": {
                        "value": "bias",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "out_channel",
                        "possible_values": []
                    }
                },
                "Parameter_16": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ],
                            [
                                "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Parameter_17": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ],
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ]
                        ]
                    }
                },
                "self.pad": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FusedDownsample_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "randn_39": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "out": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "kernel_size",
                        "possible_values": []
                    },
                    "layout": {
                        "value": "kernel_size",
                        "possible_values": []
                    }
                },
                "zeros_40": {
                    "variable": {
                        "value": "bias",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "out_channel",
                        "possible_values": []
                    }
                },
                "Parameter_45": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ],
                            [
                                "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                                "Call"
                            ],
                            [
                                "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                                "Call"
                            ],
                            [
                                "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Parameter_46": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ],
                            [
                                "torch.zeros(out_channel)",
                                "Call"
                            ]
                        ]
                    }
                },
                "self.pad": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_22": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight * self.multiplier",
                    "possible_values": []
                },
                "pad": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "conv_transpose2d_30": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ],
                        [
                            "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight * self.multiplier",
                    "possible_values": []
                },
                "pad": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ],
                        [
                            "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "F.pad(self.weight * self.multiplier, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) / 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/fused_act.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "fused",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "possible_values": []
                }
            },
            "FusedLeakyReLUFunctionBackward_20": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "FusedLeakyReLUFunction_56": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "FusedLeakyReLU_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "2 ** 0.5",
                            "MethodArgument"
                        ],
                        [
                            "2 ** 0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "channel",
                    "possible_values": []
                }
            },
            "leaky_relu_109": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "leaky_relu_116": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/gan_loss.py": {
        "torch": {
            "DiscreteImprovedWGANLoss_145": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.discriminator": {
                    "value": "discriminator",
                    "possible_values": [
                        [
                            "torch.Tensor([])",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.lambda_": {
                    "value": "lambda_",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ],
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GANSampler_179": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "real_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - d_real",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "real_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "fake_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + d_fake",
                    "possible_values": []
                }
            },
            "mean_66": {
                "variable": {
                    "value": "fake_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_81": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "x_real.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "variable": {
                    "value": "grad_outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_interpolates",
                    "possible_values": [
                        [
                            "forward(interpolates)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_151": {
                "variable": {
                    "value": "fake_cumsum",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_152": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "fake.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "fake.size(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake.size(3)",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "(fake_cumsum < alpha) * 1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cumsum_188": {
                "variable": {
                    "value": "fake_cumsum",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_189": {
                "variable": {
                    "value": "rand_mat",
                    "possible_values": []
                },
                "*size": {
                    "value": "fake.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "fake.size(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake.size(3)",
                    "possible_values": []
                }
            },
            "unsqueeze_189": {
                "variable": {
                    "value": "rand_mat",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_191": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "(fake_cumsum < rand_mat) * 1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "gather_193": {
                "variable": {
                    "value": "x_fake",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ind",
                    "possible_values": [
                        [
                            "torch.sum((fake_cumsum < alpha) * 1, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "sample_ind.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum((fake_cumsum < rand_mat) * 1, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "sample_ind.type(torch.cuda.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "dis_interpolates",
                    "possible_values": [
                        [
                            "forward(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "possible_values": [
                        [
                            "alpha * x_real.detach() + (1 - alpha) * x_fake.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "possible_values": [
                        [
                            "torch.ones_like(dis_interpolates).to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_215": {
                "input": {
                    "value": "fake",
                    "possible_values": [
                        [
                            "generator.interpolate(z, alpha)",
                            "Call"
                        ],
                        [
                            "generator(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_216": {
                "input": {
                    "value": "log_softmax_grad",
                    "possible_values": [
                        [
                            "torch.log(fake).grad",
                            "Attribute"
                        ],
                        [
                            "torch.log(fake).grad",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "x_fake",
                    "possible_values": [
                        [
                            "self.sample(fake)",
                            "Call"
                        ],
                        [
                            "torch.gather(fake, dim=1, index=sample_ind)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seg_generator/modules/input.py": {
        "torch": {
            "ConstantInput_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_8": {
                    "variable": {
                        "value": "self.input",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, channel, size, size * aspect_ratio)",
                        "possible_values": []
                    }
                }
            },
            "randn_8": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size * aspect_ratio",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/instance_refiner.py": {
        "torch": {
            "Tensor_12": {
                "variable": {
                    "value": "self.things_idx",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "pseudo_center",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_center",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "pseudo_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_offset",
                    "possible_values": [
                        [
                            "ins_offset * has_thing_in_pxl",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, 2, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "ins_offset * seg_mc.detach()[:, self.things_idx]",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, shape[-2], shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "variable": {
                    "value": "fake_center_count",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_center.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "center_count",
                    "possible_values": []
                },
                "input": {
                    "value": "is_center.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "thing_count",
                    "possible_values": []
                },
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "topk_115": {
                "variable": {
                    "value": "(center_values, center_pos)",
                    "possible_values": []
                },
                "input": {
                    "value": "(ins_center * is_center).view(batch, channels, -1)",
                    "possible_values": []
                },
                "k": {
                    "value": "num",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "closest_center_mc",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": []
                },
                "out": {
                    "value": "num",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "height",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "possible_values": [
                        [
                            "int(self.sigma[self.dim_ind])",
                            "Call"
                        ],
                        [
                            "width + 1 if width % 2 == 0 else width",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_138": {
                "variable": {
                    "value": "sum_pseudo_instance",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_instance",
                    "possible_values": [
                        [
                            "things_seg.view(batch, channels, 1, height, width) * closest_center_mc",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "possible_values": []
                }
            },
            "round_141": {
                "variable": {
                    "value": "pseudo_x",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 * torch.sum(pseudo_instance_x, dim=(3, 4)) / sum_pseudo_instance * height",
                    "possible_values": []
                }
            },
            "round_143": {
                "variable": {
                    "value": "pseudo_y",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 * torch.sum(pseudo_instance_y, dim=(3, 4)) / sum_pseudo_instance * height",
                    "possible_values": []
                }
            },
            "empty_like_151": {
                "variable": {
                    "value": "pseudo_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_offset",
                    "possible_values": [
                        [
                            "ins_offset * has_thing_in_pxl",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, 2, shape[-2], shape[-1])",
                            "Call"
                        ],
                        [
                            "ins_offset * seg_mc.detach()[:, self.things_idx]",
                            "BinOp"
                        ],
                        [
                            "ins_offset.view(shape[0], -1, shape[-2], shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_152": {
                "variable": {
                    "value": "pseudo_offset[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_offset_x",
                    "possible_values": [
                        [
                            "pseudo_instance_offset_x * pseudo_instance",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "pseudo_offset[:, 1]",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_offset_y",
                    "possible_values": [
                        [
                            "pseudo_instance_offset_y * pseudo_instance",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "max_pool2d_160": {
                "variable": {
                    "value": "window_maxima",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_center",
                    "possible_values": [
                        [
                            "ins_center.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "width",
                    "possible_values": [
                        [
                            "int(self.sigma[self.dim_ind])",
                            "Call"
                        ],
                        [
                            "width + 1 if width % 2 == 0 else width",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "width // 2",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "things_seg",
                    "possible_values": [
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ],
                        [
                            "seg_mc.detach()[:, self.things_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "min_130": {
                "input": {
                    "value": "squared_dis",
                    "possible_values": [
                        [
                            "dis_x ** 2 + dis_y ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "mask_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "possible_values": []
                }
            },
            "gather_126": {
                "input": {
                    "value": "fake_x",
                    "possible_values": [
                        [
                            "center_pos % width",
                            "BinOp"
                        ],
                        [
                            "fake_x.expand(height, width, batch, channels, num).permute(2, 3, 4, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "things_id",
                    "possible_values": [
                        [
                            "things_seg.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "things_id.expand(num, batch, 1, height, width).permute(1, 2, 0, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_127": {
                "input": {
                    "value": "fake_y",
                    "possible_values": [
                        [
                            "center_pos / width",
                            "BinOp"
                        ],
                        [
                            "fake_y.expand(height, width, batch, channels, num).permute(2, 3, 4, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "things_id",
                    "possible_values": [
                        [
                            "things_seg.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "things_id.expand(num, batch, 1, height, width).permute(1, 2, 0, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_72": {
                "*size": {
                    "value": "mask_shape",
                    "possible_values": [
                        [
                            "torch.sum(mask.long())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "mask_shape",
                    "possible_values": [
                        [
                            "torch.sum(mask.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "max_113": {
                "input": {
                    "value": "nms_mask.view(batch, channels, -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_66": {
                "input": {
                    "value": "scaled_x_coord[mask]",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "scaled_y_coord[mask]",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "sub_mask.float()",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "pseudo_instance_x",
                    "possible_values": [
                        [
                            "pseudo_instance * scaled_x_coord.view(1, 1, 1, height, width)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "pseudo_instance_y",
                    "possible_values": [
                        [
                            "pseudo_instance * scaled_y_coord.view(1, 1, 1, height, width)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "scaled_x_coord[mask][sub_mask]",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "scaled_y_coord[mask][sub_mask]",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/interpolate.py": {
        "torch": {
            "NearestInterpolate_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale_factor": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BilinearInterpolate_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale_factor": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_12": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                }
            },
            "interpolate_22": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/noise.py": {
        "torch": {
            "NoiseInjection_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_8": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, channel, 1, 1)",
                        "possible_values": []
                    }
                }
            },
            "zeros_8": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/norm.py": {
        "torch": {
            "AdaptiveInstanceNorm_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "InstanceNorm2d_9": {
                    "variable": {
                        "value": "self.norm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "in_channel",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "models/seg_generator/modules/pixel_norm.py": {
        "torch": {
            "PixelNorm_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_11": {
                "input": {
                    "value": "x ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_generator/modules/upfirdn2d.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "possible_values": []
                }
            },
            "UpFirDn2dBackward_19": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "UpFirDn2d_88": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "possible_values": []
                }
            },
            "pad_172": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "possible_values": []
                }
            },
            "flip_186": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_101": {
                "input": {
                    "value": "kernel",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "possible_values": []
                }
            }
        }
    },
    "models/seg_img_model.py": {
        "torch": {
            "SegImgModel_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt_seg": {
                    "value": "opt_seg",
                    "possible_values": []
                },
                "self.opt_img": {
                    "value": "opt_img",
                    "possible_values": []
                },
                "self.is_main": {
                    "value": "is_main",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/loss/criterion.py": {
        "torch": {
            "CriterionDSN_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ignore_index": {
                    "value": "ignore_index",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "CrossEntropyLoss_14": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "ignore_index": {
                        "value": "ignore_index",
                        "possible_values": [
                            [
                                "255",
                                "MethodArgument"
                            ],
                            [
                                "255",
                                "MethodArgument"
                            ],
                            [
                                "255",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "reduction": {
                        "value": "reduction",
                        "possible_values": [
                            [
                                "'mean'",
                                "MethodArgument"
                            ],
                            [
                                "'mean'",
                                "MethodArgument"
                            ],
                            [
                                "'mean'",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "CriterionOhemDSN_33": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ignore_index": {
                    "value": "ignore_index",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "CrossEntropyLoss_41": {
                    "variable": {
                        "value": "self.criterion2",
                        "possible_values": []
                    },
                    "ignore_index": {
                        "value": "ignore_index",
                        "possible_values": [
                            [
                                "255",
                                "MethodArgument"
                            ],
                            [
                                "255",
                                "MethodArgument"
                            ],
                            [
                                "255",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "reduction": {
                        "value": "reduction",
                        "possible_values": [
                            [
                                "'mean'",
                                "MethodArgument"
                            ],
                            [
                                "'mean'",
                                "MethodArgument"
                            ],
                            [
                                "'mean'",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "CriterionOhemDSN2_55": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ignore_index": {
                    "value": "ignore_index",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "CrossEntropyLoss_62": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "ignore_index": {
                        "value": "ignore_index",
                        "possible_values": [
                            [
                                "255",
                                "MethodArgument"
                            ],
                            [
                                "255",
                                "MethodArgument"
                            ],
                            [
                                "255",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "reduction": {
                        "value": "reduction",
                        "possible_values": [
                            [
                                "'mean'",
                                "MethodArgument"
                            ],
                            [
                                "'mean'",
                                "MethodArgument"
                            ],
                            [
                                "'mean'",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "interpolate_46": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_22": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_25": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "input": {
                    "value": "scale_pred",
                    "possible_values": [
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[1], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[1], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/loss/loss.py": {
        "torch": {
            "OhemCrossEntropy2d_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ignore_label": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.factor": {
                    "value": "factor",
                    "possible_values": [
                        [
                            "self.factor",
                            "Attribute"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "CrossEntropyLoss_18": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "ignore_index": {
                        "value": "ignore_label",
                        "possible_values": [
                            [
                                "255",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "reduction": {
                        "value": "reduction",
                        "possible_values": [
                            [
                                "'mean'",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "new_target",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_label.reshape(target.size())",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "input_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "possible_values": [
                        [
                            "nd.zoom(np_predict, (1.0, 1.0, 1.0 / factor, 1.0 / factor), order=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/loss/lovasz_losses.py": {
        "torch": {
            "StableBCELoss_129": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "sort_106": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dot_110": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(grad)",
                    "possible_values": []
                }
            },
            "sort_195": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cross_entropy_224": {
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "target": {
                    "value": "Variable(labels)",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "relu_110": {
                "input": {
                    "value": "errors_sorted",
                    "possible_values": []
                }
            },
            "dot_198": {
                "input": {
                    "value": "errors_sorted",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(lovasz_grad(fg_sorted))",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/dataset/base_dataset.py": {
        "torch": {
            "BaseDataset_8": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.set": {
                    "value": "set_",
                    "possible_values": []
                },
                "self.image_size": {
                    "value": "image_size",
                    "possible_values": []
                },
                "self.mean": {
                    "value": "mean",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/domain_adaptation/eval_UDA.py": {
        "torch": {
            "load_134": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "possible_values": []
                }
            },
            "Upsample_26": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(cfg.TEST.OUTPUT_SIZE_TARGET[1], cfg.TEST.OUTPUT_SIZE_TARGET[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_51": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(label.shape[1], label.shape[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Upsample_106": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(label.shape[1], label.shape[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/domain_adaptation/train_UDA.py": {
        "torch": {
            "SGD_61": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(cfg.TRAIN.LEARNING_RATE)",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optimizer_d_aux",
                    "possible_values": []
                },
                "params": {
                    "value": "d_aux.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE_D",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "optimizer_d_main",
                    "possible_values": []
                },
                "params": {
                    "value": "d_main.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE_D",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "possible_values": []
                }
            },
            "Upsample_73": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size_source[1], input_size_source[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_75": {
                "variable": {
                    "value": "interp_target",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size_target[1], input_size_target[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "output_sm",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "SGD_238": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(cfg.TRAIN.LEARNING_RATE)",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "possible_values": []
                }
            },
            "Upsample_244": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size_source[1], input_size_source[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_246": {
                "variable": {
                    "value": "interp_target",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size_target[1], input_size_target[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "pred_prob_trg_aux",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_trg_aux",
                    "possible_values": [
                        [
                            "interp_target(pred_trg_aux)",
                            "Call"
                        ],
                        [
                            "pred_trg_aux.detach()",
                            "Call"
                        ],
                        [
                            "interp_target(pred_trg_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_282": {
                "variable": {
                    "value": "pred_prob_trg_main",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_trg_main",
                    "possible_values": [
                        [
                            "interp_target(pred_trg_main)",
                            "Call"
                        ],
                        [
                            "pred_trg_main.detach()",
                            "Call"
                        ],
                        [
                            "interp_target(pred_trg_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "np.array(colorize_mask(np.asarray(np.argmax(F.softmax(pred_main).cpu().data[0].numpy().transpose(1, 2, 0), axis=2), dtype=np.uint8)).convert('RGB')).transpose(2, 0, 1)",
                    "possible_values": []
                }
            },
            "from_numpy_213": {
                "ndarray": {
                    "value": "output_ent",
                    "possible_values": [
                        [
                            "np.sum(-np.multiply(output_sm, np.log2(output_sm)), axis=2, keepdims=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_184": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_dir / f'model_{i_iter}.pth'",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "d_aux.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_dir / f'model_{i_iter}_D_aux.pth'",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "d_main.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_dir / f'model_{i_iter}_D_main.pth'",
                    "possible_values": []
                }
            },
            "save_301": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(cfg.TRAIN.SNAPSHOT_DIR, f'model_{i_iter}.pth')",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "input": {
                    "value": "pred_trg_main",
                    "possible_values": [
                        [
                            "interp_target(pred_trg_main)",
                            "Call"
                        ],
                        [
                            "pred_trg_main.detach()",
                            "Call"
                        ],
                        [
                            "interp_target(pred_trg_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_147": {
                "input": {
                    "value": "pred_src_main",
                    "possible_values": [
                        [
                            "interp(pred_src_main)",
                            "Call"
                        ],
                        [
                            "pred_src_main.detach()",
                            "Call"
                        ],
                        [
                            "interp(pred_src_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_162": {
                "input": {
                    "value": "pred_trg_main",
                    "possible_values": [
                        [
                            "interp_target(pred_trg_main)",
                            "Call"
                        ],
                        [
                            "pred_trg_main.detach()",
                            "Call"
                        ],
                        [
                            "interp_target(pred_trg_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_121": {
                "input": {
                    "value": "pred_trg_aux",
                    "possible_values": [
                        [
                            "interp_target(pred_trg_aux)",
                            "Call"
                        ],
                        [
                            "pred_trg_aux.detach()",
                            "Call"
                        ],
                        [
                            "interp_target(pred_trg_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_142": {
                "input": {
                    "value": "pred_src_aux",
                    "possible_values": [
                        [
                            "interp(pred_src_aux)",
                            "Call"
                        ],
                        [
                            "pred_src_aux.detach()",
                            "Call"
                        ],
                        [
                            "interp(pred_src_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_155": {
                "input": {
                    "value": "pred_trg_aux",
                    "possible_values": [
                        [
                            "interp_target(pred_trg_aux)",
                            "Call"
                        ],
                        [
                            "pred_trg_aux.detach()",
                            "Call"
                        ],
                        [
                            "interp_target(pred_trg_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_210": {
                "input": {
                    "value": "pred_main",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "input": {
                    "value": "pred_main",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/model/deeplabv2.py": {
        "torch": {
            "Bottleneck_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_12": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_13": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_18": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": [
                            [
                                "dilation",
                                "Name"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "dilation",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "BatchNorm2d_20": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "Conv2d_23": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_24": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_27": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ClassifierModule_49": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_52": {
                    "variable": {
                        "value": "self.conv2d_list",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "ResNetMulti_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.multi_level": {
                    "value": "multi_level",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_73": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_75": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_78": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_79": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "models/segmentor/models/advent/model/discriminator.py": {
        "torch": {
            "Sequential_5": {
                "*args": {
                    "value": "nn.Conv2d(num_classes, ndf, kernel_size=4, stride=2, padding=1)",
                    "possible_values": []
                }
            },
            "Conv2d_6": {
                "in_channels": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_7": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_9": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_11": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "ndf * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "ndf * 8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/scripts/test.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "CityscapesDataSet(root=cfg.DATA_DIRECTORY_TARGET, list_path=cfg.DATA_LIST_TARGET, set=cfg.TEST.SET_TARGET, info_path=cfg.TEST.INFO_TARGET, crop_size=cfg.TEST.INPUT_SIZE_TARGET, mean=cfg.TEST.IMG_MEAN, labels_size=cfg.TEST.OUTPUT_SIZE_TARGET)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TEST.BATCH_SIZE_TARGET",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.NUM_WORKERS",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/scripts/train.py": {
        "torch": {
            "DataLoader_116": {
                "variable": {
                    "value": "source_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_dataset",
                    "possible_values": [
                        [
                            "GTA5DataSet(root=cfg.DATA_DIRECTORY_SOURCE, list_path=cfg.DATA_LIST_SOURCE, set=cfg.TRAIN.SET_SOURCE, max_iters=cfg.TRAIN.MAX_ITERS * cfg.TRAIN.BATCH_SIZE_SOURCE, crop_size=cfg.TRAIN.INPUT_SIZE_SOURCE, mean=cfg.TRAIN.IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE_SOURCE",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.NUM_WORKERS",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "_init_fn",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "target_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_dataset",
                    "possible_values": [
                        [
                            "CityscapesDataSet(root=cfg.DATA_DIRECTORY_TARGET, list_path=cfg.DATA_LIST_TARGET, set=cfg.TRAIN.SET_TARGET, info_path=cfg.TRAIN.INFO_TARGET, max_iters=cfg.TRAIN.MAX_ITERS * cfg.TRAIN.BATCH_SIZE_TARGET, crop_size=cfg.TRAIN.INPUT_SIZE_TARGET, mean=cfg.TRAIN.IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE_TARGET",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.NUM_WORKERS",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "_init_fn",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_95": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.TRAIN.RESTORE_FROM",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "cfg.TRAIN.RANDOM_SEED",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "cfg.TRAIN.RANDOM_SEED",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/utils/func.py": {
        "torch": {
            "BCEWithLogitsLoss_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mul_52": {
                "input": {
                    "value": "prob",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log2(prob + 1e-30)",
                    "possible_values": []
                }
            },
            "log2_52": {
                "input": {
                    "value": "prob + 1e-30",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/advent/utils/loss.py": {
        "torch": {
            "cross_entropy_26": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "possible_values": [
                        [
                            "predict.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "predict[target_mask.view(n, h, w, 1).repeat(1, 1, 1, c)].view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "torch.mul(v, torch.log2(v + 1e-30))",
                    "possible_values": []
                }
            },
            "mul_38": {
                "input": {
                    "value": "v",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log2(v + 1e-30)",
                    "possible_values": []
                }
            },
            "log2_38": {
                "input": {
                    "value": "v + 1e-30",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/deeplabv3.py": {
        "torch": {
            "Bottleneck_19": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_24": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_26": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "dilation * multi_grid",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "dilation * multi_grid",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_29": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_31": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_32": {
                    "variable": {
                        "value": "self.relu_inplace",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ASPPModule_59": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_68": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, 1))",
                        "possible_values": []
                    }
                },
                "Sequential_71": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(features, inner_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_73": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_75": {
                    "variable": {
                        "value": "self.conv4",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_77": {
                    "variable": {
                        "value": "self.conv5",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_80": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(inner_features * 5, out_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "ResNet_101": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_111": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_114": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_117": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "MaxPool2d_118": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "ReLU_120": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "MaxPool2d_121": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Sequential_127": {
                    "variable": {
                        "value": "self.head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "ASPPModule(2048, distributed=distributed)",
                        "possible_values": []
                    }
                },
                "Sequential_130": {
                    "variable": {
                        "value": "self.dsn",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_68": {
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "inner_features * 5",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Dropout2d_83": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout2d_133": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/pspnet.py": {
        "torch": {
            "Bottleneck_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_26": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_28": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "dilation * multi_grid",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "dilation * multi_grid",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_31": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_33": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_34": {
                    "variable": {
                        "value": "self.relu_inplace",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PSPModule_61": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_70": {
                    "variable": {
                        "value": "self.stages",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[self._make_stage(features, out_features, size, distributed=distributed) for size in sizes]",
                        "possible_values": []
                    }
                },
                "Sequential_71": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(features + len(sizes) * out_features, out_features, kernel_size=3, padding=1, dilation=1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "ResNet_90": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_100": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_103": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_106": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "MaxPool2d_107": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "ReLU_109": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "MaxPool2d_110": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Sequential_116": {
                    "variable": {
                        "value": "self.head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "PSPModule(2048, 512)",
                        "possible_values": []
                    }
                },
                "Sequential_119": {
                    "variable": {
                        "value": "self.dsn",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_79": {
                "variable": {
                    "value": "prior",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "prior",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "features + len(sizes) * out_features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Dropout2d_74": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "priors",
                    "possible_values": [
                        [
                            "[F.interpolate(input=stage(feats), size=(h, w), mode='bilinear', align_corners=True) for stage in self.stages] + [feats]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout2d_122": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_86": {
                "input": {
                    "value": "stage(feats)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/models/segmentor.py": {
        "torch": {
            "Segmentor_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                },
                "self.is_main": {
                    "value": "is_main",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Upsample_21": {
                    "variable": {
                        "value": "self.interpolate",
                        "possible_values": []
                    },
                    "size": {
                        "value": "(height, width)",
                        "possible_values": []
                    },
                    "mode": {
                        "value": "bilinear",
                        "possible_values": []
                    },
                    "align_corners": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Softmax2d_22": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "load_137": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.opt.pretrained_path",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "ent_tgt",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_tgt_final",
                    "possible_values": [
                        [
                            "prob_2_entropy(self.softmax(pred_seg_tgt['sem_seg']))",
                            "Call"
                        ],
                        [
                            "prob_2_entropy(self.softmax(pred_seg_tgt['sem_seg']))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_313": {
                "variable": {
                    "value": "ent_src",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_src_final",
                    "possible_values": [
                        [
                            "prob_2_entropy(self.softmax(pred_seg['sem_seg']))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "expanded_sem",
                    "possible_values": []
                },
                "*size": {
                    "value": "s[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.num_semantics",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s[2]",
                    "possible_values": []
                },
                "layout": {
                    "value": "s[3]",
                    "possible_values": []
                }
            },
            "SGD_158": {
                "variable": {
                    "value": "opt_s",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': params, 'lr': self.opt.lr}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opt.weight_decay",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "opt_d",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, self.netS.parameters())",
                            "Call"
                        ],
                        [
                            "list(self.netD_final.parameters())",
                            "Call"
                        ],
                        [
                            "params + list(self.netD_inter.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.opt.advent_lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "variable": {
                    "value": "src_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "src_sem_seg",
                    "possible_values": [
                        [
                            "data['sem_seg']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(src_sem_seg).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "x_pred_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_seg['sem_seg']",
                    "possible_values": []
                }
            },
            "zeros_like_265": {
                "variable": {
                    "value": "x_pred_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_seg['sem_seg']",
                    "possible_values": []
                }
            },
            "zeros_like_338": {
                "variable": {
                    "value": "x_pred_sem_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_253": {
                "input": {
                    "value": "ent_tgt",
                    "possible_values": [
                        [
                            "torch.sum(ent_tgt_final, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_322": {
                "input": {
                    "value": "ent_src",
                    "possible_values": [
                        [
                            "torch.sum(ent_src_final, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_78": {
                "input": {
                    "value": "reduced_sem",
                    "possible_values": [
                        [
                            "self.reduce_sem(sem_seg)",
                            "Call"
                        ],
                        [
                            "sem_seg[:, self.opt.eval_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/segmentor/utils/encoding.py": {
        "torch": {
            "AllReduce_32": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Reduce_55": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "DataParallelModel_67": {
                "base_class_0": {
                    "value": "torch.nn.DataParallel",
                    "possible_values": []
                }
            },
            "DataParallelCriterion_105": {
                "base_class_0": {
                    "value": "torch.nn.DataParallel",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_42": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_51": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "possible_values": []
                }
            },
            "is_grad_enabled_154": {
                "variable": {
                    "value": "grad_enabled",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_add_60": {
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[inputs[i:i + num_inputs] for i in range(0, len(inputs), num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i[0].get_device())",
                            "Call"
                        ],
                        [
                            "[i.data for i in inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs[i:i + ctx.num_inputs] for i in range(0, len(inputs), ctx.num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_158": {
                "mode": {
                    "value": "grad_enabled",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_164": {
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/segmentor/utils/pyt_utils.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "int(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_90": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_101": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_106": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_71": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/sync_batchnorm/replicate.py": {
        "torch": {
            "DataParallelWithCallback_50": {
                "base_class_0": {
                    "value": "torch.nn.DataParallel",
                    "possible_values": []
                }
            }
        }
    },
    "models/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "possible_values": []
                }
            }
        }
    },
    "tools/cond_sampler.py": {
        "torch": {
            "Tensor_40": {
                "variable": {
                    "value": "sem_cond",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "ins_cond",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "self.tmp_ex_class_surface",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "self.tmp_ex_class_num",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "self.tmp_class_surface",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "self.tmp_class_num",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "self.normalized_weights",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "self.cond_estimator.gmm.weights_",
                    "possible_values": []
                }
            }
        }
    },
    "tools/data_generator.py": {
        "torch": {
            "Tensor_37": {
                "variable": {
                    "value": "data[img]",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "data[seg]",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "z_seg",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim_seg",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tools/engine.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch_size // self.world_size",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "is_train",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_shuffle",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "is_train",
                            "Name"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "datasampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed()",
                    "possible_values": []
                }
            },
            "empty_cache_96": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_27": {
                "device": {
                    "value": "self.local_rank",
                    "possible_values": []
                }
            },
            "DistributedSampler_70": {
                "variable": {
                    "value": "datasampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                }
            }
        }
    },
    "tools/fid/fid_score.py": {
        "torch": {
            "index_select_86": {
                "variable": {
                    "value": "batch",
                    "possible_values": []
                },
                "input": {
                    "value": "ims",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(cur_index)",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_92": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            }
        }
    },
    "tools/fid/inception.py": {
        "torch": {
            "InceptionV3_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.resize_input": {
                    "value": "resize_input",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.normalize_input": {
                    "value": "normalize_input",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_58": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "interpolate_123": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*block0",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*block1",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*block2",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block3",
                    "possible_values": []
                }
            }
        }
    },
    "tools/logger.py": {
        "torch": {
            "zeros_74": {
                "variable": {
                    "value": "background",
                    "possible_values": []
                },
                "*size": {
                    "value": "semantic_mask.size(2)",
                    "possible_values": []
                },
                "out": {
                    "value": "semantic_mask.size(3)",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "variable": {
                    "value": "ins_center",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_center",
                    "possible_values": [
                        [
                            "torch.clamp(ins_center, max=1)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "seg_mc_one_hot",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_mc",
                    "possible_values": [
                        [
                            "torch.zeros_like(seg_mc).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "instance_colors",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seg_mc.shape[0], *seg_mc.shape[2:], 3)",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "seg_mc",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_mc",
                    "possible_values": [
                        [
                            "torch.zeros_like(seg_mc).scatter_(1, index, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_155": {
                "variable": {
                    "value": "sat_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "10 * torch.sqrt(ins_offset[:, 0] ** 2 + ins_offset[:, 1] ** 2)",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "offset_rgb",
                    "possible_values": []
                },
                "data": {
                    "value": "offset_rgba[:, :, :, :3]",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "offset_rgb[bg]",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 0.0]",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "colored_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(ins_density.shape[0], *ins_density.shape[2:])",
                    "possible_values": []
                }
            },
            "max_170": {
                "variable": {
                    "value": "(max_density, idx)",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_density",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "max_max_density",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "mask_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "possible_values": []
                }
            },
            "ones_135": {
                "variable": {
                    "value": "new_colors",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mask_shape, 3)",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[1.0]",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "ins_density",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_155": {
                "input": {
                    "value": "ins_offset[:, 0] ** 2 + ins_offset[:, 1] ** 2",
                    "possible_values": []
                }
            },
            "ones_like_159": {
                "input": {
                    "value": "offset_rgb",
                    "possible_values": [
                        [
                            "torch.tensor(offset_rgba[:, :, :, :3]).float()",
                            "Call"
                        ],
                        [
                            "sat_norm.unsqueeze(-1) * offset_rgb + (1 - sat_norm).unsqueeze(-1) * torch.ones_like(offset_rgb)",
                            "BinOp"
                        ],
                        [
                            "offset_rgb.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_66": {
                "input": {
                    "value": "semantic_mask.view(num, 1, -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "mask_shape",
                    "possible_values": [
                        [
                            "torch.sum(mask.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_154": {
                "input": {
                    "value": "ins_offset[:, 1]",
                    "possible_values": []
                },
                "other": {
                    "value": "ins_offset[:, 0]",
                    "possible_values": []
                }
            },
            "max_171": {
                "input": {
                    "value": "max_density.view(ins_density.shape[0], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "rand_142": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "tools/options.py": {
        "torch": {}
    },
    "tools/utils.py": {
        "torch": {
            "tensor_91": {
                "variable": {
                    "value": "im_spread_rgb",
                    "possible_values": []
                },
                "data": {
                    "value": "im_spread_rgba[:, :, :, :3]",
                    "possible_values": []
                }
            },
            "permute_91": {
                "variable": {
                    "value": "im_spread_rgb",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "bincount_116": {
                "variable": {
                    "value": "confusion_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "possible_values": [
                        [
                            "(sem_index_real[mask] * num_semantics + sem_index_pred[mask]).long().flatten()",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_semantics ** 2",
                    "possible_values": []
                }
            },
            "Tensor_124": {},
            "Tensor_122": {
                "variable": {
                    "value": "tensor_dic[key]",
                    "possible_values": []
                }
            }
        }
    }
}