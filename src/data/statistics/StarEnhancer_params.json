{
    "data/generate.py": {
        "torch": {}
    },
    "dataset/loader.py": {
        "torch": {}
    },
    "fetch_embedding.py": {
        "torch": {
            "DataParallel_25": {
                "variable": {
                    "value": "stylish",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "stylish",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Stylish(args.dims, args.style_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(stylish).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "infer_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "infer_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fivek_style('train', False, args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "os.path.join(args.save_dir, 'stylish.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/basis.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.bias1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_20": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.bias2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_25": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.bias2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.bias1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_57": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.bias2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_62": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.bias2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/enhancer.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_22": {
                "variable": {
                    "value": "self.actv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self._make_layer(ResBlk, self.planes[0], self.layers[0])",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self._make_layer(ResBlk, self.planes[1], self.layers[1], stride=2)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self._make_layer(ResBlk, self.planes[2], self.layers[2], stride=2)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_30": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.planes[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_98": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 0, 1) * (depth - 1)",
                            "BinOp"
                        ],
                        [
                            "x_ind.round_().long().flatten(1).detach()",
                            "Call"
                        ],
                        [
                            "x * (depth - 1)",
                            "BinOp"
                        ],
                        [
                            "x_ind.long().flatten(2).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.curve(x[:, [0], ...], self.interp(fl[i * 5 + 0], self.cd), self.cd) + self.curve(x[:, [1], ...], self.interp(fl[i * 5 + 1], self.cd), self.cd) + self.curve(x[:, [2], ...], self.interp(fl[i * 5 + 2], self.cd), self.cd) + self.interp(fl[i * 5 + 3], H).unsqueeze(1).unsqueeze(3).expand(-1, -1, -1, W) + self.interp(fl[i * 5 + 4], W).unsqueeze(1).unsqueeze(2).expand(-1, -1, H, -1) for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_138": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 0, 1) * (depth - 1)",
                            "BinOp"
                        ],
                        [
                            "x_ind.round_().long().flatten(1).detach()",
                            "Call"
                        ],
                        [
                            "x * (depth - 1)",
                            "BinOp"
                        ],
                        [
                            "x_ind.long().flatten(2).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_149": {
                "variable": {
                    "value": "curves",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder(F.adaptive_avg_pool2d(x, (224, 224)), sa, sb).view(B, 9, self.cl, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.cd, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "curves",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "input": {
                    "value": "param.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "input": {
                    "value": "param.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_96": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x + self.bias1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4[i](x, sa[i], sb[i])",
                            "Call"
                        ],
                        [
                            "self.gap(x).flatten(1)",
                            "Call"
                        ],
                        [
                            "self.fc(x + self.bias2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_106": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x + self.bias1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4[i](x, sa[i], sb[i])",
                            "Call"
                        ],
                        [
                            "self.gap(x).flatten(1)",
                            "Call"
                        ],
                        [
                            "self.fc(x + self.bias2)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_146": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x + self.bias1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4[i](x, sa[i], sb[i])",
                            "Call"
                        ],
                        [
                            "self.gap(x).flatten(1)",
                            "Call"
                        ],
                        [
                            "self.fc(x + self.bias2)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/loss.py": {
        "torch": {
            "t_12": {
                "variable": {
                    "value": "rgb_to_xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_18": {
                "variable": {
                    "value": "fxfyfz_to_lab",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_to_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.412453, 0.212671, 0.019334], [0.35758, 0.71516, 0.119193], [0.180423, 0.072169, 0.950227]]).cuda(non_blocking=True).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb_image / 12.92 * rgb_image.le(0.04045).float() + ((torch.clamp(rgb_image, min=0.0001) + 0.055) / 1.055) ** 2.4 * rgb_image.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "img.permute(1, 0, 2, 3).contiguous().view(3, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(rgb_to_xyz, img)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]).cuda(non_blocking=True).view(3, 1))",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(fxfyfz_to_lab, img) + torch.FloatTensor([-16.0, 0.0, 0.0]).cuda(non_blocking=True).view(3, 1)",
                            "BinOp"
                        ],
                        [
                            "img.view(3, rgb_image.size(0), rgb_image.size(2), rgb_image.size(3)).permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_29": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb_image / 12.92 * rgb_image.le(0.04045).float() + ((torch.clamp(rgb_image, min=0.0001) + 0.055) / 1.055) ** 2.4 * rgb_image.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "img.permute(1, 0, 2, 3).contiguous().view(3, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(rgb_to_xyz, img)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]).cuda(non_blocking=True).view(3, 1))",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(fxfyfz_to_lab, img) + torch.FloatTensor([-16.0, 0.0, 0.0]).cuda(non_blocking=True).view(3, 1)",
                            "BinOp"
                        ],
                        [
                            "img.view(3, rgb_image.size(0), rgb_image.size(2), rgb_image.size(3)).permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]).cuda(non_blocking=True).view(3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_52": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_lab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rgb2lab(out_image)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_lab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rgb2lab(gt_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_34": {
                "input": {
                    "value": "fxfyfz_to_lab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.0, 500.0, 0.0], [116.0, -500.0, 200.0], [0.0, 0.0, -200.0]]).cuda(non_blocking=True).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb_image / 12.92 * rgb_image.le(0.04045).float() + ((torch.clamp(rgb_image, min=0.0001) + 0.055) / 1.055) ** 2.4 * rgb_image.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "img.permute(1, 0, 2, 3).contiguous().view(3, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(rgb_to_xyz, img)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]).cuda(non_blocking=True).view(3, 1))",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(fxfyfz_to_lab, img) + torch.FloatTensor([-16.0, 0.0, 0.0]).cuda(non_blocking=True).view(3, 1)",
                            "BinOp"
                        ],
                        [
                            "img.view(3, rgb_image.size(0), rgb_image.size(2), rgb_image.size(3)).permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_33": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb_image / 12.92 * rgb_image.le(0.04045).float() + ((torch.clamp(rgb_image, min=0.0001) + 0.055) / 1.055) ** 2.4 * rgb_image.gt(0.04045).float()",
                            "BinOp"
                        ],
                        [
                            "img.permute(1, 0, 2, 3).contiguous().view(3, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(rgb_to_xyz, img)",
                            "Call"
                        ],
                        [
                            "torch.mul(img, torch.FloatTensor([1 / 0.950456, 1.0, 1 / 1.088754]).cuda(non_blocking=True).view(3, 1))",
                            "Call"
                        ],
                        [
                            "(img / (3.0 * epsilon ** 2) + 4.0 / 29.0) * img.le(epsilon ** 3).float() + torch.clamp(img, min=0.0001) ** (1.0 / 3.0) * img.gt(epsilon ** 3).float()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(fxfyfz_to_lab, img) + torch.FloatTensor([-16.0, 0.0, 0.0]).cuda(non_blocking=True).view(3, 1)",
                            "BinOp"
                        ],
                        [
                            "img.view(3, rgb_image.size(0), rgb_image.size(2), rgb_image.size(3)).permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "img.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_25": {
                "input": {
                    "value": "rgb_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/mapping.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.mlp_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.mlp_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Linear(512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_46": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp_out[i](x).view(x.size(0), -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/stylish.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_21": {
                "variable": {
                    "value": "self.actv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_28": {
                "variable": {
                    "value": "self.gmp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.planes[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x + self.bias1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "(max_x + avg_x).flatten(1)",
                            "Call"
                        ],
                        [
                            "self.fc(x + self.bias2)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder(F.adaptive_avg_pool2d(x, (224, 224)))",
                            "Call"
                        ],
                        [
                            "self.proxy(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim, cN)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_87": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_100": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x + self.bias1)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "(max_x + avg_x).flatten(1)",
                            "Call"
                        ],
                        [
                            "self.fc(x + self.bias2)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder(F.adaptive_avg_pool2d(x, (224, 224)))",
                            "Call"
                        ],
                        [
                            "self.proxy(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_124": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fivek_enhance('test', False, args)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "os.path.join(args.save_dir, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_65": {
                "variable": {
                    "value": "rand_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[test_bs, 3, test_h, test_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trace_67": {
                "variable": {
                    "value": "enhancer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enhancer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SlimEnhancer().cuda()",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(enhancer, [rand_img, style, style])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_91": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enhancer(source_img, style_A, style_B)",
                            "Call"
                        ],
                        [
                            "(output.clamp_(0, 1) * 255).round_() / 255.0",
                            "BinOp"
                        ],
                        [
                            "enhancer(rand_img, style, style)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_91": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "[1, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log10_92": {
                "input": {
                    "value": "1 / mse_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_96": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enhancer(source_img, style_A, style_B)",
                            "Call"
                        ],
                        [
                            "(output.clamp_(0, 1) * 255).round_() / 255.0",
                            "BinOp"
                        ],
                        [
                            "enhancer(rand_img, style, style)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(int(H / down_ratio), int(W / down_ratio))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_97": {
                "input": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(int(H / down_ratio), int(W / down_ratio))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train_enhancer.py": {
        "torch": {
            "DataLoader_93": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fivek_enhance('train', True, args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.t_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fivek_enhance('valid', False, args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.v_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_76": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enhancer(source_img, style_A, style_B)",
                            "Call"
                        ],
                        [
                            "enhancer(source_img, style_A, style_B).clamp_(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_img.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target_img.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': enhancer.parameters(), 'lr': args.lr}, {'params': mapping.parameters(), 'lr': args.lr}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_111": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam([{'params': enhancer.parameters(), 'lr': args.lr}, {'params': mapping.parameters(), 'lr': args.lr}])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_77": {
                "input": {
                    "value": "1 / mse_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "{'state_dict': mapping.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'mapping.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "{'state_dict': enhancer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'enhancer.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_stylish.py": {
        "torch": {
            "DataParallel_88": {
                "variable": {
                    "value": "stylish",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "stylish",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Stylish(args.dims, args.style_num)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(stylish).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fivek_style('train', True, args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.t_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fivek_style('valid', False, args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.v_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.style_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_54": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simInd * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "style_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "style_id.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': stylish.module.encoder.parameters(), 'lr': args.lr}, {'params': stylish.module.proxy.parameters(), 'lr': args.lr * 100}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam([{'params': stylish.module.encoder.parameters(), 'lr': args.lr}, {'params': stylish.module.proxy.parameters(), 'lr': args.lr * 100}])",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "{'state_dict': stylish.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'stylish.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_parallel.py": {
        "torch": {}
    }
}