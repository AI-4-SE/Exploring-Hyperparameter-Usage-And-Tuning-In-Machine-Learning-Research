{
    "exp_helpers.py": {
        "tensorflow": {
            "truncated_normal_12": {
                "variable": {
                    "value": "initial",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "matrix_shapes",
                            "Name"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "initial",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "matrix_shapes",
                            "Name"
                        ]
                    ]
                }
            },
            "InteractiveSession_284": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_288": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "possible_values": []
                }
            },
            "placeholder_289": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "x_image",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 784])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "h_conv1",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1) + b_conv1",
                    "possible_values": []
                }
            },
            "relu_302": {
                "variable": {
                    "value": "h_conv2",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "h_pool2_flat",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "possible_values": []
                }
            },
            "placeholder_310": {
                "variable": {
                    "value": "keep_prob",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "possible_values": []
                }
            },
            "softmax_311": {
                "variable": {
                    "value": "y_conv",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "possible_values": []
                }
            },
            "argmax_313": {
                "variable": {
                    "value": "predicted",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "argmax_314": {
                "variable": {
                    "value": "actual",
                    "possible_values": []
                },
                "input": {
                    "value": "y_",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "equal_315": {
                "variable": {
                    "value": "correct_prediction",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted",
                    "possible_values": [
                        [
                            "tf.argmax(y_conv, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "actual",
                    "possible_values": [
                        [
                            "tf.argmax(y_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_317": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "possible_values": []
                }
            },
            "Saver_322": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_323": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.getcwd()",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "initial_value": {
                    "value": "initial",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "initial",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_20": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 784])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "max_pool_23": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 784])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "cast_317": {
                "x": {
                    "value": "correct_prediction",
                    "possible_values": [
                        [
                            "tf.equal(predicted, actual)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "possible_values": []
                }
            },
            "initialize_all_variables_318": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "a": {
                    "value": "h_pool2_flat",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, 10])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}