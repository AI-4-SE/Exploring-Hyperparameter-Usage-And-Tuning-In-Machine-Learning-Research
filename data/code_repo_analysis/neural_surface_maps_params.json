{
    "datasets/collection_map.py": {
        "torch": {}
    },
    "datasets/initialization.py": {
        "torch": {}
    },
    "datasets/inter_map.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "self.pool_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_g['grid'], sample_g['samples_2d']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mixin.py": {
        "torch": {
            "randperm_44": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_17": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "svd_59": {
                "variable": {
                    "value": "(u, e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lands_g.transpose(0, 1).matmul(lands_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/parametrization.py": {
        "torch": {}
    },
    "datasets/surface_map.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid, samples_2d[idx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, samples_3d[idx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[normals, self.sample['normals'][idx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss/analytical_mixin.py": {
        "torch": {
            "max_44": {
                "variable": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E * G - F.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "loss/circle_boundary.py": {
        "torch": {
            "tensor_11": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "loss/collection.py": {
        "torch": {
            "tensor_16": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_17": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss/inter_map.py": {
        "torch": {
            "tensor_17": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_18": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss/mixin/differential.py": {
        "torch": {
            "sign_11": {
                "variable": {
                    "value": "J_det_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "J_det",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J.det()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_12": {
                "variable": {
                    "value": "pp_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-J_det_sign * torch.exp(-J_det)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_12": {
                "input": {
                    "value": "-J_det",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "loss/parametrization.py": {
        "torch": {
            "tensor_17": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_18": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "loss/sdf.py": {
        "torch": {
            "max_25": {
                "variable": {
                    "value": "sdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm - self.one",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "loss/ssd.py": {
        "torch": {}
    },
    "mains/collection_map_train.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.net_f.parameters()) + list(self.net_q.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_48": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(list(self.net_f.parameters()) + list(self.net_q.parameters()), lr=LR)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "restart",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.config.dataset.num_epochs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mains/initialization_map_train.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_34": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(self.net.parameters(), lr=LR, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "30000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mains/intersurface_map_train.py": {
        "torch": {
            "DataLoader_36": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_46": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(self.net.parameters(), lr=LR)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "restart",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.config.dataset.num_epochs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mains/parametrization_train.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_39": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_41": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(self.net.parameters(), lr=LR)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "restart",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.config.dataset.num_epochs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mains/surface_map_train.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_39": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(self.net.parameters(), lr=LR, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "restart",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.config.dataset.num_epochs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/inter_map.py": {
        "torch": {}
    },
    "models/surface_map.py": {
        "torch": {}
    },
    "preprocessing/convert_sample.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "filtered_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv_grid_large[uv_grid_small.shape[0]:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "filtered_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_large[points_small.shape[0]:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "filtered_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normals_large[normals_small.shape[0]:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv_grid_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_small)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_small)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "faces_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_small)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "visual_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv_grid_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_large)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "visual_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "faces_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_large)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "sample[faces]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "faces_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_small)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "sample[grid_normals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "normals_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_small)",
                            "Call"
                        ],
                        [
                            "mesh.vertex_normals",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "sample[visual_faces]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "faces_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_mesh_from_obj(obj_file_large)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "sample[boundary_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "unique_vertices_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(vertices_index.reshape(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_85": {
                "obj": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "show_collection_map.py": {
        "torch": {
            "svd_21": {
                "variable": {
                    "value": "(u, e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lands_g.transpose(0, 1).matmul(lands_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "data_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SURFACE_PATH_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "load_46": {
                "variable": {
                    "value": "data_f",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SURFACE_PATH_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "load_50": {
                "variable": {
                    "value": "data_q",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SURFACE_PATH_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "set_grad_enabled_33": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "CHECKPOINT_PATH_F",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "CHECKPOINT_PATH_Q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "show_intersurface_map.py": {
        "torch": {
            "svd_23": {
                "variable": {
                    "value": "(u, e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centered_g.transpose(0, 1).matmul(centered_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "data_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SURFACE_PATH_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "data_f",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SURFACE_PATH_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "set_grad_enabled_35": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "show_parametrization_map.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_24": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SURFACE_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "set_grad_enabled_17": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "show_surface_map.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/SET/HERE/YOUR/PATH/TO/PTH'",
                            "str"
                        ]
                    ]
                }
            },
            "set_grad_enabled_13": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_collection_map.py": {
        "torch": {
            "load_22": {
                "f": {
                    "value": "inits/softplus_128_identity.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_23": {
                "f": {
                    "value": "inits/softplus_128_identity.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train_intersurface_map.py": {
        "torch": {
            "load_22": {
                "f": {
                    "value": "inits/softplus_128_identity.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train_parametrization_map.py": {
        "torch": {
            "load_22": {
                "f": {
                    "value": "inits/softplus_128_identity.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/differential.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "J_f_uv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_32": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_45": {
                "variable": {
                    "value": "cross_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "jacobian[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_50": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(jacobian[..., 0], jacobian[..., 1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacobian.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "jacobian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gradient(out=out, wrt=wrt)",
                            "Call"
                        ],
                        [
                            "self.gradient(out=out, wrt=wrt)",
                            "Call"
                        ],
                        [
                            "self.compute_normals(jacobian=jacobian, out=out, wrt=wrt, return_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_21": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_p.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "wrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrt",
                            "Method Argument"
                        ],
                        [
                            "wrt",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_p.size(), dtype=torch.float32).to(out.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out.size(), dtype=torch.float32).to(out.device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_24": {
                "outputs": {
                    "value": "out_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[..., dim].flatten()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "wrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrt",
                            "Method Argument"
                        ],
                        [
                            "wrt",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_p.size(), dtype=torch.float32).to(out.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out.size(), dtype=torch.float32).to(out.device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model.py": {
        "torch": {
            "Sequential_50": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers",
                            "variable"
                        ],
                        [
                            "in_feat",
                            "Method Argument"
                        ],
                        [
                            "in_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers",
                            "variable"
                        ],
                        [
                            "out_feat",
                            "Method Argument"
                        ],
                        [
                            "out_feat",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/save.py": {
        "torch": {
            "save_16": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}.pth'.format(folder, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_36": {
                "obj": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'weights': model_weights, **data}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/flat_model.pth'.format(folder)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}