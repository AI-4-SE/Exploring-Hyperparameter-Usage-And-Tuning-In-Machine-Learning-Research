{
    "flaml/automl.py": {
        "sklearn": {
            "AutoML_469": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                }
            },
            "GroupKFold_1406": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        "int(y_train_all.size / period - 1)",
                        "n_splits or self._settings.get('n_splits')",
                        "n_splits or self._settings.get('n_splits')"
                    ]
                }
            },
            "RepeatedStratifiedKFold_1418": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        "int(y_train_all.size / period - 1)",
                        "n_splits or self._settings.get('n_splits')",
                        "n_splits or self._settings.get('n_splits')"
                    ]
                },
                "n_repeats": {
                    "value": "1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "GroupShuffleSplit_1283": {
                "variable": {
                    "value": "gss",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        "split_ratio or self._settings.get('split_ratio')",
                        "split_ratio or self._settings.get('split_ratio')"
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "TimeSeriesSplit_1434": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        "int(y_train_all.size / period - 1)",
                        "n_splits or self._settings.get('n_splits')",
                        "n_splits or self._settings.get('n_splits')"
                    ]
                },
                "test_size": {
                    "value": "period",
                    "possible_values": [
                        "self._state.fit_kwargs['period']",
                        "self._state.fit_kwargs['period']"
                    ]
                }
            },
            "TimeSeriesSplit_1436": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        "int(y_train_all.size / period - 1)",
                        "n_splits or self._settings.get('n_splits')",
                        "n_splits or self._settings.get('n_splits')"
                    ]
                }
            },
            "RepeatedKFold_1439": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        "int(y_train_all.size / period - 1)",
                        "n_splits or self._settings.get('n_splits')",
                        "n_splits or self._settings.get('n_splits')"
                    ]
                },
                "n_repeats": {
                    "value": "1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/data.py": {
        "sklearn": {
            "LabelEncoder_380": {
                "variable": {
                    "value": "self.label_transformer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ColumnTransformer_357": {
                "variable": {
                    "value": "self.transformer",
                    "possible_values": []
                },
                "transformers": {
                    "value": "[('continuous', SimpleImputer(missing_values=np.nan, strategy='median'), X_num.columns)]",
                    "possible_values": []
                }
            },
            "SimpleImputer_361": {
                "missing_values": {
                    "value": "np.nan",
                    "possible_values": []
                },
                "strategy": {
                    "value": "median",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/default/greedy.py": {
        "sklearn": {
            "RobustScaler_33": {
                "variable": {
                    "value": "scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/default/portfolio.py": {
        "sklearn": {
            "RobustScaler_24": {
                "variable": {
                    "value": "scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/default/suggest.py": {
        "sklearn": {
            "NearestNeighbors_86": {
                "variable": {
                    "value": "nn",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/ml.py": {
        "sklearn": {}
    },
    "flaml/model.py": {
        "sklearn": {
            "DummyClassifier_196": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DummyRegressor_198": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/onlineml/trial.py": {
        "sklearn": {}
    },
    "test/automl/test_classification.py": {
        "sklearn": {}
    },
    "test/automl/test_constraints.py": {
        "sklearn": {}
    },
    "test/automl/test_custom_hp.py": {
        "sklearn": {}
    },
    "test/automl/test_multiclass.py": {
        "sklearn": {}
    },
    "test/automl/test_python_log.py": {
        "sklearn": {}
    },
    "test/automl/test_regression.py": {
        "sklearn": {
            "MultiOutputRegressor_228": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "estimator": {
                    "value": "AutoML(task='regression', time_budget=1)",
                    "possible_values": []
                }
            },
            "RegressorChain_235": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "AutoML(task='regression', time_budget=1)",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_score.py": {
        "sklearn": {}
    },
    "test/automl/test_split.py": {
        "sklearn": {
            "TestKFold_136": {
                "base_class_0": {
                    "value": "sklearn.model_selection.KFold",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_training_log.py": {
        "sklearn": {}
    },
    "test/automl/test_warmstart.py": {
        "sklearn": {}
    },
    "test/automl/test_xgboost2d.py": {
        "sklearn": {}
    },
    "test/automl/test_xgboost2d_sample_size.py": {
        "sklearn": {}
    },
    "test/default/test_defaults.py": {
        "sklearn": {}
    },
    "test/object_store.py": {
        "sklearn": {}
    },
    "test/rank.py": {
        "sklearn": {}
    },
    "test/ray/distribute_automl.py": {
        "sklearn": {}
    },
    "test/ray/distribute_tune.py": {
        "sklearn": {}
    },
    "test/reg.py": {
        "sklearn": {}
    },
    "test/test_autovw.py": {
        "sklearn": {}
    },
    "test/test_conda_distribution.py": {
        "sklearn": {}
    },
    "test/test_gpu.py": {
        "sklearn": {}
    },
    "test/test_model.py": {
        "sklearn": {}
    },
    "test/tune/test_tune.py": {
        "sklearn": {
            "PCA_36": {
                "variable": {
                    "value": "pca",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "possible_values": [
                        "config['n_components']"
                    ]
                }
            }
        }
    },
    "test/tune_example.py": {
        "sklearn": {}
    },
    "flaml/nlp/huggingface/data_collator.py": {
        "torch": {}
    },
    "test/nni/mnist.py": {
        "torch": {
            "device_99": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1000",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "test/tune/test_pytorch_cifar10.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 ** config['batch_size'])",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "valloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_subset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 ** config['batch_size'])",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        null
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}