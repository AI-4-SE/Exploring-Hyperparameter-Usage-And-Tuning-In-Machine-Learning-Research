{
    "models/wide_resnet_cifar.py": {
        "torch": {
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "Method Argument"
                        ],
                        [
                            "ni",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "Method Argument"
                        ],
                        [
                            "ni",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(g2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_73": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn(g2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(o, 8, 1, 0)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(o)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "Method Argument"
                        ],
                        [
                            "ni",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/wide_resnet_cifar_attention.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "Method Argument"
                        ],
                        [
                            "ni",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "Method Argument"
                        ],
                        [
                            "ni",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_52": {
                "variable": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.conv0(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "group2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_g2(self.group_2(group1))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_181": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn_g2(self.group_2(group1)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "Method Argument"
                        ],
                        [
                            "ni",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no",
                            "Method Argument"
                        ],
                        [
                            "no",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout2d_60": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(y), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(o2, self.dropout, training=self.training, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "modules/attention.py": {
        "torch": {
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nheads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x).view(b, self.nheads, w * h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "variable": {
                    "value": "self.att_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.conv(x).view(b, self.nheads, w * h), 2).view(b, self.nheads, h, w)",
                            "Call"
                        ],
                        [
                            "self.att_head(x).view(b, self.nheads, 1, h * w)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputs, 1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs, dim=2)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_200": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputs, 1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs, dim=2)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ngates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ngates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.pre_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.pre_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.tanh(scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "input": {
                    "value": "self.bn(self.gates(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "input": {
                    "value": "self.bn(self.gates(F.relu(self.pre_bn(self.pre_gates(x)))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "1 - np.eye(self.nheads, self.nheads).reshape(1, self.nheads, self.nheads)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_82": {
                "input": {
                    "value": "mask2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.att_mask.view(self.att_mask.size(0), self.nheads, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mask2loss.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(gates, 1).view(gates.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(gates).view(gates.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(gates, 1).view(gates.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(gates).view(gates.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_183": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(x).view(b, self.nheads, 1, h * w)",
                            "Call"
                        ],
                        [
                            "(scores * att_mask).sum(3)",
                            "Call"
                        ],
                        [
                            "F.softmax(F.tanh(scores), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_51": {
                "input": {
                    "value": "self.pre_bn(self.pre_gates(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_cifar.py": {
        "torch": {
            "DataParallel_94": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WideResNet(opt.depth, opt.width, num_classes).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, list(range(opt.ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(opt.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "dataset": {
                    "value": "create_dataset(opt, train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train",
                            "Call"
                        ],
                        [
                            "train",
                            "Method Argument"
                        ],
                        [
                            "train",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opt.nthread",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_98": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "outputs.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "Variable(labels, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "Variable(labels).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_155": {
                "obj": {
                    "value": "dict(state_dict=model.state_dict(), optimizer=optimizer.state_dict(), training_time=state['training_time'], epoch=epoch + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join(state['exp_dir'], 'model.pt7'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_143": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "Variable(labels, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "Variable(labels).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_cifar_attention.py": {
        "torch": {}
    }
}