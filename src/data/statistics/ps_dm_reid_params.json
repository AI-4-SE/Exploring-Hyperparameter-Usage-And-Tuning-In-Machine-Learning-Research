{
    "datasets/psdb.py": {
        "sklearn": {
            "precision_recall_curve_239": {
                "variable": {
                    "value": "(precision, recall, __)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true[inds]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_score)",
                            "Call"
                        ],
                        [
                            "y_score[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_238": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true[inds]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_score)",
                            "Call"
                        ],
                        [
                            "y_score[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_357": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true[inds]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_score)",
                            "Call"
                        ],
                        [
                            "y_score[inds]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "sklearn": {},
        "torch": {
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_120": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(global_feat, global_feat.shape[2:])",
                            "Call"
                        ],
                        [
                            "global_feat.view(global_feat.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "global_feat.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.res_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(1024, 512, stride=1, downsample=nn.Sequential(nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False), nn.BatchNorm2d(2048)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_171": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.global_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveMaxPool2d_180": {
                "variable": {
                    "value": "self.part_maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_258": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_283": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_293": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(12, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_planes, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_184": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_110": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks_my.py": {
        "sklearn": {},
        "torch": {
            "AdaptiveAvgPool2d_47": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_125": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(global_feat, global_feat.shape[2:])",
                            "Call"
                        ],
                        [
                            "global_feat.view(global_feat.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "global_feat.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.res_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(1024, 512, stride=1, downsample=nn.Sequential(nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False), nn.BatchNorm2d(2048)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.res_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(1024, 512, stride=1, downsample=nn.Sequential(nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False), nn.BatchNorm2d(2048)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 1024, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_238": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.global_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.smooth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 1024, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_254": {
                "variable": {
                    "value": "self.part_maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 128, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_296": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.res_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(1024, 512, stride=1, downsample=nn.Sequential(nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False), nn.BatchNorm2d(2048)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 128, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_321": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.global_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveMaxPool2d_331": {
                "variable": {
                    "value": "self.part_maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_338": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_361": {
                "variable": {
                    "value": "triplet_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.part_maxpool(x).view(len(x), -1)",
                            "Call"
                        ],
                        [
                            "self.reduction(triplet_feature)",
                            "Call"
                        ],
                        [
                            "F.normalize(triplet_feature)",
                            "Call"
                        ],
                        [
                            "F.relu(triplet_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_362": {
                "variable": {
                    "value": "triplet_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.part_maxpool(x).view(len(x), -1)",
                            "Call"
                        ],
                        [
                            "self.reduction(triplet_feature)",
                            "Call"
                        ],
                        [
                            "F.normalize(triplet_feature)",
                            "Call"
                        ],
                        [
                            "F.relu(triplet_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_438": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.res_part2(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.batch_crop(x)",
                            "Call"
                        ],
                        [
                            "x + orignal",
                            "BinOp"
                        ],
                        [
                            "self.smooth(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.res_part2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_crop(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x).squeeze()",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_468": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_478": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_479": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_504": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_514": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(12, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_planes, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_445": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.res_part2(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.batch_crop(x)",
                            "Call"
                        ],
                        [
                            "x + orignal",
                            "BinOp"
                        ],
                        [
                            "self.smooth(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.res_part2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_crop(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x).squeeze()",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_234": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_258": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_316": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_334": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_335": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "tensors": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_414": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_423": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_425": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_447": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.res_part2(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.batch_crop(x)",
                            "Call"
                        ],
                        [
                            "x + orignal",
                            "BinOp"
                        ],
                        [
                            "self.smooth(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.res_part(x)",
                            "Call"
                        ],
                        [
                            "self.res_part2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_crop(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x).squeeze()",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_115": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_426": {
                "mean": {
                    "value": "self.classifier.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_226": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_308": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/data_loader.py": {
        "torch": {}
    },
    "datasets/process_ps_data.py": {
        "torch": {
            "stack_181": {
                "variable": {
                    "value": "pedes_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pedes_batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pedes_batch_x)",
                            "Call"
                        ],
                        [
                            "torch.stack(pedes_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "pedes_batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pedes_batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(pedes_batch_y, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "pedes_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pedes_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainTransform()(pedes_x_Image)",
                            "Call"
                        ],
                        [
                            "TrainTransform()(pedes_Image)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_214": {
                "data": {
                    "value": "pedes_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_255": {
                "tensors": {
                    "value": "pedes_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainTransform()(pedes_Image, type='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_282": {
                "tensors": {
                    "value": "img_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainTransform()(img_Image, type='test')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/samplers.py": {
        "torch": {
            "randperm_23": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_identities",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/samplers_ps.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_16": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gamma_top1.py": {
        "torch": {}
    },
    "main_reid.py": {
        "torch": {
            "is_available_38": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageData(dataset.train, TrainTransform(opt.datatype))",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, opt.num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "queryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageData(dataset.query, TestTransform(opt.datatype))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "galleryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageData(dataset.gallery, TestTransform(opt.datatype))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "queryFliploader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageData(dataset.query, TestTransform(opt.datatype, True))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "galleryFliploader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageData(dataset.gallery, TestTransform(opt.datatype, True))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_121": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNetBuilder(dataset.num_train_pids, 1, True)",
                            "Call"
                        ],
                        [
                            "ResNetBuilder(None, 1, True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "BFE(5532, 1.0, 0.33)",
                            "Call"
                        ],
                        [
                            "BFE(dataset.num_train_pids, 0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "IDE(dataset.num_train_pids)",
                            "Call"
                        ],
                        [
                            "Resnet(dataset.num_train_pids)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_optim_policy()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_optim_policy()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_49": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "opt.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_51": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_52": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_58": {
                "variable": {
                    "value": "self.sigmoid_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv_after_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_60": {
                "variable": {
                    "value": "self.sigmoid_spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_78": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(torch.zeros(1, 3, 256, 128))",
                            "Call"
                        ],
                        [
                            "avg + mx",
                            "BinOp"
                        ],
                        [
                            "self.sigmoid_channel(x)",
                            "Call"
                        ],
                        [
                            "module_input * x",
                            "BinOp"
                        ],
                        [
                            "torch.cat((avg, mx), 1)",
                            "Call"
                        ],
                        [
                            "self.conv_after_concat(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid_spatial(x)",
                            "Call"
                        ],
                        [
                            "module_input * x",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_79": {
                "variable": {
                    "value": "(mx, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(torch.zeros(1, 3, 256, 128))",
                            "Call"
                        ],
                        [
                            "avg + mx",
                            "BinOp"
                        ],
                        [
                            "self.sigmoid_channel(x)",
                            "Call"
                        ],
                        [
                            "module_input * x",
                            "BinOp"
                        ],
                        [
                            "torch.cat((avg, mx), 1)",
                            "Call"
                        ],
                        [
                            "self.conv_after_concat(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid_spatial(x)",
                            "Call"
                        ],
                        [
                            "module_input * x",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(avg, mx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "my_main_reid.py": {
        "torch": {
            "is_available_38": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet_openReid()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_optim_policy()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_optim_policy()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_48": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_67": {
                "f": {
                    "value": "opt.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "my_test.py": {
        "torch": {
            "Tensor_40": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "roi_data_layer/roibatchLoader.py": {
        "torch": {
            "Tensor_38": {
                "variable": {
                    "value": "self.ratio_list_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_191": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_keep == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "permute_207": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_92": {
                "input": {
                    "value": "gt_boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "gt_boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "gt_boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "gt_boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/evaluator.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "q_pids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_64": {
                "variable": {
                    "value": "q_camids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "g_pids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "g_camids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_150": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(re_ranking_func(q_g_dist, q_q_dist, g_g_dist))",
                            "Call"
                        ],
                        [
                            "q_g_dist",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_163": {
                "variable": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_169": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "distmat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_90": {
                "input": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_91": {
                "input": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_95": {
                "input": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_96": {
                "input": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(qf, 0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_99": {
                "input": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_99": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_100": {
                "input": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(gf, 0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_100": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainers/trainer.py": {
        "torch": {}
    },
    "utils/DistWeightDevianceLoss.py": {
        "torch": {
            "matmul_12": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_21": {
                "variable": {
                    "value": "mean_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_23": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.pow(diff, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_45": {
                "variable": {
                    "value": "pos_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.expand(n, n).eq(targets.expand(n, n).t())",
                            "Call"
                        ],
                        [
                            "pos_mask - eyes_.eq(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "masked_select_46": {
                "variable": {
                    "value": "neg_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eyes_.eq(eyes_) - pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_89": {
                "variable": {
                    "value": "neg_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(sim_mat, neg_mask)",
                            "Call"
                        ],
                        [
                            "neg_sim.resize(len(neg_sim) // num_neg_instances, num_neg_instances)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_90": {
                "variable": {
                    "value": "pos_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(sim_mat, pos_mask)",
                            "Call"
                        ],
                        [
                            "pos_sim.resize(len(pos_sim) // (num_instances - 1), num_instances - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_23": {
                "input": {
                    "value": "torch.pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(neg_pair - neg_mean, 2) / (2 * torch.pow(neg_std, 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_66": {
                "variable": {
                    "value": "neg_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.pow(neg_pair - neg_mean, 2) / (2 * torch.pow(neg_std, 2)))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_instances - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_82": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(1 + torch.exp(-2 * (pos_pair - self.margin)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_101": {
                "*size": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_103": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "pow_23": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data - mean_value",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "torch.cat(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_61": {
                "input": {
                    "value": "pos_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(pos_pair)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sort_62": {
                "input": {
                    "value": "neg_sim[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_76": {
                "input": {
                    "value": "neg_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(neg_sim[i])[0]",
                            "Subscript"
                        ],
                        [
                            "neg_pair[neg_index]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(neg_pair)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_82": {
                "input": {
                    "value": "1 + torch.exp(-2 * (pos_pair - self.margin))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_83": {
                "input": {
                    "value": "torch.log(1 + torch.exp(50 * (neg_pair - self.margin)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "[torch.unsqueeze(l, 0) for l in loss]",
                            "ListComp"
                        ],
                        [
                            "torch.sum(torch.cat(loss)) / n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_39": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_65": {
                "input": {
                    "value": "neg_std",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_83": {
                "input": {
                    "value": "1 + torch.exp(50 * (neg_pair - self.margin))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "-2 * (pos_pair - self.margin)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_83": {
                "input": {
                    "value": "50 * (neg_pair - self.margin)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/LiftedStructure.py": {
        "torch": {
            "matmul_13": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_17": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_61": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*[labels.unsqueeze(dim).expand_as(d) for dim in [0, 1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mul_62": {
                "variable": {
                    "value": "neg_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(margin - d).exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "neg_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_73": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "sum_63": {
                "input": {
                    "value": "F.relu(pos.triu(1) * ((neg_i + neg_i.t()).log() + d)).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "input": {
                    "value": "pos.triu(1) * ((neg_i + neg_i.t()).log() + d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_63": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "mm_14": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_40": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_41": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_an.new().resize_as_(dist_an).fill_(1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_41": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_75": {
                "variable": {
                    "value": "(dist_ap, relative_p_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat[is_pos].contiguous().view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_79": {
                "variable": {
                    "value": "(dist_an, relative_n_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat[is_neg].contiguous().view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_11": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.topk(max(1, min(K, input.size(dim))), dim=dim, **kwargs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "index": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_printoptions_65": {
                "threshold": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_91": {
                "variable": {
                    "value": "p_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind[is_pos].contiguous().view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "relative_p_inds.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_93": {
                "variable": {
                    "value": "n_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind[is_neg].contiguous().view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "relative_n_inds.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_171": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oim(inputs, targets, self.lut, self.momentum)",
                            "Call"
                        ],
                        [
                            "inputs * self.scalar",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(log_probs.size()).scatter_(1, targets.unsqueeze(1).cpu(), 1)",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "(1 - self.epsilon) * targets + self.epsilon / self.num_classes",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_192": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_231": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha + (pos * 2 - 1) * (d - beta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_111": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SoftMarginLoss_113": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_217": {
                "input": {
                    "value": "*[labels.unsqueeze(dim).expand_as(d) for dim in [0, 1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_11": {
                "input": {
                    "value": "input.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "pos.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_228": {
                "input": {
                    "value": "(d.data.clamp(min=distance_threshold).pow(embeddings.size(-1) - 2) * (1 - d.data.clamp(min=distance_threshold).pow(2) / 4).pow(0.5 * (embeddings.size(-1) - 3))).reciprocal().masked_fill_(pos.data + torch.eye(len(d)).type_as(d.data) > 0, eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(pos.data.sum() / len(pos))",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_217": {
                "n": {
                    "value": "len(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_88": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_mat.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_228": {
                "n": {
                    "value": "len(d)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/random_erasing.py": {
        "torch": {}
    },
    "utils/serialization.py": {
        "torch": {
            "save_61": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, filename)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}