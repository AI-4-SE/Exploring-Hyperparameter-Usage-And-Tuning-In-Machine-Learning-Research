{
    "dpgan/dpgan.py": {
        "tensorflow": {
            "Session_22": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "TF_FLOAT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.D.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.D(self.G(z)) - self.D(x) + tf.multiply(tf.constant(lam, TF_FLOAT), tf.square(tf.norm(D_grad_x_hat, axis=1 if x_hat._rank() <= 2 else (1, 2)) - tf.constant(1.0)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "G_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-self.D(self.G(z))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_37": {
                "learning_rate": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "d * [rho]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_45": {
                "x": {
                    "value": "tf.constant(1.0) - rho",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.G(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_46": {
                "ys": {
                    "value": "self.D(x_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(rho, x) + tf.multiply(tf.constant(1.0) - rho, self.G(z))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_47": {
                "x": {
                    "value": "tf.constant(lam, TF_FLOAT)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(tf.norm(D_grad_x_hat, axis=1 if x_hat._rank() <= 2 else (1, 2)) - tf.constant(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_47": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_47": {
                "x": {
                    "value": "tf.norm(D_grad_x_hat, axis=1 if x_hat._rank() <= 2 else (1, 2)) - tf.constant(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_49": {
                "x": {
                    "value": "tf.norm(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(C, TF_FLOAT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "initial_value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_81": {
                "ref": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_49": {
                "x": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(tf.norm(grad), tf.constant(C, TF_FLOAT))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_47": {
                "tensor": {
                    "value": "D_grad_x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.D(x_hat), x_hat)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if x_hat._rank() <= 2 else (1, 2)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "constant_49": {
                "value": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "TF_FLOAT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_49": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_95": {
                "tensor": {
                    "value": "self.G.trainable_weights[i] - theta_old[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dpgan/tests.py": {
        "tensorflow": {
            "AdamOptimizer_119": {
                "learning_rate": {
                    "value": "*args.adam",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}