{
    "HCP-E/util/logger.py": {
        "tensorflow": {
            "summary_iterator_451": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "HCP-I/util/logger.py": {
        "tensorflow": {
            "summary_iterator_451": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "HCP-E/ddpg.py": {
        "torch": {
            "load_325": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.pretrain_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_459": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.add_weight_decay([net], weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_109": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "batch_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'ckpt_step': step, 'global_step': self.global_step, 'actor_state_dict': self.actor.state_dict(), 'actor_optimizer': self.actor_optim.state_dict(), 'critic_state_dict': self.critic.state_dict(), 'critic_optimizer': self.critic_optim.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.pretrain_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_366": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'ckpt_step': step, 'global_step': self.global_step, 'actor_state_dict': self.actor.state_dict(), 'actor_optimizer': self.actor_optim.state_dict(), 'critic_state_dict': self.critic.state_dict(), 'critic_optimizer': self.critic_optim.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.model_dir, 'model_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_438": {
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.reset()",
                            "Call"
                        ],
                        [
                            "obs[0]",
                            "Subscript"
                        ],
                        [
                            "new_obs",
                            "variable"
                        ],
                        [
                            "self.env.train_test_reset(cond=idx)",
                            "Call"
                        ],
                        [
                            "self.env.test_reset(cond=idx)",
                            "Call"
                        ],
                        [
                            "obs[0].copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HCP-E/main.py": {
        "torch": {
            "manual_seed_160": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_163": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HCP-E/model.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.pol_net_hid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ob_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.pol_net_hid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.pol_net_hid3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid3_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.pol_net_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid3_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "selu_29": {
                "variable": {
                    "value": "pol_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pol_net_hid1(ob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_30": {
                "variable": {
                    "value": "pol_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pol_net_hid2(pol_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_31": {
                "variable": {
                    "value": "pol_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pol_net_hid3(pol_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pol_net_out(pol_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.val_net_hid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ob_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.val_net_hid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid1_dim + act_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.val_net_hid3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid3_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.val_net_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid3_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "selu_63": {
                "variable": {
                    "value": "val_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_net_hid1(ob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "val_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[val_out, act]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "selu_65": {
                "variable": {
                    "value": "val_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_net_hid2(val_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_66": {
                "variable": {
                    "value": "val_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_net_hid3(val_out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "HCP-E/mutils.py": {
        "torch": {
            "zeros_98": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "self.m2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, self.mean.size()[1]).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_120": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, self.mean.size()[1]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_110": {
                "input": {
                    "value": "torch.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_111": {
                "input": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_110": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, self.mean.size()[1]).float()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x_mean - self.mean",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HCP-I/distribution.py": {
        "torch": {
            "exp_10": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "other.logstd - self.logstd + (torch.pow(self.std, 2) + torch.pow(self.mean - other.mean, 2)) / (2.0 * torch.pow(other.std, 2)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_17": {
                "input": {
                    "value": "torch.pow((x - self.mean) / (self.std + 1e-08), 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_17": {
                "input": {
                    "value": "(x - self.mean) / (self.std + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_28": {
                "input": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "self.mean - other.mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_30": {
                "input": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HCP-I/main.py": {
        "torch": {
            "manual_seed_166": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HCP-I/model.py": {
        "torch": {
            "pow_113": {
                "variable": {
                    "value": "vf_loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals_pred - returns",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_114": {
                "variable": {
                    "value": "vf_loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_pred_clipped - returns",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_117": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "old_acts_neglogp - acts_neglogp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(pg_loss1, pg_loss2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_157": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrain_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_211": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.add_weight_decay([self.model], weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'ckpt_step': step, 'global_step': self.global_step, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrain_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "old_acts_neglogp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(old_acts_neglogp))",
                            "Call"
                        ],
                        [
                            "old_acts_neglogp.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_109": {
                "input": {
                    "value": "vals_pred - values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.cliprange",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.cliprange",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "torch.max(vf_loss1, vf_loss2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_119": {
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(old_acts_neglogp - acts_neglogp)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - self.cliprange",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + self.cliprange",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "pg_loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-advs * ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_126": {
                "input": {
                    "value": "torch.pow(acts_neglogp - old_acts_neglogp, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'ckpt_step': step, 'global_step': self.global_step, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.model_dir, 'model_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_115": {
                "input": {
                    "value": "vf_loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(vals_pred - returns, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_126": {
                "input": {
                    "value": "acts_neglogp - old_acts_neglogp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip((ob - self.ob_rms.mean) / np.sqrt(self.ob_rms.var + 1e-08), -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip((ob - self.ob_rms.mean) / np.sqrt(self.ob_rms.var + 1e-08), -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip((ob - self.ob_rms.mean) / np.sqrt(self.ob_rms.var + 1e-08), -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ],
                        [
                            "obs[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "obs",
                            "variable"
                        ],
                        [
                            "self.normalize_ob(ob)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(ob)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(actions)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(returns)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(values)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "robot_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "robot_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "ndarray": {
                    "value": "robot_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "obs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(robot_id)).long().cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "HCP-I/policy.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.pol_net_hid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.pol_net_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.val_net_hid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.val_net_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid2_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, act_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.value(ob, robot_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "robot_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.pol_net_hid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim + embed_dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.val_net_hid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim + embed_dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.pol_net_hid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.val_net_hid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid1_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "ob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ob, embed_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "selu_42": {
                "variable": {
                    "value": "pol_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pol_net_hid1(ob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_43": {
                "variable": {
                    "value": "pol_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pol_net_hid2(pol_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_46": {
                "variable": {
                    "value": "val_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_net_hid1(ob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "selu_47": {
                "variable": {
                    "value": "val_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val_net_hid2(val_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}