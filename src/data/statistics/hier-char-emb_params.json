{
    "data.py": {
        "torch": {}
    },
    "example_hier_emb.py": {
        "torch": {}
    },
    "locked_dropout.py": {
        "torch": {}
    },
    "main_hier.py": {
        "torch": {
            "nll_loss_112": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(model.decoder(output), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_279": {
                "variable": {
                    "value": "(model, optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "data.Corpus(args.data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_184": {
                "variable": {
                    "value": "(model, optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_80": {
                "input": {
                    "value": "F.log_softmax(model.decoder(output), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "input": {
                    "value": "model.decoder(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__123": {
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_80": {
                "input": {
                    "value": "model.decoder(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ASGD_258": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "[model, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "[model, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "[model, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{args.save}.e{epoch}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "main_norm.py": {
        "torch": {
            "Embedding_181": {
                "variable": {
                    "value": "emb_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(corpus.dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.emsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_149": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_302": {
                "variable": {
                    "value": "(model, criterion, optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "data.Corpus(args.data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_189": {
                "variable": {
                    "value": "(model, criterion, optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_230": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_233": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__123": {
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_156": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_281": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_290": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{args.save}.e{epoch}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoder.num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_18": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_20": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnblk/hier_emb.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.sub_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(conv)",
                            "Call"
                        ],
                        [
                            "new_size + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "5 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.Wlh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.Wrh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[n[3].view(1, -1) for n in nodes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "variable": {
                    "value": "(ig, lfg, rfg, og, ug)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes])",
                            "Call"
                        ],
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes]) + self.Wlh(torch.cat([n[4].view(1, -1) for n in ln])) + self.Wrh(torch.cat([n[4].view(1, -1) for n in rn]))",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_64": {
                "variable": {
                    "value": "(ig, lfg, rfg, og, ug)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes])",
                            "Call"
                        ],
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes]) + self.Wlh(torch.cat([n[4].view(1, -1) for n in ln])) + self.Wrh(torch.cat([n[4].view(1, -1) for n in rn]))",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "to_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.lut[k] for k in input.view(input.numel()).cpu().numpy()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_76": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "input": {
                    "value": "ig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "input": {
                    "value": "ug",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "input": {
                    "value": "og",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(lfg) * torch.cat([n[5].view(1, -1) for n in ln]) + torch.sigmoid(rfg) * torch.cat([n[5].view(1, -1) for n in rn]) + torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_69": {
                "input": {
                    "value": "og",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_69": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(lfg) * torch.cat([n[5].view(1, -1) for n in ln]) + torch.sigmoid(rfg) * torch.cat([n[5].view(1, -1) for n in rn]) + torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[n[3].view(1, -1) for n in nodes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[n[4].view(1, -1) for n in rn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "input": {
                    "value": "ig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "input": {
                    "value": "ug",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[n[4].view(1, -1) for n in ln]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "input": {
                    "value": "lfg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "[n[5].view(1, -1) for n in ln]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "input": {
                    "value": "rfg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[n[5].view(1, -1) for n in rn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "splitcross.py": {
        "torch": {
            "Embedding_183": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(embed.parameters()) + list(crit.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "combo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_131": {
                "variable": {
                    "value": "all_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "softmaxed_all_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(combo, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.tail_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.tail_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "variable": {
                    "value": "head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "softmaxed_head_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "linear_60": {
                "variable": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tail_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[start:end]",
                            "Subscript"
                        ],
                        [
                            "weight[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "tail_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(tail_res, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(split_targets[idx] - self.splits[idx]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_102": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tmp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask == idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_144": {
                "input": {
                    "value": "softmaxed_head_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(head_res, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "split_targets[idx].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_163": {
                "input": {
                    "value": "tail_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}