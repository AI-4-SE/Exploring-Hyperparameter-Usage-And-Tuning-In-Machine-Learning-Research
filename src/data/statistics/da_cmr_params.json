{
    "augmentation.py": {
        "tensorflow": {
            "py_function_90": {
                "variable": {
                    "value": "(image, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "do_augmentation2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, label, sz, ia]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_function_129": {
                "variable": {
                    "value": "(image, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "valid_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, label, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_132": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_function_148": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "test_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_function_201": {
                "variable": {
                    "value": "(image, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "do_augmentation2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, label, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_204": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_function_212": {
                "variable": {
                    "value": "(image, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "do_augmentation2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, image, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_function_223": {
                "variable": {
                    "value": "(image, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "valid_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, label, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_226": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_function_234": {
                "variable": {
                    "value": "(image, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "valid_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, image, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_132": {
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_226": {
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "base_cnn.py": {
        "tensorflow": {
            "Sequential_6": {
                "variable": {
                    "value": "cnn_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_32": {
                "variable": {
                    "value": "inputx",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(in_dim1[0], in_dim1[1], in_dim1[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "in_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_33": {
                "variable": {
                    "value": "inputy",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(in_dim2[0], in_dim2[1], in_dim2[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "in_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_66": {
                "inputs": {
                    "value": "[inputx, inputy]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[output]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "base_cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_7": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_9": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_10": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_12": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_13": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_15": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_16": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_18": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_20": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "units": {
                    "value": "n_doms",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_38": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_42": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_46": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_47": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_50": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Concatenate_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_54": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_59": {
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "units": {
                    "value": "n_doms",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "da_main.py": {
        "tensorflow": {
            "PiecewiseConstantDecay_46": {
                "variable": {
                    "value": "learning_rate_function_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "[150 * NO_TRAIN_STEPS, 1000 * NO_TRAIN_STEPS]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "[0.001, 0.0001, 1e-05]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_47": {
                "variable": {
                    "value": "learning_rate_function_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "[150 * NO_TRAIN_STEPS, 400 * NO_TRAIN_STEPS]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "[0.001, 0.0001, 1e-05]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_function_seg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfk.optimizers.schedules.PiecewiseConstantDecay(boundaries=[150 * NO_TRAIN_STEPS, 1000 * NO_TRAIN_STEPS], values=[0.001, 0.0001, 1e-05])",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_function_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfk.optimizers.schedules.PiecewiseConstantDecay(boundaries=[150 * NO_TRAIN_STEPS, 400 * NO_TRAIN_STEPS], values=[0.001, 0.0001, 1e-05])",
                            "Call"
                        ]
                    ]
                }
            },
            "CategoricalCrossentropy_54": {
                "variable": {
                    "value": "cat_xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CategoricalAccuracy_55": {
                "variable": {
                    "value": "cat_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_57": {
                "variable": {
                    "value": "domain_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_61": {
                "variable": {
                    "value": "unlabelled_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_65": {
                "variable": {
                    "value": "domain_valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_71": {
                "variable": {
                    "value": "reverse_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[-alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_logger_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_115": {
                "variable": {
                    "value": "epoch_loss_avg_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_116": {
                "variable": {
                    "value": "epoch_loss_avg_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_117": {
                "variable": {
                    "value": "epoch_dice",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_118": {
                "variable": {
                    "value": "epoch_class_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_156": {
                "variable": {
                    "value": "epoch_valid_dice",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_122": {
                "variable": {
                    "value": "reverse_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[-alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xs, xu]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "d_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ds, du]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_135": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_136": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(BATCH_SIZE + BATCH_SIZE // 4)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_137": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([xs, xu], 0)",
                            "Call"
                        ],
                        [
                            "tf.gather(x_adv, inds, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(BATCH_SIZE + BATCH_SIZE // 4)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(inds)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_138": {
                "variable": {
                    "value": "d_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([ds, du], 0)",
                            "Call"
                        ],
                        [
                            "tf.gather(d_adv, inds, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(BATCH_SIZE + BATCH_SIZE // 4)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(inds)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_58": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_62": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_66": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "softmax_14": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfk.backend.softmax(y_pred)",
                            "Call"
                        ],
                        [
                            "tfk.backend.softmax(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "tsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "psum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfk.backend.softmax(y_pred)",
                            "Call"
                        ],
                        [
                            "tfk.backend.softmax(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_42": {
                "variable": {
                    "value": "y_true_xe",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_crossentropy_43": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_xe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfk.backend.cast(y_true, y_pred.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfk.backend.softmax(y_pred)",
                            "Call"
                        ],
                        [
                            "tfk.backend.softmax(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "tsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "psum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_22": {
                "a": {
                    "value": "intersection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "psum * tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(intersection) + self.smooth",
                            "BinOp"
                        ],
                        [
                            "psum * tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(intersection) + self.smooth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_23": {
                "a": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "psum + tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(sums) + self.smooth",
                            "BinOp"
                        ],
                        [
                            "psum + tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(sums) + self.smooth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_27": {
                "a": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * intersection / sums",
                            "BinOp"
                        ],
                        [
                            "2.0 * intersection / sums",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_51": {
                "a": {
                    "value": "intersection",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "psum * tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(intersection) + self.smooth",
                            "BinOp"
                        ],
                        [
                            "psum * tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(intersection) + self.smooth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_52": {
                "a": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "psum + tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(sums) + self.smooth",
                            "BinOp"
                        ],
                        [
                            "psum + tsum",
                            "BinOp"
                        ],
                        [
                            "tfk.backend.sum(sums) + self.smooth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_56": {
                "a": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * intersection / sums",
                            "BinOp"
                        ],
                        [
                            "2.0 * intersection / sums",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "u_net2.py": {
        "tensorflow": {
            "concat_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xskip, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2D_135": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2DTranspose_81": {
                "filters": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "tconv_kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "tconv_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'up_tconv_{}'.format(j + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "(i + 1) * out_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "conv_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "conv_dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'down_conv_{}_{}'.format(j + 1, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_34": {
                "filters": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "conv_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "conv_dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'up_conv_{}_{}'.format(j + 1, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_20": {
                "name": {
                    "value": "'down_bn_{}_{}'.format(j + 1, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_37": {
                "name": {
                    "value": "'up_bn_{}_{}'.format(j + 1, i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2D_66": {
                "pool_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.pool_strides",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "to_categorical_100": {
                "y": {
                    "value": "domain_info[code]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "no_domains",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_categorical_66": {
                "y": {
                    "value": "domain_info[code]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "no_domains",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_categorical_69": {
                "y": {
                    "value": "domain_info[code]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "no_domains",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}