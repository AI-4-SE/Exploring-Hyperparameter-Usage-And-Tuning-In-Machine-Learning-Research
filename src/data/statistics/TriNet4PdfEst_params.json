{
    "CIFAR10_Cshift_Adam_Log.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_18": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_19": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('../data', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 32 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 32 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 32 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_62": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(R, upper=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "variable": {
                    "value": "log_det_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.diag(P))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "x / (1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, i:], im[:, :, :i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, :, j:], im[:, :, :, :j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "grad_105": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(3 * 32 ** 2, [8, 8, 8, 8], device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, I + i:], im[:, :, :I + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, :, J + j:], im[:, :, :, :J + j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_62": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(3 * 32 ** 2, 3 * 32 ** 2)",
                            "Call"
                        ],
                        [
                            "R / num_samples - mu.t() @ mu",
                            "BinOp"
                        ],
                        [
                            "R + x.t() @ x",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "torch.diag(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 3 * 32 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_63": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(R, upper=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_98": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_110": {
                "input": {
                    "value": "m2[i] + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "1 + torch.exp(-torch.abs(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_75": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 3 * 32 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_75": {
                "input": {
                    "value": "-torch.abs(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10_L1Reg_Adam_Log.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_17": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_18": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('../data', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 32 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 32 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 32 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_43": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(R, upper=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "log_det_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.diag(P))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "x / (1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "grad_85": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(3 * 32 ** 2, [8, 8, 8, 8], device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_43": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(3 * 32 ** 2, 3 * 32 ** 2)",
                            "Call"
                        ],
                        [
                            "R / num_samples - mu.t() @ mu",
                            "BinOp"
                        ],
                        [
                            "R + x.t() @ x",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "torch.diag(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 3 * 32 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_44": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(R, upper=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_78": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_90": {
                "input": {
                    "value": "m2[i] + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_37": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log2_56": {
                "input": {
                    "value": "1 + torch.exp(-torch.abs(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_87": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 3 * 32 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - cifar_mu) @ cifar_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_56": {
                "input": {
                    "value": "-torch.abs(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_88": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST_Cshift_Adam_Log_NoFlip.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_16": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_17": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_19": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_61": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(R, upper=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "log_det_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.diag(P))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "x / (1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, i:], im[:, :, :i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, :, j:], im[:, :, :, :j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "grad_103": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(28 ** 2, [100, 100, 100, 100], device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_36": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, I + i:], im[:, :, :I + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im[:, :, :, J + j:], im[:, :, :, :J + j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_61": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(28 ** 2, 28 ** 2)",
                            "Call"
                        ],
                        [
                            "R / num_samples - mu.t() @ mu",
                            "BinOp"
                        ],
                        [
                            "R + x.t() @ x",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "torch.diag(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 28 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_62": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(R, upper=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "input": {
                    "value": "m2[i] + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "1 + torch.exp(-torch.abs(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 28 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_74": {
                "input": {
                    "value": "-torch.abs(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST_L1Reg_Adam_Tanh_NoFlip.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_15": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_16": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_18": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_42": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(R, upper=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "log_det_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.diag(P))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "x / (1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_69": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ],
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "grad_83": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(28 ** 2, [100, 100, 100, 100], device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_42": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(28 ** 2, 28 ** 2)",
                            "Call"
                        ],
                        [
                            "R / num_samples - mu.t() @ mu",
                            "BinOp"
                        ],
                        [
                            "R + x.t() @ x",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "torch.diag(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 28 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_43": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(R, upper=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_88": {
                "input": {
                    "value": "m2[i] + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_36": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log2_55": {
                "input": {
                    "value": "1 + torch.exp(-torch.abs(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_85": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 / 256 * data.reshape([num_samples, -1])",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "alpha + (1 - 2 * alpha) * x",
                            "BinOp"
                        ],
                        [
                            "255 / 256 * data.view(-1, 28 ** 2)",
                            "BinOp"
                        ],
                        [
                            "logit(x + torch.rand(x.shape) / 256)",
                            "Call"
                        ],
                        [
                            "logit((255 * data.reshape([num_samples, -1]) + 0.5) / 256)",
                            "Call"
                        ],
                        [
                            "(x - mnist_mu) @ mnist_P",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_55": {
                "input": {
                    "value": "-torch.abs(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_86": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "celeba_demo.py": {
        "torch": {
            "DataLoader_12": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "C.celeba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "I * J",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "I * J",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "celeba_density.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_14": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "C.celeba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_49": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + eta * torch.clamp(mse ** 0.5 - thr, 0) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_51": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(loss, Ws, create_graph=True)",
                            "Call"
                        ],
                        [
                            "grad(loss, Ws)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randn(W.shape, device=device) for W in Ws]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_55": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + eta * torch.clamp(mse ** 0.5 - thr, 0) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_59": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum([torch.sum(g * g) for g in pre_grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "W.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_40": {
                "input": {
                    "value": "(z - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_50": {
                "*size": {
                    "value": "W.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_41": {
                "input": {
                    "value": "mse ** 0.5 - thr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "g * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_71": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "celeba_dim_reduction.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_16": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "celeba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder('C:/Users/Admin/Downloads/celeba', transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(len(x), -1) @ U5[:-1] + U5[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ U6[:-1] + U6[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ V7[:-1] + V7[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ V6[:-1] + V6[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ V5[:-1] + V5[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.interpolate(x, scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "V1[:, :-1].view(3, 128, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "V1[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(3, 128 * 3 * 3 + 1, device=device) / math.sqrt(128 * 3 * 3 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "U1[:, :-1].view(128, 3, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "U1[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 3 * 4 * 4 + 1, device=device) / math.sqrt(3 * 4 * 4 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "U2[:, :-1].view(128, 128, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "U2[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 128 * 4 * 4 + 1, device=device) / math.sqrt(128 * 4 * 4 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "U3[:, :-1].view(128, 128, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "U3[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 128 * 4 * 4 + 1, device=device) / math.sqrt(128 * 4 * 4 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "U4[:, :-1].view(128, 128, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "U4[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 128 * 4 * 4 + 1, device=device) / math.sqrt(128 * 4 * 4 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "input": {
                    "value": "F.interpolate(x, scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "V4[:, :-1].view(128, 128, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "V4[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 128 * 3 * 3 + 1, device=device) / math.sqrt(128 * 3 * 3 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "input": {
                    "value": "F.interpolate(x, scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "V3[:, :-1].view(128, 128, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "V3[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 128 * 3 * 3 + 1, device=device) / math.sqrt(128 * 3 * 3 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "input": {
                    "value": "F.interpolate(x, scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "V2[:, :-1].view(128, 128, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "V2[:, -1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randn(128, 128 * 3 * 3 + 1, device=device) / math.sqrt(128 * 3 * 3 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 4 * 4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_42": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 4 * 4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_43": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 4 * 4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_44": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 4 * 4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_45": {
                "*size": {
                    "value": "4 * 4 * 128 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_46": {
                "*size": {
                    "value": "2048 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_47": {
                "*size": {
                    "value": "2048 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_50": {
                "*size": {
                    "value": "128 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_51": {
                "*size": {
                    "value": "2048 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_52": {
                "*size": {
                    "value": "2048 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_53": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 3 * 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_54": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 3 * 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_55": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 3 * 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_56": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128 * 3 * 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(F.conv2d(x, U1[:, :-1].view(128, 3, 4, 4), bias=U1[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U2[:, :-1].view(128, 128, 4, 4), bias=U2[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U3[:, :-1].view(128, 128, 4, 4), bias=U3[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(x, U4[:, :-1].view(128, 128, 4, 4), bias=U4[:, -1], stride=2, padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x.view(len(x), -1) @ U5[:-1] + U5[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ U6[:-1] + U6[-1:])",
                            "Call"
                        ],
                        [
                            "x @ U7[:-1] + U7[-1:]",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(x @ V7[:-1] + V7[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V6[:-1] + V6[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ V5[:-1] + V5[-1:]).view(-1, 128, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V4[:, :-1].view(128, 128, 3, 3), bias=V4[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V3[:, :-1].view(128, 128, 3, 3), bias=V3[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(F.conv2d(F.interpolate(x, scale_factor=2), V2[:, :-1].view(128, 128, 3, 3), bias=V2[:, -1], padding=1))",
                            "Call"
                        ],
                        [
                            "F.conv2d(F.interpolate(x, scale_factor=2), V1[:, :-1].view(3, 128, 3, 3), bias=V1[:, -1], padding=1)",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_82": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((x - y) ** 2) / num_samples",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Us + Vs",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_84": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(mse, Ws, create_graph=True)",
                            "Call"
                        ],
                        [
                            "grad(mse, Ws)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Us + Vs",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randn(W.shape, device=device) for W in Ws]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_88": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((x - y) ** 2) / num_samples",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Us + Vs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_92": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum([torch.sum(g * g) for g in pre_grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "W.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_77": {
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_83": {
                "*size": {
                    "value": "W.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "g * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "misc/tabular_data_density.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "inverse_49": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(R, upper=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "log_det_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.diag(P))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws",
                            "variable"
                        ]
                    ]
                }
            },
            "tensor_78": {
                "data": {
                    "value": "data.trn.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_88": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(data.n_dims, [512, 512, 512, 512, 512, 512, 512, 512, 512, 512], device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "data": {
                    "value": "data.trn.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_49": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.t() @ x / N - mu.t() @ mu",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "torch.diag(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_50": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(R, upper=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_80": {
                "n": {
                    "value": "trn_N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rsqrt_93": {
                "input": {
                    "value": "m2[j] + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_demo.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_10": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(26), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "input": {
                    "value": "U.decoding_fnn(y, Ws_dr_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "input": {
                    "value": "U.decoding_fnn(U.decoding_fnn(torch.randn(100, 16, device=device), Ws_decoder), Ws_dr_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_density.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_14": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(26), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_52": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + eta * torch.clamp(mse ** 0.5 - thr, 0) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_54": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(loss, Ws, create_graph=True)",
                            "Call"
                        ],
                        [
                            "grad(loss, Ws)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randn(W.shape, device=device) for W in Ws]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_58": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + eta * torch.clamp(mse ** 0.5 - thr, 0) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_62": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum([torch.sum(g * g) for g in pre_grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_28": {
                "n": {
                    "value": "W.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_43": {
                "input": {
                    "value": "(z - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U.decoding_fnn(y, Ws_dr_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "W.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "mse ** 0.5 - thr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "g * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "input": {
                    "value": "U.decoding_fnn(U.decoding_fnn(torch.randn(100, 16, device=device), Ws_decoder), Ws_dr_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_75": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_dim_reduction.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_14": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(26), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U.decoding_fnn(z, Ws_dr_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_27": {
                "n": {
                    "value": "W.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_45": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((x - y) ** 2) / num_samples",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_dr_encoder + Ws_dr_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_47": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(mse, Ws, create_graph=True)",
                            "Call"
                        ],
                        [
                            "grad(mse, Ws)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_dr_encoder + Ws_dr_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randn(W.shape, device=device) for W in Ws]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_51": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((x - y) ** 2) / num_samples",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_dr_encoder + Ws_dr_decoder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_55": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum([torch.sum(g * g) for g in pre_grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "W.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "g * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "preconditioned_stochastic_gradient_descent.py": {
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.reshape(x, [-1, 1]) for x in dxs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "dg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.reshape(g, [-1, 1]) for g in dgs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "triu_26": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a.mm(a.t()) - b.mm(b.t())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(a.mm(a.t()) - b.mm(b.t()))",
                            "Call"
                        ],
                        [
                            "[torch.reshape(g, [-1, 1]) for g in grads]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(grad)",
                            "Call"
                        ],
                        [
                            "Q.t().mm(Q.mm(grad))",
                            "Call"
                        ],
                        [
                            "torch.sign(torch.abs(Q * dg) - torch.abs(dx / Q))",
                            "Call"
                        ],
                        [
                            "[torch.reshape(g, [-1, 1]) for g in grads]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_62": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Q * dg) - torch.abs(dx / Q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_86": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Ql)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_87": {
                "variable": {
                    "value": "max_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Qr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_89": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_l / max_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_97": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.mm(A.t()) - Bt.mm(Bt.t())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_98": {
                "variable": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.t().mm(A) - Bt.t().mm(Bt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_140": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(ql)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_141": {
                "variable": {
                    "value": "max_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rho * qr",
                            "BinOp"
                        ],
                        [
                            "rho * qr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_l / max_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "grad1_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A[:-1].mm(A[-1:].t()) - Bt[:-1].mm(Bt[-1:].t())",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(grad1_bias, [-1])",
                            "Call"
                        ],
                        [
                            "torch.cat([grad1_bias, grad1_bias.new_zeros(1)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "grad1_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad1_bias, grad1_bias.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_196": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(Ql)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_197": {
                "variable": {
                    "value": "max_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_199": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_l / max_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_206": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.mm(A.t()) - Bt.mm(Bt.t())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_240": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_l / max_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.reshape(x, [-1, 1]) for x in dxs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "dg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.reshape(g, [-1, 1]) for g in dgs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tril_282": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "Qg1.mm(Qg1.t()) - iQtx1.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.tril(grad1)",
                            "Call"
                        ],
                        [
                            "Pg1.mm(dg[:r].t()) - dx[:r].mm(iPx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.triu(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_285": {
                "variable": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(grad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_295": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "Qg1.mm(Qg1.t()) - iQtx1.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.tril(grad1)",
                            "Call"
                        ],
                        [
                            "Pg1.mm(dg[:r].t()) - dx[:r].mm(iPx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.triu(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_298": {
                "variable": {
                    "value": "max_abs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(grad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(a.mm(a.t()) - b.mm(b.t()))",
                            "Call"
                        ],
                        [
                            "[torch.reshape(g, [-1, 1]) for g in grads]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(grad)",
                            "Call"
                        ],
                        [
                            "Q.t().mm(Q.mm(grad))",
                            "Call"
                        ],
                        [
                            "torch.sign(torch.abs(Q * dg) - torch.abs(dx / Q))",
                            "Call"
                        ],
                        [
                            "[torch.reshape(g, [-1, 1]) for g in grads]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_341": {
                "variable": {
                    "value": "pre_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[U1.t().mm(LtQg1), U2.t().mm(LtQg1) + u3 * LtQg2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triangular_solve_24": {
                "b": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.reshape(x, [-1, 1]) for x in dxs])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.reshape(x, [-1, 1]) for x in dxs])",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "Q.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "Ql",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ql / rho",
                            "BinOp"
                        ],
                        [
                            "Ql / rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_87": {
                "input": {
                    "value": "Qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rho * Qr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "triangular_solve_94": {
                "b": {
                    "value": "dX.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "Qr.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_140": {
                "input": {
                    "value": "ql",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ql / rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_155": {
                "input": {
                    "value": "Bt * Bt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "Bt * Bt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_169": {
                "tensors": {
                    "value": "(new_ql0, new_ql1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_196": {
                "input": {
                    "value": "Ql",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ql / rho",
                            "BinOp"
                        ],
                        [
                            "Ql / rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_197": {
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rho * qr",
                            "BinOp"
                        ],
                        [
                            "rho * qr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "triangular_solve_204": {
                "b": {
                    "value": "dX / qr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "A": {
                    "value": "Ql.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_207": {
                "input": {
                    "value": "Bt * Bt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_238": {
                "input": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l3 / rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_239": {
                "input": {
                    "value": "u3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rho * u3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "triangular_solve_262": {
                "b": {
                    "value": "dx[:r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "U1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_266": {
                "b": {
                    "value": "iUtx1 - L2.t().mm(iQtx2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "A": {
                    "value": "L1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_274": {
                "b": {
                    "value": "iQtx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triangular_solve(iUtx1 - L2.t().mm(iQtx2), L1.t(), upper=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "A": {
                    "value": "L1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L12[:r]",
                            "Subscript"
                        ],
                        [
                            "L12[:r]",
                            "Subscript"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_278": {
                "b": {
                    "value": "iLiQtx1 - U2.mm(iPx2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "A": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U12[:, :r]",
                            "Subscript"
                        ],
                        [
                            "U12[:, :r]",
                            "Subscript"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_285": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "Qg1.mm(Qg1.t()) - iQtx1.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.tril(grad1)",
                            "Call"
                        ],
                        [
                            "Pg1.mm(dg[:r].t()) - dx[:r].mm(iPx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.triu(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_286": {
                "input": {
                    "value": "torch.abs(grad2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_287": {
                "input": {
                    "value": "torch.abs(grad3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_298": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "Qg1.mm(Qg1.t()) - iQtx1.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.tril(grad1)",
                            "Call"
                        ],
                        [
                            "Pg1.mm(dg[:r].t()) - dx[:r].mm(iPx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.triu(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_299": {
                "input": {
                    "value": "torch.abs(grad2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_300": {
                "input": {
                    "value": "torch.abs(grad3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_306": {
                "tensors": {
                    "value": "[newU1, newU2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_321": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "input": {
                    "value": "grad[idx:idx + lens[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "grads[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "dx / Q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_100": {
                "input": {
                    "value": "torch.abs(grad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "torch.abs(grad2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_166": {
                "input": {
                    "value": "torch.abs(grad2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_209": {
                "input": {
                    "value": "torch.abs(grad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_210": {
                "input": {
                    "value": "torch.abs(grad2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_238": {
                "input": {
                    "value": "L12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L12 / rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_239": {
                "input": {
                    "value": "U12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rho * U12",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_252": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_286": {
                "input": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.t().mm(A) - Bt.t().mm(Bt))",
                            "Call"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "Qg2.mm(Qg1.t()) - iQtx2.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "Pg1.mm(dg[r:].t()) - dx[:r].mm(iPx2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_287": {
                "input": {
                    "value": "grad3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qg2 * Qg2 - iQtx2 * iQtx2",
                            "BinOp"
                        ],
                        [
                            "Pg2 * dg[r:] - dx[r:] * iPx2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_299": {
                "input": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.t().mm(A) - Bt.t().mm(Bt))",
                            "Call"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "Qg2.mm(Qg1.t()) - iQtx2.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "Pg1.mm(dg[r:].t()) - dx[:r].mm(iPx2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_300": {
                "input": {
                    "value": "grad3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qg2 * Qg2 - iQtx2 * iQtx2",
                            "BinOp"
                        ],
                        [
                            "Pg2 * dg[r:] - dx[r:] * iPx2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_347": {
                "input": {
                    "value": "pre_grad[idx:idx + lens[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "grads[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_100": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "Qg1.mm(Qg1.t()) - iQtx1.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.tril(grad1)",
                            "Call"
                        ],
                        [
                            "Pg1.mm(dg[:r].t()) - dx[:r].mm(iPx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.triu(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_101": {
                "input": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.t().mm(A) - Bt.t().mm(Bt))",
                            "Call"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "Qg2.mm(Qg1.t()) - iQtx2.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "Pg1.mm(dg[r:].t()) - dx[:r].mm(iPx2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_160": {
                "input": {
                    "value": "torch.abs(grad1_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_161": {
                "input": {
                    "value": "torch.abs(grad1_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_166": {
                "input": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.t().mm(A) - Bt.t().mm(Bt))",
                            "Call"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "Qg2.mm(Qg1.t()) - iQtx2.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "Pg1.mm(dg[r:].t()) - dx[:r].mm(iPx2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_209": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "torch.triu(A.mm(A.t()) - Bt.mm(Bt.t()))",
                            "Call"
                        ],
                        [
                            "Qg1.mm(Qg1.t()) - iQtx1.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.tril(grad1)",
                            "Call"
                        ],
                        [
                            "Pg1.mm(dg[:r].t()) - dx[:r].mm(iPx1.t())",
                            "BinOp"
                        ],
                        [
                            "torch.triu(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_210": {
                "input": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triu(A.t().mm(A) - Bt.t().mm(Bt))",
                            "Call"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(A * A, dim=0, keepdim=True) - torch.sum(Bt * Bt, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "Qg2.mm(Qg1.t()) - iQtx2.mm(iQtx1.t())",
                            "BinOp"
                        ],
                        [
                            "Pg1.mm(dg[r:].t()) - dx[:r].mm(iPx2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_160": {
                "input": {
                    "value": "grad1_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(A * A, dim=1) - torch.sum(Bt * Bt, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_161": {
                "input": {
                    "value": "grad1_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A[:-1].mm(A[-1:].t()) - Bt[:-1].mm(Bt[-1:].t())",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(grad1_bias, [-1])",
                            "Call"
                        ],
                        [
                            "torch.cat([grad1_bias, grad1_bias.new_zeros(1)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "toy_data_generation_demo.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_17": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ring_sampling(num_samples).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "grad_41": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + eta * torch.clamp(mse ** 0.5 - thr, 0) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_43": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(loss, Ws, create_graph=True)",
                            "Call"
                        ],
                        [
                            "grad(loss, Ws)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randn(W.shape, device=device) for W in Ws]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_47": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + eta * torch.clamp(mse ** 0.5 - thr, 0) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws_encoder + Ws_decoder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_51": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum([torch.sum(g * g) for g in pre_grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_24": {
                "n": {
                    "value": "W.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_32": {
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "W.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_15": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.rand(2) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_33": {
                "input": {
                    "value": "mse ** 0.5 - thr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "g * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_60": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "toy_density_estimate_demo.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_24": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(num_para)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ring_sampling(num_samples).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[i + 0.5, j + 0.5]]).to(device)",
                            "Call"
                        ],
                        [
                            "2.2 * x / im_size - 1.1",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "grad_35": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(2, [100, 100], device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_37": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad(nll, Ws, create_graph=True)",
                            "Call"
                        ],
                        [
                            "grad(nll, Ws)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(2, [100, 100], device)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randn(W.shape, device=device) for W in Ws]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_41": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.MonoTriNetInit(2, [100, 100], device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum([torch.sum(g * g) for g in pre_grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[i + 0.5, j + 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "W.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_16": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.rand(2) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_45": {
                "input": {
                    "value": "g * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utility.py": {
        "torch": {
            "ones_114": {
                "variable": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "whole_matrix.shape[0] - 3",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_156": {
                "variable": {
                    "value": "arng",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_157": {
                "variable": {
                    "value": "Wi[arng // B, arng]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.expm1(torch.abs(Wi[arng // B, arng])) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_158": {
                "variable": {
                    "value": "Wo[arng, arng // B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.expm1(torch.abs(Wo[arng, arng // B])) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_184": {
                "variable": {
                    "value": "arng",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_195": {
                "variable": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j_diag.view(-1, N, B)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_267": {
                "variable": {
                    "value": "arng",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_268": {
                "variable": {
                    "value": "Wi[arng // B, arng]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.expm1(torch.abs(Wi[arng // B, arng])) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_269": {
                "variable": {
                    "value": "Wo[arng, arng // B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.expm1(torch.abs(Wo[arng, arng // B])) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "whole_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[whole_matrix, Wo[arng, arng // B][None, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "whole_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[whole_matrix, torch.zeros(1, B * N)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_306": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(N, N, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_interleave_306": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi.shape[1] // N",
                            "BinOp"
                        ],
                        [
                            "Bs",
                            "variable"
                        ],
                        [
                            "whole_matrix.shape[1] // N",
                            "BinOp"
                        ],
                        [
                            "Bs",
                            "variable"
                        ]
                    ]
                },
                "repeats": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_314": {
                "variable": {
                    "value": "arng",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "whole_matrix.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_325": {
                "variable": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j_diag.view(-1, N, B)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ W[:-1] + W[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v @ W[:-1] + W[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "median_73": {
                "input": {
                    "value": "torch.stack(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "x @ W[:-1] + W[-1:]",
                            "BinOp"
                        ],
                        [
                            "x @ Wo[:-1] + Wo[-1:] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ],
                        [
                            "x @ ((1 - mask) * whole_matrix[:N]).t() + output_bias[None, :] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonl_derivatives[i].view(batch_size, 1, -1) * Ws[i][:-1].repeat(batch_size, 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws[-1][:-1].repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(nonl_derivatives[i].view(batch_size, 1, -1) * Ws[i][:-1].repeat(batch_size, 1, 1), J)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tanh_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x @ W[:-1] + W[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, N, 1, 1, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(j_diag, current_j_diag)",
                            "Call"
                        ],
                        [
                            "torch.matmul(j_diag, diag_matrices[None, :, :, :])",
                            "Call"
                        ],
                        [
                            "(wi_diag + delta_wi_diag)[None, :] * derivative * (wo_diag + delta_wo_diag)[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(j_diag.view(-1, N, B), dim=2)",
                            "Call"
                        ],
                        [
                            "(wi_diag + delta_wi_diag)[None, :] * derivative * delta_wo_diag[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(j_diag.view(-1, N, B), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "current_j_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diag_matrices[None, :, :, :] * derivative.view(batch_size, N, 1, Br)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, N, 1, 1, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(j_diag, current_j_diag)",
                            "Call"
                        ],
                        [
                            "torch.matmul(j_diag, diag_matrices[None, :, :, :])",
                            "Call"
                        ],
                        [
                            "(wi_diag + delta_wi_diag)[None, :] * derivative * (wo_diag + delta_wo_diag)[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(j_diag.view(-1, N, B), dim=2)",
                            "Call"
                        ],
                        [
                            "(wi_diag + delta_wi_diag)[None, :] * derivative * delta_wo_diag[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(j_diag.view(-1, N, B), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "diag_matrices[None, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "input": {
                    "value": "torch.sum(Mi, dim=0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "input": {
                    "value": "torch.sum(Mo, dim=0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "x @ W[:-1] + W[-1:]",
                            "BinOp"
                        ],
                        [
                            "x @ Wo[:-1] + Wo[-1:] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ],
                        [
                            "x @ ((1 - mask) * whole_matrix[:N]).t() + output_bias[None, :] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_172": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_189": {
                "input": {
                    "value": "torch.stack([wi_diag, torch.zeros_like(wi_diag)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_190": {
                "input": {
                    "value": "torch.stack([wo_diag, torch.zeros_like(wo_diag)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_198": {
                "input": {
                    "value": "(x * delta_wo_diag[None, :]).view(-1, N, B)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "torch.log(j_diag + 1e-15)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_258": {
                "input": {
                    "value": "torch.sum(Mi, dim=0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_264": {
                "input": {
                    "value": "torch.sum(Mo, dim=0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_290": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_319": {
                "input": {
                    "value": "torch.sigmoid(wi_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_320": {
                "input": {
                    "value": "torch.sigmoid(-output_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_328": {
                "input": {
                    "value": "(x * delta_wo_diag[None, :]).view(-1, N, B)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_331": {
                "input": {
                    "value": "torch.log(j_diag + 1e-15)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_363": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "x @ W[:-1] + W[-1:]",
                            "BinOp"
                        ],
                        [
                            "x @ Wo[:-1] + Wo[-1:] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ],
                        [
                            "x @ ((1 - mask) * whole_matrix[:N]).t() + output_bias[None, :] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_11": {
                "*size": {
                    "value": "dims[i] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "whole_matrix.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_89": {
                "input": {
                    "value": "torch.sum(M, dim=0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "loc1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "Mi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([1, B]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mi, np.ones([1, B * N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mi)",
                            "Call"
                        ],
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([1, B]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mi, np.ones([1, B * N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mi)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_153": {
                "*size": {
                    "value": "B * N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "whole_matrix.shape[0] - 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_153": {
                "input": {
                    "value": "Mo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([B, 1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mo, np.ones([1, N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mo)",
                            "Call"
                        ],
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([B, 1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mo, np.ones([1, N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mo)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expm1_157": {
                "input": {
                    "value": "torch.abs(Wi[arng // B, arng])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expm1_158": {
                "input": {
                    "value": "torch.abs(Wo[arng, arng // B])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_189": {
                "tensors": {
                    "value": "[wi_diag, torch.zeros_like(wi_diag)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_190": {
                "tensors": {
                    "value": "[wo_diag, torch.zeros_like(wo_diag)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_201": {
                "input": {
                    "value": "j_diag + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_258": {
                "*size": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_258": {
                "input": {
                    "value": "Mi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([1, B]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mi, np.ones([1, B * N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mi)",
                            "Call"
                        ],
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([1, B]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mi, np.ones([1, B * N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mi)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_264": {
                "*size": {
                    "value": "B * N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "whole_matrix.shape[0] - 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_264": {
                "input": {
                    "value": "Mo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([B, 1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mo, np.ones([1, N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mo)",
                            "Call"
                        ],
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([B, 1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([Mo, np.ones([1, N])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(Mo)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expm1_268": {
                "input": {
                    "value": "torch.abs(Wi[arng // B, arng])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expm1_269": {
                "input": {
                    "value": "torch.abs(Wo[arng, arng // B])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "B * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_297": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "x @ W[:-1] + W[-1:]",
                            "BinOp"
                        ],
                        [
                            "x @ Wo[:-1] + Wo[-1:] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ],
                        [
                            "x @ ((1 - mask) * whole_matrix[:N]).t() + output_bias[None, :] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_319": {
                "input": {
                    "value": "wi_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi[arng // B, arng]",
                            "Subscript"
                        ],
                        [
                            "whole_matrix[arng // B, arng]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_320": {
                "input": {
                    "value": "-output_diag",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_331": {
                "input": {
                    "value": "j_diag + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_72": {
                "input": {
                    "value": "x[i] - x[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_89": {
                "*size": {
                    "value": "N * Bs[i] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N * Bs[i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.kron(np.triu(np.ones([N, N])), np.ones([Bs[i], Bs[i + 1]]))",
                            "Call"
                        ],
                        [
                            "np.concatenate([M, np.ones([1, N * Bs[i + 1]])])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(M).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_157": {
                "input": {
                    "value": "Wi[arng // B, arng]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_158": {
                "input": {
                    "value": "Wo[arng, arng // B]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_268": {
                "input": {
                    "value": "Wi[arng // B, arng]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_269": {
                "input": {
                    "value": "Wo[arng, arng // B]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_306": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "whole_matrix.shape[0] - 3",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "whole_matrix.shape[0] - 3",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "whole_matrix.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_129": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_189": {
                "input": {
                    "value": "wi_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wi[arng // B, arng]",
                            "Subscript"
                        ],
                        [
                            "whole_matrix[arng // B, arng]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_190": {
                "input": {
                    "value": "wo_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wo[arng, arng // B]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_235": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_295": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - y * y",
                            "BinOp"
                        ],
                        [
                            "torch.rsqrt(x * x + 1)",
                            "Call"
                        ],
                        [
                            "d * d * d",
                            "BinOp"
                        ],
                        [
                            "torch.rsqrt(x * x + 1)",
                            "Call"
                        ],
                        [
                            "d * d * d",
                            "BinOp"
                        ],
                        [
                            "1 / (1 + torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "1 - y * y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_365": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_129": {
                "input": {
                    "value": "torch.abs(j_diag) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_294": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "x @ W[:-1] + W[-1:]",
                            "BinOp"
                        ],
                        [
                            "x @ Wo[:-1] + Wo[-1:] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ],
                        [
                            "x @ ((1 - mask) * whole_matrix[:N]).t() + output_bias[None, :] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_295": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x @ W[:-1] + W[-1:])",
                            "Call"
                        ],
                        [
                            "x @ W[:-1] + W[-1:]",
                            "BinOp"
                        ],
                        [
                            "x @ Wo[:-1] + Wo[-1:] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ],
                        [
                            "x @ ((1 - mask) * whole_matrix[:N]).t() + output_bias[None, :] + torch.sum((x * delta_wo_diag[None, :]).view(-1, N, B), dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.flip(x, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "slogdet_49": {
                "input": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws[-1][:-1].repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(nonl_derivatives[i].view(batch_size, 1, -1) * Ws[i][:-1].repeat(batch_size, 1, 1), J)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_129": {
                "input": {
                    "value": "j_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, N, 1, 1, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(j_diag, current_j_diag)",
                            "Call"
                        ],
                        [
                            "torch.matmul(j_diag, diag_matrices[None, :, :, :])",
                            "Call"
                        ],
                        [
                            "(wi_diag + delta_wi_diag)[None, :] * derivative * (wo_diag + delta_wo_diag)[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(j_diag.view(-1, N, B), dim=2)",
                            "Call"
                        ],
                        [
                            "(wi_diag + delta_wi_diag)[None, :] * derivative * delta_wo_diag[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(j_diag.view(-1, N, B), dim=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}