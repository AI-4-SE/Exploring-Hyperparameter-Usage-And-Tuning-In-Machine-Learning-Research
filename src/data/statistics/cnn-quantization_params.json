{
    "pytorch_quantizer/quantization/kmeans_quantization.py": {
        "sklearn": {
            "KMeans_17": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2 ** num_bits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KMeans_27": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2 ** num_bits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "np[1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "quantize1d_kmeans(np[1].detach().numpy(), num_bits=num_bits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "np[1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "clip1d_kmeans(np[1].detach().numpy(), num_bits=num_bits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "model_qkmeans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'models')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_path, arch + '_kmeans%dbit.pt' % num_bits)",
                            "Call"
                        ],
                        [
                            "model_path.split('.')[0] + '_bcorr.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "model_bcorr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model_qkmeans)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'models')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_path, arch + '_kmeans%dbit.pt' % num_bits)",
                            "Call"
                        ],
                        [
                            "model_path.split('.')[0] + '_bcorr.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "inference/inference_sim.py": {
        "torch": {
            "manual_seed_127": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_203": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose(tfs))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True if args.kld_threshold or args.aciq_cal or args.shuffle else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ShuffleNet_1g8_Top1_67.408_Top5_87.258.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.device_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_148": {
                "device": {
                    "value": "args.device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "self.model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.device_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_200": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.device_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_147": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kernels/build_int_quantization.py": {
        "torch": {}
    },
    "pytorch_quantizer/clipping/clipping_manager.py": {
        "torch": {
            "max_54": {
                "variable": {
                    "value": "maxabs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor.max())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_34": {
                "variable": {
                    "value": "maxabs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor.max())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(tensor, lower_bound, upper_bound)",
                            "Call"
                        ],
                        [
                            "torch.clamp(tensor, lower_bound, upper_bound)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-maxabs * self.rho",
                            "BinOp"
                        ],
                        [
                            "-maxabs * self.rho",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxabs * self.rho",
                            "BinOp"
                        ],
                        [
                            "maxabs * self.rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(tensor, lower_bound, upper_bound)",
                            "Call"
                        ],
                        [
                            "torch.clamp(tensor, lower_bound, upper_bound)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-maxabs * self.rho",
                            "BinOp"
                        ],
                        [
                            "-maxabs * self.rho",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxabs * self.rho",
                            "BinOp"
                        ],
                        [
                            "maxabs * self.rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_54": {
                "input": {
                    "value": "tensor.min()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_34": {
                "input": {
                    "value": "tensor.min()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_quantizer/quantization/inference/angle_stats.py": {
        "torch": {
            "acos_19": {
                "input": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_sim(x, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_quantizer/quantization/inference/distance_stats.py": {
        "torch": {
            "sum_28": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_quantizer/quantization/inference/inference_quantization_manager.py": {
        "torch": {
            "tensor_159": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1e-08]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_381": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1e-08]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ReLUWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "super(MaxPool2dWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, out_id, 'activation_pooling', stat_id=out_id, verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, out_id, 'activation_pooling', verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "super(AvgPool2dWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, tag_act, stat_id=out_id, verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, tag_act, verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "super(Conv2dWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "super(Conv2dWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, activation_id, tag_act, half_range=hasattr(self, 'before_relu'), verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "out_q",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.relu(out)",
                            "Call"
                        ],
                        [
                            "super(LinearWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "super(LinearWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "out_q",
                            "variable"
                        ],
                        [
                            "QMI().quantize_instant(out, activation_id, tag_act, half_range=half_range, verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "super(BatchNorm2dWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "super(BatchNorm2dWithId, self).forward(input)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, 'activation', stat_id=activation_id, half_range=hasattr(self, 'before_relu'), verbose=QMI().verbose)",
                            "Call"
                        ],
                        [
                            "QMI().quantize_instant(out, 'activation', half_range=hasattr(self, 'before_relu'), verbose=QMI().verbose)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_quantizer/quantization/inference/measure_statistics.py": {
        "torch": {
            "norm_27": {
                "variable": {
                    "value": "eps_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - y_n",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "t_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_.view(y_.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_36": {
                "variable": {
                    "value": "t_n_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_with_noise.view(y_with_noise.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "eps_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(eps - eps_mean.unsqueeze(-1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_58": {
                "variable": {
                    "value": "w_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w - w_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_62": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x_mean.unsqueeze(-1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_.view(x_.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "y_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y - y_mean.unsqueeze(-1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_92": {
                "variable": {
                    "value": "y_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_.view(y_.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "y * y_n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_quantizer/quantization/inference/statistic_manager.py": {
        "torch": {
            "mean_56": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "((t - t.mean()) / t.std()) ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(t - t.mean())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "t - t.mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_68": {
                "input": {
                    "value": "tensor.view(tensor.shape[0], -1).max(dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_74": {
                "input": {
                    "value": "tensor.view(tensor.shape[0], -1).min(dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(t - t_q) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_94": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(t - t_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "t - t_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_109": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_sim(t, t_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_quantizer/quantization/inference/statistic_manager_perchannel.py": {
        "torch": {
            "std_55": {
                "variable": {
                    "value": "std_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.stats[l][s]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(t - mean_.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "((t - mean_.unsqueeze(-1)) / std_.unsqueeze(-1)) ** 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_60": {
                "input": {
                    "value": "t - mean_.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "t_relu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.stats[l][s]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "std_65": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_relu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.relu(t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "tensor.view(tensor.shape[0], tensor.shape[1], -1).max(dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "((t_orig - t_q) ** 2).view(t_orig.shape[0], t_orig.shape[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "tensor.view(tensor.shape[0], tensor.shape[1], -1).min(dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_79": {
                "input": {
                    "value": "tensor.view(tensor.shape[0], tensor.shape[1], -1).min(dim=-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_quantizer/quantization/qtypes/int_quantizer.py": {
        "torch": {
            "where_198": {
                "variable": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "omega > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "rng / omega",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tensor.new_tensor([np.finfo(np.float32).max])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_489": {
                "variable": {
                    "value": "maxabs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.detach().abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_566": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta / (qmax - qmin)",
                            "BinOp"
                        ],
                        [
                            "torch.where(qmax > 0, delta / (qmax - qmin), torch.tensor([0.0]).to(tensor.device))",
                            "Call"
                        ],
                        [
                            "torch.max(scale, torch.tensor([1e-08]).to(tensor.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.detach().transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.detach().transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], -1) if avg_over_batch else tensor.view(-1)",
                            "IfExp"
                        ],
                        [
                            "tensor.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], tensor.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_192": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor - mu.unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_213": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mid_tread_quantize_activation_per_channel(tensor, id)",
                            "Call"
                        ],
                        [
                            "tensor / Delta.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.min(out, c_max.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.max(out, c_min.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_214": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mid_tread_quantize_activation_per_channel(tensor, id)",
                            "Call"
                        ],
                        [
                            "tensor / Delta.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.min(out, c_max.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.max(out, c_min.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_281": {
                "variable": {
                    "value": "mean_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_564": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "qmax > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "delta / (qmax - qmin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor([0.0]).to(tensor.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_572": {
                "variable": {
                    "value": "zero_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_zero_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qmin - offset / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_573": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_574": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "zero_point.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_576": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "-offset.unsqueeze(-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_577": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_583": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output.gt(qmax)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "qmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 ** self.num_bits - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 ** bit_alloc - 1.0",
                            "BinOp"
                        ],
                        [
                            "qmax.view(qmax.numel(), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_591": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "-zero_point.unsqueeze(-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_592": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_594": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_595": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tq.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc, measure_entropy=self.measure_entropy)",
                            "Call"
                        ],
                        [
                            "output.view(C, N, H, W).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.__gemmlowpQuantize1__(t, max_ - min_, min_, bit_alloc=bit_alloc)",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, -offset.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.div(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.where(output.gt(qmax), qmax, output)",
                            "Call"
                        ],
                        [
                            "torch.add(output, -zero_point.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.mul(output, scale.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "torch.add(output, offset.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "offset.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_388": {
                "input": {
                    "value": "torch.log2(bin_alloc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_388": {
                "input": {
                    "value": "torch.log2(bin_alloc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_526": {
                "variable": {
                    "value": "stats_dict[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "stats_dict[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_553": {
                "variable": {
                    "value": "stats_dict[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "stats_dict[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_566": {
                "data": {
                    "value": "[1e-08]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_192": {
                "input": {
                    "value": "tensor - mu.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_388": {
                "input": {
                    "value": "bin_alloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B * p / p.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_564": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_194": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.mean(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_208": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.mean(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_548": {
                "variable": {
                    "value": "stats_dict[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(t - t.mean(dim=-1).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_550": {
                "variable": {
                    "value": "stats_dict[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.detach().transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.detach().transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], -1) if avg_over_batch else tensor.view(-1)",
                            "IfExp"
                        ],
                        [
                            "tensor.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], tensor.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_521": {
                "input": {
                    "value": "torch.abs(t - t.mean())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_548": {
                "input": {
                    "value": "t - t.mean(dim=-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_521": {
                "input": {
                    "value": "t - t.mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "std_523": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.detach().transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.detach().transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], -1) if avg_over_batch else tensor.view(-1)",
                            "IfExp"
                        ],
                        [
                            "tensor.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "t.view(t.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "tensor.view(tensor.shape[0], tensor.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_quantizer/quantization/quantization_manager.py": {
        "torch": {}
    },
    "utils/absorb_bn.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_9": {
                "variable": {
                    "value": "module.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(module.out_channels).zero_().type(w.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "module.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_20": {
                "*size": {
                    "value": "module.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/attacher.py": {
        "torch": {}
    },
    "utils/dataset.py": {
        "torch": {
            "is_tensor_51": {
                "obj": {
                    "value": "items[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.dataset[i][0] for i in idx_per_class]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(items)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_15": {
                "ndarray": {
                    "value": "choice(self.num_samples, self.num_samples, replace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dump_manager.py": {
        "torch": {}
    },
    "utils/entropy.py": {
        "torch": {
            "empty_cache_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_10": {
                "input": {
                    "value": "t.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log2_14": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pk.float() / pk.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unique_32": {
                "input": {
                    "value": "t.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/log.py": {
        "torch": {
            "save_234": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/mark_relu.py": {
        "torch": {}
    },
    "utils/meters.py": {
        "torch": {
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "sum_26": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "torch.sum(dot, dim=d)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims",
                            "variable"
                        ],
                        [
                            "dims",
                            "variable"
                        ],
                        [
                            "dims",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_29": {
                "variable": {
                    "value": "norm_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(norm_x, dim=d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_32": {
                "variable": {
                    "value": "norm_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(norm_y, dim=d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "norm_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(torch.sum(norm_x, dim=d))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims",
                            "variable"
                        ],
                        [
                            "dims",
                            "variable"
                        ],
                        [
                            "dims",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_32": {
                "input": {
                    "value": "norm_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(torch.sum(norm_y, dim=d))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dims",
                            "variable"
                        ],
                        [
                            "dims",
                            "variable"
                        ],
                        [
                            "dims",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_naming.py": {
        "torch": {}
    },
    "utils/monitor.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "self.observed_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dump_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "self.observed_operations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dump_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optim.py": {
        "torch": {
            "SGD_35": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/preprocess.py": {
        "torch": {
            "randperm_183": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}