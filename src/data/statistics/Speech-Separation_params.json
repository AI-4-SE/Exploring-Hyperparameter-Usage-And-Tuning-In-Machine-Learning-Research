{
    "src/analysis/dim_reduce_spectrogram.py": {
        "sklearn": {
            "IncrementalPCA_28": {
                "variable": {
                    "value": "i_pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/loader/data_loader.py": {
        "torch": {
            "DataLoader_105": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AVDataset(args.train_path, all_embed_saved=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AVDataset(args.val_path, all_embed_saved=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_78": {
                "variable": {
                    "value": "mixed_signal_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "mixed_signal_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixed_signal_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor(mixed_signal)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mixed_signal_tensor, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "audio_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_tensors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[i.transpose(0, 2) for i in audio_tensors]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(audio_tensors)",
                            "Call"
                        ],
                        [
                            "audio_tensors.permute(1, 2, 3, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_signals[i].get_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "spectrogram",
                    "type": "Call",
                    "possible_values": [
                        [
                            "all_signals[i].get_spec()",
                            "Call"
                        ],
                        [
                            "convert_to_spectrogram(all_signals[i].get_audio())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/loader/frames.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "cpu_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "result_cropped_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result_cropped_tensors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(result_cropped_tensors)",
                            "Call"
                        ],
                        [
                            "result_cropped_tensors.to(device)",
                            "Call"
                        ],
                        [
                            "result_cropped_tensors.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "cropped_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 160, 160)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loader/generate_video_embedding.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/models.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((1, 7), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((7, 1), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (4, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (8, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(8, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (16, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(16, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (32, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(32, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (2, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (4, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (8, 8))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (16, 16))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 5), (32, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((1, 1), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "variable": {
                    "value": "self.batch_norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.batch_norm5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "variable": {
                    "value": "self.batch_norm6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.batch_norm7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.batch_norm8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.batch_norm9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.batch_norm10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "variable": {
                    "value": "self.batch_norm11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self.batch_norm11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.batch_norm12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "variable": {
                    "value": "self.batch_norm13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "self.batch_norm14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.batch_norm15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm1(self.conv1(input_audio))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm2(self.conv2(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm3(self.conv3(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm4(self.conv4(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_162": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm5(self.conv5(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm6(self.conv6(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm7(self.conv7(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_168": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm8(self.conv8(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm9(self.conv9(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm10(self.conv10(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm11(self.conv11(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm12(self.conv12(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm13(self.conv13(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm14(self.conv14(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm15(self.conv15(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((7, 1), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 1), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 1), (2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 1), (4, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 1), (8, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(8, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.get_padding((5, 1), (16, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(16, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_214": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.batch_norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "variable": {
                    "value": "self.batch_norm5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_217": {
                "variable": {
                    "value": "self.batch_norm6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_231": {
                "variable": {
                    "value": "input_video",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_video",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_video.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input_video, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_234": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm1(self.conv1(input_video))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_236": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm2(self.conv2(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_238": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm3(self.conv3(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_240": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm4(self.conv4(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_242": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm5(self.conv5(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_244": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm6(self.conv6(output_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_248": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.batch_norm1(self.conv1(input_audio)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.conv2(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.conv3(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm4(self.conv4(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm5(self.conv5(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm6(self.conv6(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm7(self.conv7(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm8(self.conv8(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm9(self.conv9(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm10(self.conv10(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm11(self.conv11(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm12(self.conv12(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm13(self.conv13(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm14(self.conv14(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm15(self.conv15(output_layer)))",
                            "Call"
                        ],
                        [
                            "output_layer.transpose(-1, -2).reshape((batch_size, -1, height, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.conv1(input_video)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.conv2(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.conv3(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm4(self.conv4(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm5(self.conv5(output_layer)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm6(self.conv6(output_layer)))",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(output_layer, size=(298, 1), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(298, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_268": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_277": {
                "variable": {
                    "value": "self.complex_mask_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 257 * self.num_person",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_280": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.drop3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_284": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "298",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_285": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "298",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_286": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "298",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "mixed_av",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "AVFusion",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[audio_out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_304": {
                "variable": {
                    "value": "mixed_av",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixed_av",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(AVFusion, dim=1)",
                            "Call"
                        ],
                        [
                            "mixed_av.squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mixed_av, 1, 2)",
                            "Call"
                        ],
                        [
                            "mixed_av[..., :400] + mixed_av[..., 400:]",
                            "BinOp"
                        ],
                        [
                            "self.batch_norm1(F.relu(self.fc1(mixed_av)))",
                            "Call"
                        ],
                        [
                            "self.drop1(mixed_av)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(F.relu(self.fc2(mixed_av)))",
                            "Call"
                        ],
                        [
                            "self.drop2(mixed_av)",
                            "Call"
                        ],
                        [
                            "self.batch_norm3(F.relu(self.fc3(mixed_av)))",
                            "Call"
                        ],
                        [
                            "self.drop3(mixed_av)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_319": {
                "variable": {
                    "value": "complex_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.complex_mask_layer(mixed_av)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "output_audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "complex_mask.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_39": {
                "input": {
                    "value": "-C * M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "-C * M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "numerator / denominator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_310": {
                "input": {
                    "value": "self.fc1(mixed_av)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_313": {
                "input": {
                    "value": "self.fc2(mixed_av)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_316": {
                "input": {
                    "value": "self.fc3(mixed_av)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/plot_spec.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/predict.py": {
        "torch": {
            "from_numpy_24": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "Call",
                    "possible_values": [
                        [
                            "convert_to_spectrogram(audio)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(audio.transpose(2, 1, 0), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio)",
                            "Call"
                        ],
                        [
                            "audio.to(device)",
                            "Call"
                        ],
                        [
                            "convert_to_spectrogram(audio_path)",
                            "Call"
                        ],
                        [
                            "librosa.load(audio_path, sr=16000)[0]",
                            "Subscript"
                        ],
                        [
                            "np.load(audio_path)",
                            "Call"
                        ],
                        [
                            "_preprocess_audio(audio)",
                            "Call"
                        ],
                        [
                            "row[-1]",
                            "Subscript"
                        ],
                        [
                            "Path(audio)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_124": {
                "variable": {
                    "value": "load",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_155": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trange(args.n)",
                            "Call"
                        ],
                        [
                            "range(output.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_157": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "Adam_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_24": {
                "variable": {
                    "value": "sum_mtr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "sum_mtr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_mtr.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "AVFusion(num_person=args.input_audio_size, device=device).train()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "AVFusion(num_person=args.input_audio_size).train()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train/callbacks.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "(output_audio - true_audio) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/metric_utils.py": {
        "torch": {
            "log10_23": {
                "input": {
                    "value": "true_power / inter_power",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/trainer.py": {
        "torch": {
            "CyclicLR_40": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "config.learning_rate * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step_size_up": {
                    "value": "4 * len(train_loader)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "triangular",
                    "type": "Constant",
                    "possible_values": []
                },
                "cycle_momentum": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/validate.py": {
        "torch": {
            "zeros_like_26": {
                "variable": {
                    "value": "sum_mtr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_32": {
                "variable": {
                    "value": "sum_mtr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_mtr.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}