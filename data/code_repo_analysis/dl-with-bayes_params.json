{
    "toy_example/main.py": {
        "sklearn": {
            "make_blobs_61": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_samples",
                            "Attribute"
                        ]
                    ]
                },
                "n_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.centers",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.random_state",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "data_meshgrid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.c_[xx.ravel(), yy.ravel()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "X_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_blobs(n_samples=n_samples, n_features=2, centers=centers, random_state=random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_blobs(n_samples=n_samples, n_features=2, centers=centers, random_state=random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_74": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(X_tensor, y_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model1.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_262": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features, out_features) for (in_features, out_features) in features]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(h)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(out).view([-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_117": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(data)",
                            "Call"
                        ],
                        [
                            "model2(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_124": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(data)",
                            "Call"
                        ],
                        [
                            "model2(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_158": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model1(data_meshgrid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_160": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(model1(data_meshgrid)).view(xx.shape)",
                            "Call"
                        ],
                        [
                            "optimizer2.prediction(data_meshgrid, keep_probs=True)",
                            "Call"
                        ],
                        [
                            "prob.view(xx.shape)",
                            "Call"
                        ],
                        [
                            "optimizer2.prediction(data_meshgrid, mc=0).view(xx.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_181": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(model1(data_meshgrid)).view(xx.shape)",
                            "Call"
                        ],
                        [
                            "optimizer2.prediction(data_meshgrid, keep_probs=True)",
                            "Call"
                        ],
                        [
                            "prob.view(xx.shape)",
                            "Call"
                        ],
                        [
                            "optimizer2.prediction(data_meshgrid, mc=0).view(xx.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_225": {
                "input": {
                    "value": "1 - prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_173": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "input": {
                    "value": "xx.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "classification/main.py": {
        "torch": {
            "device_93": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(root=args.root, train=True, download=args.download, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(root=args.root, train=False, download=args.download, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_194": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_302": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.step(closure=closure)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "optimizer.prediction(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_286": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.step(closure=closure)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "optimizer.prediction(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_305": {
                "variable": {
                    "value": "top1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(prob, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.out, 'epoch{}.ckpt'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_304": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(prob, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_371": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.step(closure=closure)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "optimizer.prediction(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "classification/models/alexnet.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv1(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv2(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv3(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv4(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv5(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_51": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_53": {
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_54": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_55": {
                "input": {
                    "value": "self.conv5(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "classification/models/lenet.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_17": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc2(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc2(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv1(x), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc2(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv2(out), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc2(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc1(out), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc2(out), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_77": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc2(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc2(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.fc1(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_37": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_39": {
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_42": {
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_43": {
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "classification/models/mlp.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "classification/models/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "classification/models/vgg.py": {
        "torch": {
            "randn_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distributed/classification/main.py": {
        "torch": {
            "device_count_129": {
                "variable": {
                    "value": "n_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_225": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=train_root, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dataset_class(root=args.root, train=True, download=args.download, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_data_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size / size_data_group",
                            "BinOp"
                        ],
                        [
                            "size",
                            "variable"
                        ]
                    ]
                },
                "rank": {
                    "value": "data_group_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank % num_data_group",
                            "BinOp"
                        ],
                        [
                            "rank",
                            "variable"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=train_root, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "dataset_class(root=args.root, train=True, download=args.download, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset, num_replicas=num_data_group, rank=data_group_id)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_232": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=val_root, transform=val_transform)",
                            "Call"
                        ],
                        [
                            "dataset_class(root=args.root, train=False, download=args.download, transform=val_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=val_root, transform=val_transform)",
                            "Call"
                        ],
                        [
                            "dataset_class(root=args.root, train=False, download=args.download, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_131": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank % n_per_node",
                            "BinOp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_333": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_468": {
                "variable": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_263": {
                "tensor": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_458": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.step(closure=closure)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_541": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_421": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.out, 'epoch{}.ckpt'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_546": {
                "input": {
                    "value": "torch.log(prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_546": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.prediction(data)",
                            "Call"
                        ],
                        [
                            "model.mc_prediction(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_550": {
                "input": {
                    "value": "torch.log(prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_554": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.step(closure=closure)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_550": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.prediction(data)",
                            "Call"
                        ],
                        [
                            "model.mc_prediction(data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distributed/classification/models/alexnet.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv1(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv2(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv3(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv4(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv5(x), p=dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv3(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv4(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv5(x), p=dropout_ratio), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_77": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_79": {
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_80": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_81": {
                "input": {
                    "value": "self.conv5(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "distributed/classification/models/lenet.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_17": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc3(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc3(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv1(x), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc3(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.conv2(out), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc3(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc1(out), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc2(out), p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_77": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc3(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv1(x), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.conv2(out), p))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc1(out), p))",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(self.fc2(out), p))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.fc3(out), p)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.fc1(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc2(out)))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.fc1(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_37": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_39": {
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_42": {
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_43": {
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "distributed/classification/models/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distributed/classification/models/resnet_b.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_125": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_134": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "distributed/classification/models/resnext.py": {
        "torch": {
            "randn_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "cardinality",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cardinality * bottleneck_width * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * group_width, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distributed/classification/models/vgg.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_1(self.conv1_1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_2(self.conv1_2(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_83": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_1(self.conv2_1(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_2(self.conv2_2(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_86": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_1(self.conv3_1(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_2(self.conv3_2(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_3(self.conv3_3(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_4(self.conv3_4(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_91": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_1(self.conv4_1(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_2(self.conv4_2(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_3(self.conv4_3(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_4(self.conv4_4(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_96": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_1(self.conv5_1(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_2(self.conv5_2(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_3(self.conv5_3(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_4(self.conv5_4(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_101": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_1(F.dropout(self.conv1_1(x), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1_2(F.dropout(self.conv1_2(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_118": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_1(F.dropout(self.conv2_1(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_2(F.dropout(self.conv2_2(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_121": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_1(F.dropout(self.conv3_1(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_2(F.dropout(self.conv3_2(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_3(F.dropout(self.conv3_3(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3_4(F.dropout(self.conv3_4(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_126": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_1(F.dropout(self.conv4_1(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_2(F.dropout(self.conv4_2(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_3(F.dropout(self.conv4_3(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4_4(F.dropout(self.conv4_4(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_131": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_1(F.dropout(self.conv5_1(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_2(F.dropout(self.conv5_2(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_3(F.dropout(self.conv5_3(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5_4(F.dropout(self.conv5_4(h), p))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_136": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1_1(self.conv1_1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(self.conv1_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(self.conv2_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(self.conv2_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(self.conv3_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(self.conv3_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(self.conv3_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(self.conv3_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(self.conv4_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(self.conv4_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(self.conv4_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(self.conv4_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(self.conv5_1(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(self.conv5_2(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(self.conv5_3(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(self.conv5_4(h)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_1(F.dropout(self.conv1_1(x), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1_2(F.dropout(self.conv1_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_1(F.dropout(self.conv2_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2_2(F.dropout(self.conv2_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_1(F.dropout(self.conv3_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_2(F.dropout(self.conv3_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_3(F.dropout(self.conv3_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3_4(F.dropout(self.conv3_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_1(F.dropout(self.conv4_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_2(F.dropout(self.conv4_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_3(F.dropout(self.conv4_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4_4(F.dropout(self.conv4_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_1(F.dropout(self.conv5_1(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_2(F.dropout(self.conv5_2(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_3(F.dropout(self.conv5_3(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5_4(F.dropout(self.conv5_4(h), p)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_38": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_116": {
                "input": {
                    "value": "self.conv1_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_117": {
                "input": {
                    "value": "self.conv1_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_119": {
                "input": {
                    "value": "self.conv2_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "input": {
                    "value": "self.conv2_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_122": {
                "input": {
                    "value": "self.conv3_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_123": {
                "input": {
                    "value": "self.conv3_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_124": {
                "input": {
                    "value": "self.conv3_3(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_125": {
                "input": {
                    "value": "self.conv3_4(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_127": {
                "input": {
                    "value": "self.conv4_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_128": {
                "input": {
                    "value": "self.conv4_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_129": {
                "input": {
                    "value": "self.conv4_3(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_130": {
                "input": {
                    "value": "self.conv4_4(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_132": {
                "input": {
                    "value": "self.conv5_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_133": {
                "input": {
                    "value": "self.conv5_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_134": {
                "input": {
                    "value": "self.conv5_3(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_135": {
                "input": {
                    "value": "self.conv5_4(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_ratio",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}