{
    "src/referit/models/referit_film_network.py": {
        "tensorflow": {
            "placeholder_23": {
                "variable": {
                    "value": "self._is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_26": {
                "variable": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self._is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(dropout_keep_scalar)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self._question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self._seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self._answer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, no_answers]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "answer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfc_layers.embed_sequence(ids=self._question, vocab_size=no_words, embed_dim=config['question']['word_embedding_dim'], scope='word_embedding', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb, self._glove], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(word_emb, dropout_keep)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._is_training, lambda : tf.constant(dropout_keep_scalar), lambda : tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_211": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self._answer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "answer_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_215": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predicted_answer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_217": {
                "variable": {
                    "value": "self.success",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self._answer, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self._glove",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "glove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[word_emb, self._glove]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self._category",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "category",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "cat_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cat_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfc_layers.embed_sequence(ids=self._category, vocab_size=config['category']['n_categories'] + 1, embed_dim=config['category']['embedding_dim'], scope='category_embedding', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(cat_emb, dropout_keep)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._is_training, lambda : tf.constant(dropout_keep_scalar), lambda : tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self._spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "spatial",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "spatial_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spatial_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfc_layers.fully_connected(self._spatial, num_outputs=config['spatial']['no_mlp_units'], activation_fn=tf.nn.relu, reuse=reuse, scope='spatial_upsampling')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(spatial_emb, dropout_keep)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._is_training, lambda : tf.constant(dropout_keep_scalar), lambda : tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_192": {
                "variable": {
                    "value": "self.classifier_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.classifier_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "self.hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._is_training, lambda : tf.constant(dropout_keep_scalar), lambda : tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_220": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self._answer, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.accuracy, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_223": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "visual_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + config[visual_str]['dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "visual_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['image', 'crop']",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_217": {
                "input": {
                    "value": "self._answer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_27": {
                "value": {
                    "value": "dropout_keep_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(config['dropout_keep_prob'])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_28": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "visual_features.get_shape()[:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_mask'.format(visual_str)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, visual_features.get_shape()[:3], name='{}_mask'.format(visual_str))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_220": {
                "input": {
                    "value": "self._answer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "visual_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['image', 'crop']",
                            "List"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "'{}_modulation'.format(visual_str)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "'{}_pooling'.format(visual_str)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "'{}_film_input'.format(visual_str)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "flat_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, visual_features.get_shape()[:3], name='{}_mask'.format(visual_str))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, mask_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "'{}_reading_cell'.format(visual_str)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "'{}_film_stack'.format(visual_str)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_152": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/referit/preprocess_data/extract_image_features.py": {
        "tensorflow": {
            "placeholder_58": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.img_size, args.img_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.img_size, args.img_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "crop",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/referit/train/train_referit.py": {
        "tensorflow": {
            "Saver_94": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_96": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.gpu_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_98": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_98": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.gpu_ratio)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}