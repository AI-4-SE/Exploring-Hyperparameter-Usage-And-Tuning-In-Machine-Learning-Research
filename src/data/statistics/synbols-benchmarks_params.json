{
    "classification/models.py": {
        "sklearn": {},
        "torch": {
            "Adam_32": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(join(pretrained_weights_folder, exp, 'exp_dict.json'))",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_35": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.min_lr / 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_42": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_144": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_178": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_109": {
                "enabled": {
                    "value": "self.exp_dict['amp'] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "autocast_140": {
                "enabled": {
                    "value": "self.exp_dict['amp'] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "autocast_172": {
                "enabled": {
                    "value": "self.exp_dict['amp'] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(pretrained_weights_folder, exp, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_112": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detection/src/datasets/__init__.py": {
        "sklearn": {},
        "torch": {}
    },
    "few_shot/models/MAML.py": {
        "sklearn": {},
        "torch": {
            "ReduceLROnPlateau_30": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "exp_dict['patience']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_21": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_60": {
                "variable": {
                    "value": "support_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "query_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_65": {
                "variable": {
                    "value": "inner_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.inner_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_124": {
                "variable": {
                    "value": "support_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "query_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_129": {
                "variable": {
                    "value": "inner_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.inner_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_81": {
                "variable": {
                    "value": "qry_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnet(query_set.view(qs * nclasses, c, h, w))",
                            "Call"
                        ],
                        [
                            "fnet(query_set.view(qs * nclasses, c, h, w))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "query_relative_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['query_size'], 1).cuda().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['query_size'], 1).cuda().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_146": {
                "variable": {
                    "value": "qry_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnet(query_set.view(qs * nclasses, c, h, w))",
                            "Call"
                        ],
                        [
                            "fnet(query_set.view(qs * nclasses, c, h, w))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "query_relative_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['query_size'], 1).cuda().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['query_size'], 1).cuda().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_77": {
                "variable": {
                    "value": "spt_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spt_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnet(support_set.view(ss * nclasses, c, h, w)).view(ss * nclasses, -1)",
                            "Call"
                        ],
                        [
                            "fnet(support_set.view(ss * nclasses, c, h, w)).view(ss * nclasses, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "support_relative_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['support_size'], 1).cuda().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['support_size'], 1).cuda().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_140": {
                "variable": {
                    "value": "spt_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spt_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnet(support_set.view(ss * nclasses, c, h, w)).view(ss * nclasses, -1)",
                            "Call"
                        ],
                        [
                            "fnet(support_set.view(ss * nclasses, c, h, w)).view(ss * nclasses, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "support_relative_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['support_size'], 1).cuda().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.arange(episode['nclasses']).view(1, -1).repeat(episode['support_size'], 1).cuda().view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "few_shot/models/ProtoNet.py": {
        "sklearn": {},
        "torch": {
            "ReduceLROnPlateau_26": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "exp_dict['patience']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_17": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_56": {
                "variable": {
                    "value": "support_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_57": {
                "variable": {
                    "value": "query_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_66": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prototype_distance(support_embeddings, query_embeddings, support_relative_labels)",
                            "Call"
                        ],
                        [
                            "prototype_distance(support_embeddings, query_embeddings, support_relative_labels)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "query_relative_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_104": {
                "variable": {
                    "value": "support_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_105": {
                "variable": {
                    "value": "query_relative_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_112": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prototype_distance(support_embeddings, query_embeddings, support_relative_labels)",
                            "Call"
                        ],
                        [
                            "prototype_distance(support_embeddings, query_embeddings, support_relative_labels)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "query_relative_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "generation/models/__init__.py": {
        "sklearn": {},
        "torch": {}
    },
    "generation/utils/metrics.py": {
        "sklearn": {
            "LinearSVC_28": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearSVC_111": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "active_learning/active_learning.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.backbone.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone.classifier[-1].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "exp_dict['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_69": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "active_learning/datasets/synbols.py": {
        "torch": {}
    },
    "active_learning/trainval.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset('train', exp_dict['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x if exp_dict['batch_size'] == 1 else default_collate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset('test', exp_dict['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: x if exp_dict['batch_size'] == 1 else default_collate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_dict.get('seed')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/backbones/__init__.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "backbone.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_dict['num_classes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels[-1] * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "backbone._modules[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "backbone.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_dict['num_classes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "backbone._modules[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "self.channels[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "self.channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "backbone._modules[conv0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*output",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "backbone._modules[features][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*children",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_dict['num_classes']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "classification/backbones/resnet12.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.conv0(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(y))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "variable": {
                    "value": "self.bn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "input": {
                    "value": "y + self.shortcut(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'group_%d' % i)(x, is_support)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, c, h, w)",
                            "Call"
                        ],
                        [
                            "self.up_to_embedding(x, True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_9": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_73": {
                "input": {
                    "value": "self.bn_out(x.mean(3).mean(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "classification/backbones/wrn/models/wide_resnet_cifar.py": {
        "torch": {
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(g2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_76": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn(g2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(o, 8, 1, 0)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(o)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout2d_33": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(y), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(o2, self.dropout, training=self.training, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "classification/backbones/wrn/models/wide_resnet_cifar_attention.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "block_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "widths[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.conv0(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "group2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_g2(self.group_2(group1))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_181": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn_g2(self.group_2(group1)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout2d_60": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(y), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(o2, self.dropout, training=self.training, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "classification/backbones/wrn/modules/attention.py": {
        "torch": {
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nheads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x).view(b, self.nheads, w * h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "variable": {
                    "value": "self.att_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.conv(x).view(b, self.nheads, w * h), 2).view(b, self.nheads, h, w)",
                            "Call"
                        ],
                        [
                            "self.att_head(x).view(b, self.nheads, 1, h * w)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputs, 1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_200": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(outputs, 1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ngates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ngates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.pre_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.pre_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "input": {
                    "value": "self.bn(self.gates(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "input": {
                    "value": "self.bn(self.gates(F.relu(self.pre_bn(self.pre_gates(x)))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "1 - np.eye(self.nheads, self.nheads).reshape(1, self.nheads, self.nheads)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_82": {
                "input": {
                    "value": "mask2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.att_mask.view(self.att_mask.size(0), self.nheads, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mask2loss.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(gates, 1).view(gates.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(gates).view(gates.size(0), -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(gates, 1).view(gates.size(0), -1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(gates).view(gates.size(0), -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_183": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(x).view(b, self.nheads, 1, h * w)",
                            "Call"
                        ],
                        [
                            "(scores * att_mask).sum(3)",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.tanh(scores), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_51": {
                "input": {
                    "value": "self.pre_bn(self.pre_gates(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "classification/datasets.py": {
        "torch": {}
    },
    "classification/trainval.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "exp_dict['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numel_87": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/datasets/synbols.py": {
        "torch": {}
    },
    "detection/src/datasets/transformers/__init__.py": {
        "torch": {
            "squeeze_70": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[-653.2204]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[628.5188]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/datasets/transformers/trans_utils.py": {
        "torch": {
            "tensor_67": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-580.1847, -733.5521, -93.1991]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[478.6256, 281.3584, 117.1486]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "out_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[out_mean[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "out_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[out_std[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - self.mean",
                            "BinOp"
                        ],
                        [
                            "x / self.std",
                            "BinOp"
                        ],
                        [
                            "np.clip(x, self.min, self.max)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "zoom(x, self.zoom, order=self.order)",
                            "Call"
                        ],
                        [
                            "linearInter3Dreg(x, new_shape)",
                            "Call"
                        ],
                        [
                            "nnInter3Dreg(x, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - self.mean",
                            "BinOp"
                        ],
                        [
                            "x / self.std",
                            "BinOp"
                        ],
                        [
                            "np.clip(x, self.min, self.max)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "zoom(x, self.zoom, order=self.order)",
                            "Call"
                        ],
                        [
                            "linearInter3Dreg(x, new_shape)",
                            "Call"
                        ],
                        [
                            "nnInter3Dreg(x, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[mean[window_index[window]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "[std[window_index[window]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_209": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(x_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.from_numpy(self.idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_174": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - self.mean",
                            "BinOp"
                        ],
                        [
                            "x / self.std",
                            "BinOp"
                        ],
                        [
                            "np.clip(x, self.min, self.max)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "zoom(x, self.zoom, order=self.order)",
                            "Call"
                        ],
                        [
                            "linearInter3Dreg(x, new_shape)",
                            "Call"
                        ],
                        [
                            "nnInter3Dreg(x, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.from_numpy(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "ndarray": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.pad(x, ((0, 0), (0, pad), (0, 0), (0, 0)), mode='constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_210": {
                "ndarray": {
                    "value": "self.idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(start_ind, start_ind + self.n)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detection/src/models/__init__.py": {
        "torch": {
            "load_19": {
                "f": {
                    "value": "model_dict['pretrained']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/base_networks/__init__.py": {
        "torch": {}
    },
    "detection/src/models/base_networks/deeplab.py": {
        "torch": {}
    },
    "detection/src/models/base_networks/fcn8_resnet.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "resnet50_32s.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.score_32s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512 * resnet_block_expansion_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.score_16s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256 * resnet_block_expansion_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.score_8s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * resnet_block_expansion_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "logits_upsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_8s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_8s(x)",
                            "Call"
                        ],
                        [
                            "logits_8s + nn.functional.interpolate(logits_16s, size=logits_8s_spatial_dim, mode='bilinear', align_corners=True)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "input_spatial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_92": {
                "input": {
                    "value": "logits_32s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_32s(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "logits_16s_spatial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_16s.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "input": {
                    "value": "logits_16s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_16s(x)",
                            "Call"
                        ],
                        [
                            "logits_16s + nn.functional.interpolate(logits_32s, size=logits_16s_spatial_dim, mode='bilinear', align_corners=True)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "logits_8s_spatial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_8s.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/base_networks/fcn8_vgg16.py": {
        "torch": {
            "MaxPool2d_15": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_f6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout_f7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.scoring_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "variable": {
                    "value": "self.upscore2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "variable": {
                    "value": "self.upscore_pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.upscore8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.score_pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.score_pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/base_networks/infnet.py": {
        "torch": {
            "binary_cross_entropy_with_logits_282": {
                "variable": {
                    "value": "wbce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_285": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "lateral_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lateral_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv4(edge_guidance)",
                            "Call"
                        ],
                        [
                            "F.interpolate(lateral_edge, scale_factor=4, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "lateral_map_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra5_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ParDec(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "crop_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra5_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ParDec(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.ra4_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 8, mode='bilinear'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra4_conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "lateral_map_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.edge_conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.edge_conv2(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra4_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 8, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra3_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 4, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra2_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 2, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_149": {
                "variable": {
                    "value": "crop_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.edge_conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.edge_conv2(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra4_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 8, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra3_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 4, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra2_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 2, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.ra3_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 4, mode='bilinear'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra3_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra3_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_157": {
                "variable": {
                    "value": "lateral_map_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.edge_conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.edge_conv2(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra4_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 8, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra3_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 4, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra2_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 2, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_162": {
                "variable": {
                    "value": "crop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.edge_conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.edge_conv2(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra4_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 8, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra3_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 4, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra2_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 2, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.ra2_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 2, mode='bilinear'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra2_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ra2_conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_171": {
                "variable": {
                    "value": "lateral_map_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.edge_conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.edge_conv2(x)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_4) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 2048, -1, -1).mul(x4)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra4_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 8, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra4_conv4(x))",
                            "Call"
                        ],
                        [
                            "ra4_feat + crop_4",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_3) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 1024, -1, -1).mul(x3)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra3_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 4, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra3_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra3_feat + crop_3",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(crop_2) + 1",
                            "BinOp"
                        ],
                        [
                            "x.expand(-1, 512, -1, -1).mul(x2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.ra2_conv1(x), F.interpolate(edge_guidance, scale_factor=1 / 2, mode='bilinear')), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.ra2_conv3(x))",
                            "Call"
                        ],
                        [
                            "ra2_feat + crop_2",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_239": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "x3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_333": {
                "input": {
                    "value": "torch.stack(self.losses[np.maximum(len(self.losses) - self.num, 0):])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_73": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['images'].cuda()",
                            "Call"
                        ],
                        [
                            "F.upsample(images, size=(trainsize, trainsize), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_74": {
                "variable": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gts.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_281": {
                "input": {
                    "value": "F.avg_pool2d(mask, kernel_size=31, stride=1, padding=15) - mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_333": {
                "tensors": {
                    "value": "self.losses[np.maximum(len(self.losses) - self.num, 0):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_77": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['edges'].cuda()",
                            "Call"
                        ],
                        [
                            "F.upsample(edges, size=(trainsize, trainsize), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_136": {
                "input": {
                    "value": "crop_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(ra5_feat, scale_factor=0.25, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_138": {
                "input": {
                    "value": "edge_guidance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv3(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "input": {
                    "value": "crop_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_152": {
                "input": {
                    "value": "edge_guidance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv3(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "input": {
                    "value": "crop_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_166": {
                "input": {
                    "value": "edge_guidance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv3(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_89": {
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_281": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/base_networks/unet2d.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "diffY",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x2.size()[2] - x1.size()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "diffX",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x2.size()[3] - x1.size()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_59": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ],
                        [
                            "self.inc(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_47": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/base_networks/unet_resnet.py": {
        "torch": {
            "Sequential_6": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.base_layers[:3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.base_layers[3:5]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_30": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, layer3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, layer2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, layer1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, layer0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_original]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_8": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/losses/__init__.py": {
        "torch": {
            "log_softmax_19": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_20": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_26": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_31": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_35": {
                "input": {
                    "value": "probs[:, :, ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[:, ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/losses/density_loss.py": {
        "torch": {
            "sqrt_20": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/models/losses/dice_loss.py": {
        "torch": {}
    },
    "detection/src/models/metrics.py": {
        "torch": {
            "zeros_115": {
                "variable": {
                    "value": "cf2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_119": {
                "variable": {
                    "value": "to_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(nclasses)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cf2.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prediction.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_vector == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_vector == float('inf')",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isnan(confusion_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_vector == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isnan_134": {
                "input": {
                    "value": "confusion_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction / truth",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "detection/src/models/semseg.py": {
        "torch": {
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_182": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['images'].cuda()",
                            "Call"
                        ],
                        [
                            "batch['images']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(image, size=gt.shape[-2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "batch['images']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "gt.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_base.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.99, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_159": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s2",
                            "variable"
                        ],
                        [
                            "F.upsample(res, size=batch['meta'][0]['shape'], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "res > 0.5",
                            "Compare"
                        ],
                        [
                            "self.model_base.forward(image)",
                            "Call"
                        ],
                        [
                            "F.upsample(res, size=batch['meta'][0]['shape'], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "logits.argmax(dim=1).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.predict_on_batch(batch)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "batch['meta'][0]['shape']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_37": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model_base.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_167": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s2",
                            "variable"
                        ],
                        [
                            "F.upsample(res, size=batch['meta'][0]['shape'], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "res > 0.5",
                            "Compare"
                        ],
                        [
                            "self.model_base.forward(image)",
                            "Call"
                        ],
                        [
                            "F.upsample(res, size=batch['meta'][0]['shape'], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "logits.argmax(dim=1).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.predict_on_batch(batch)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "batch['meta'][0]['shape']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_base(images)",
                            "Call"
                        ],
                        [
                            "self.model_base.forward(image)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_102": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_base(images)",
                            "Call"
                        ],
                        [
                            "self.model_base.forward(image)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "points[ind].float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(x.view(n, -1), k=k, dim=-1, largest=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(y, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_130": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['masks'].cuda() * logits",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_131": {
                "input": {
                    "value": "x.view(n, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h * w // 4",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(x.view(n, -1), k=k, dim=-1, largest=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(y, inplace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detection/src/models/semseg_counting.py": {
        "torch": {
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/modules/lcfcn/lcfcn_loss.py": {
        "torch": {
            "softmax_33": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_34": {
                "variable": {
                    "value": "probs_log",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_40": {
                "variable": {
                    "value": "ploss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_points.copy()",
                            "Call"
                        ],
                        [
                            "points.astype(float)",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "np.zeros(blobs.shape).astype('uint8')",
                            "Call"
                        ],
                        [
                            "np.zeros(mask.squeeze().shape)",
                            "Call"
                        ],
                        [
                            "blobs2points(blobs)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(n, k, h * w).max(2)[0].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(k, device=logits.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_283": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_92": {
                "input": {
                    "value": "probs_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor(T).cuda()[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_126": {
                "input": {
                    "value": "probs_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor(T).cuda()[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_144": {
                "input": {
                    "value": "probs_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor(T).cuda()[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "detection/src/utils.py": {
        "torch": {
            "binary_cross_entropy_with_logits_15": {
                "variable": {
                    "value": "wbce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_18": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_54": {
                "variable": {
                    "value": "batch_dict[images]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_dict['images']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "batch_dict[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_dict['masks']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "batch_dict[points]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_dict['points']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "batch_dict[edges]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_dict['edges']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "F.avg_pool2d(mask, kernel_size=31, stride=1, padding=15) - mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_14": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detection/trainval.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_dataset(dataset_dict=exp_dict['dataset'], split='val', datadir=datadir, exp_dict=exp_dict, dataset_size=exp_dict['dataset_size'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ut.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_dataset(dataset_dict=exp_dict['dataset'], split='test', datadir=datadir, exp_dict=exp_dict, dataset_size=exp_dict['dataset_size'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ut.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomSampler_105": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_dataset(dataset_dict=exp_dict['dataset'], split='train', datadir=datadir, exp_dict=exp_dict, dataset_size=exp_dict['dataset_size'])",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2 * len(test_set)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_dataset(dataset_dict=exp_dict['dataset'], split='train', datadir=datadir, exp_dict=exp_dict, dataset_size=exp_dict['dataset_size'])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(train_set, replacement=True, num_samples=2 * len(test_set))",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ut.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "few_shot/datasets/episodic_dataset.py": {
        "torch": {
            "stack_114": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transforms(_images[i]) for i in np.argsort(ordered_argindices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([nclasses * k], dtype=int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "few_shot/datasets/episodic_synbols.py": {
        "torch": {}
    },
    "few_shot/datasets/synbols_loaders.py": {
        "torch": {}
    },
    "few_shot/models/RelationNet.py": {
        "torch": {
            "ReduceLROnPlateau_39": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "exp_dict['patience']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "support_rel_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "query_rel_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eq_86": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_rel_labels.unsqueeze(0).expand(qs * nclasses, -1)",
                            "Call"
                        ],
                        [
                            "support_rel_labels.unsqueeze(0).expand(qs * nclasses, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "query_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_rel_labels.unsqueeze(1).expand(-1, ss * nclasses)",
                            "Call"
                        ],
                        [
                            "query_rel_labels.unsqueeze(1).expand(-1, ss * nclasses)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_128": {
                "variable": {
                    "value": "support_rel_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_130": {
                "variable": {
                    "value": "query_rel_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "episode['nclasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eq_141": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_rel_labels.unsqueeze(0).expand(qs * nclasses, -1)",
                            "Call"
                        ],
                        [
                            "support_rel_labels.unsqueeze(0).expand(qs * nclasses, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "query_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_rel_labels.unsqueeze(1).expand(-1, ss * nclasses)",
                            "Call"
                        ],
                        [
                            "query_rel_labels.unsqueeze(1).expand(-1, ss * nclasses)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.backbone.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "few_shot/models/backbones/__init__.py": {
        "torch": {
            "Sequential_17": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block(x_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim_multiplier * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "exp_dict['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "backbone.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "backbone.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "backbone.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "*list(backbone.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "backbone._modules[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "backbone._modules[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "backbone._modules[conv0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "backbone._modules[conv0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*output",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "backbone._modules[features][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "exp_dict['dataset']['channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "*children",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "few_shot/models/modules/ProtoNet.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_support",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "way",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(labels.data.max()) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "support_set.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "support_set.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "d ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "few_shot/models/modules/RelationNet.py": {
        "torch": {
            "max_37": {
                "variable": {
                    "value": "(_, predict_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score.detach()",
                            "Call"
                        ],
                        [
                            "self._G(comb).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_39": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_y[predict_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "query_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[support_emb, query_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "few_shot/trainval.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset('train', data_root, exp_dict)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset('val', data_root, exp_dict)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset('test', data_root, exp_dict)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generation/backbones/__init__.py": {
        "torch": {}
    },
    "generation/backbones/biggan_vae.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_15": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dp_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "leaky_relu_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_out(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self.bn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_170": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.condition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * no",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(x, z)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x, z)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_270": {
                "variable": {
                    "value": "self.bn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_out(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_367": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_368": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.bn0(x))",
                            "Call"
                        ],
                        [
                            "self.conv0(y)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn1(y))",
                            "Call"
                        ],
                        [
                            "self.dropout1(y)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(y, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_reduce(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "linear(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(x), 0.2, True)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_out(x), 0.2, inplace=True)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "x.mean(3).mean(2)",
                            "Call"
                        ],
                        [
                            "block(x, z)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(x, z), True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x, z), True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_short(shortcut) + x",
                            "BinOp"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_ch, self.in_h, self.in_w)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_out(x), True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, z_features], 1)",
                            "Call"
                        ],
                        [
                            "group(x, z)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "variable": {
                    "value": "self.bn_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_154": {
                "input": {
                    "value": "self.bn_out(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_176": {
                "input": {
                    "value": "logits.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_221": {
                "variable": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_reduce(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "linear(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(x), 0.2, True)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_out(x), 0.2, inplace=True)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "x.mean(3).mean(2)",
                            "Call"
                        ],
                        [
                            "block(x, z)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(x, z), True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x, z), True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_short(shortcut) + x",
                            "BinOp"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_ch, self.in_h, self.in_w)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_out(x), True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, z_features], 1)",
                            "Call"
                        ],
                        [
                            "group(x, z)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_reduce(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "linear(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(x), 0.2, True)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_out(x), 0.2, inplace=True)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'group%d' % i)(x)",
                            "Call"
                        ],
                        [
                            "x.mean(3).mean(2)",
                            "Call"
                        ],
                        [
                            "block(x, z)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(x, z), True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x, z), True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_short(shortcut) + x",
                            "BinOp"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_ch, self.in_h, self.in_w)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_out(x), True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, z_features], 1)",
                            "Call"
                        ],
                        [
                            "group(x, z)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.hierarchical_decoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 ** 2 * self.channels[-2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_286": {
                "input": {
                    "value": "self.conv_out(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "code_params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code_params, code_params_low]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, z_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_320": {
                "variable": {
                    "value": "self.hierarchical_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 ** 2 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_99": {
                "num_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_130": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_features(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_139": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, x.clone().view(b, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.hierarchical_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 26 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ni",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "generation/backbones/infomax.py": {
        "torch": {
            "cat_25": {
                "variable": {
                    "value": "y_M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M, y_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "y_M_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M_prime, y_exp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_29": {
                "variable": {
                    "value": "Em",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.local_d(y_M_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_29": {
                "variable": {
                    "value": "Em",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_33": {
                "variable": {
                    "value": "Em",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.global_d(y, M_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_33": {
                "variable": {
                    "value": "Em",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_36": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_38": {
                "variable": {
                    "value": "term_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior_d(prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "term_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_39": {
                "variable": {
                    "value": "term_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - self.prior_d(y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "term_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 20 * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b1(self.c1(h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b2(self.c2(features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b3(self.c3(h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 22 * 22 + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c0(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l0(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_120": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_122": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "clazz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.l1(encoded))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "clazz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.l2(clazz))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "clazz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.l3(clazz))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "input": {
                    "value": "self.l2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_28": {
                "input": {
                    "value": "-self.local_d(y_M)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_32": {
                "input": {
                    "value": "-self.global_d(y, M)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "str(model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "generation/datasets.py": {
        "torch": {}
    },
    "generation/models/deepinfomax.py": {
        "torch": {
            "Adam_69": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "self.loss_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "M_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M[1:], M[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "M_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M[1:], M[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.exp_dict['z_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(labelset[attribute])",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "linear.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "optimizer_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mlp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(x)",
                            "Call"
                        ],
                        [
                            "bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, True)",
                            "Call"
                        ],
                        [
                            "x.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "x.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_126": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_130": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_146": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_131": {
                "input": {
                    "value": "logits - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_151": {
                "input": {
                    "value": "logits - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generation/models/vae.py": {
        "torch": {
            "Adam_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * exp_dict['z_dim']",
                            "BinOp"
                        ],
                        [
                            "exp_dict['z_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(labelset[attribute])",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "linear.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mlp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(x)",
                            "Call"
                        ],
                        [
                            "bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, True)",
                            "Call"
                        ],
                        [
                            "x.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "x.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_115": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_135": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_139": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ],
                        [
                            "classifier(mus)",
                            "Call"
                        ],
                        [
                            "logits.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "ys[attribute].cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "y.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_151": {
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(self.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "no",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "num_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_120": {
                "input": {
                    "value": "logits - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_140": {
                "input": {
                    "value": "logits - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generation/trainval.py": {
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "exp_dict['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "exp_dict['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hu.load_json(os.path.join(savedir, 'exp_dict.json'))",
                            "Call"
                        ],
                        [
                            "exp_list",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generation/utils/losses.py": {
        "torch": {
            "l1_loss_22": {
                "variable": {
                    "value": "pix_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, 1, dim)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "inv_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_87": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_576": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_606": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_616": {
                "variable": {
                    "value": "log_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_log_qz.sum(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_617": {
                "variable": {
                    "value": "log_prod_qzi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_log_qz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix_log_density_gaussian(latent_sample, *latent_dist)",
                            "Call"
                        ],
                        [
                            "mat_log_qz + log_iw_mat.view(batch_size, batch_size, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_617": {
                "variable": {
                    "value": "log_prod_qzi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_799": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_829": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_839": {
                "variable": {
                    "value": "log_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_log_qz.sum(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_840": {
                "variable": {
                    "value": "log_prod_qzi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_log_qz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix_log_density_gaussian(latent_sample, *latent_dist)",
                            "Call"
                        ],
                        [
                            "mat_log_qz + log_iw_mat.view(batch_size, batch_size, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_840": {
                "variable": {
                    "value": "log_prod_qzi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_315": {
                "variable": {
                    "value": "self.optimizer_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_371": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "half_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_372": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(half_batch_size, dtype=torch.long, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_505": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_data",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.split(half_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randperm_580": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_728": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_data",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.split(half_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randperm_803": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_512": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_data",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.split(half_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l1_loss_735": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_data",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.split(half_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_373": {
                "input": {
                    "value": "d_z_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(z_perm)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(half_batch_size, dtype=torch.long, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_508": {
                "input": {
                    "value": "recon_data * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "data * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_731": {
                "input": {
                    "value": "recon_data * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "data * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_18": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar.view(1, batch_size, dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_examples/datasets.py": {
        "torch": {}
    },
    "pytorch_examples/minimal_classification.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "synbols.get_split('train', tt.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "synbols.get_split('val', tt.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "bn(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "x.mean((2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_77": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}