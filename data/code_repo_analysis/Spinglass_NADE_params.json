{
    "library.py": {
        "tensorflow": {
            "Flatten_13": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=(self.N_h,))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_27": {
                "variable": {
                    "value": "self.loss_tracker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorArray_43": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_44": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "glorot_uniform_92": {
                "variable": {
                    "value": "ker_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "ker_init([N_h, D - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([D - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_110": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_111": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tril(np.ones((self.D - 1, self.D - 1), np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "glorot_uniform_116": {
                "variable": {
                    "value": "ker_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "ker_init([self.D - 1, self.N_h])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[self.N_h])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_121": {
                "variable": {
                    "value": "self.loss_tracker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_138": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(self.D - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_139": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[0]] + self.mask.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_to_140": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], self.D - 1, self.D - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(1, self.D)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_192": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_uniform_196": {
                "variable": {
                    "value": "ker_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "self.in_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "ker_init([8, self.D - 1, self.N_h])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "self.in_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.D - 1, self.N_h])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_202": {
                "variable": {
                    "value": "self.out_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "ker_init([self.N_h, self.D - 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "self.out_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.D - 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.kernel[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_48": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer[i - 1](h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_51": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.constant(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "p.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.kernel[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer[i - 1](SplDense(tf.expand_dims(x.stack(), axis=0), i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_98": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.output_layer[i - 1](h))",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijk,kj->ij', x, self.kernel) + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.output_layer(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_102": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "p.write(0, Id)",
                            "Call"
                        ],
                        [
                            "p.write(i, 0.5 * (Id - x2) + x2 * y)",
                            "Call"
                        ],
                        [
                            "self.call(x)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ij,j->i', h, self.kernel[:, i]) + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "-tfm.log(0.5 * (1 - x2) + x2 * y)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_149": {
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "p.write(0, Id)",
                            "Call"
                        ],
                        [
                            "p.write(i, 0.5 * (Id - x2) + x2 * y)",
                            "Call"
                        ],
                        [
                            "self.call(x)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ij,j->i', h, self.kernel[:, i]) + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "-tfm.log(0.5 * (1 - x2) + x2 * y)",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_157": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer.sample(prob, i - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "shape": {
                    "value": "(self.N_h,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "x": {
                    "value": "tf.matmul(x, kernel) + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "x": {
                    "value": "tf.matmul(x, kernel) + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_94": {
                "shape": {
                    "value": "[D - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_97": {
                "equation": {
                    "value": "ijk,kj->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_101": {
                "equation": {
                    "value": "ij,j->i",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SplDense(x1, i)",
                            "Call"
                        ],
                        [
                            "SplDense(x1)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.kernel[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "shape": {
                    "value": "[self.N_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "x": {
                    "value": "tf.matmul(x, self.kernel) + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.range(self.D - 1), axis=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_148": {
                "x": {
                    "value": "0.5 * (1 - x2) + x2 * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "x": {
                    "value": "tf.matmul(x, kernel) + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "[self.D - 1, self.N_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "shape": {
                    "value": "[self.D - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "initial_value": {
                    "value": "rng.uniform(shape=[self.N_h])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'kernel:' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_51": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self.D - 1)",
                            "Call"
                        ],
                        [
                            "i in range(self.D - 1)",
                            "Call"
                        ],
                        [
                            "i in range(1, self.D)",
                            "Call"
                        ],
                        [
                            "i in range(1, self.D)",
                            "Call"
                        ],
                        [
                            "i in range(1, self.D)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_78": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "p.write(0, Id)",
                            "Call"
                        ],
                        [
                            "p.write(i, 0.5 * (Id - x2) + x2 * y)",
                            "Call"
                        ],
                        [
                            "self.call(x)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ij,j->i', h, self.kernel[:, i]) + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "-tfm.log(0.5 * (1 - x2) + x2 * y)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "expand_dims_165": {
                "input": {
                    "value": "x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(self.kernel[:n])",
                            "Call"
                        ],
                        [
                            "tf.stack(self.kernel[:n])",
                            "Call"
                        ],
                        [
                            "tf.gather(self.kernel, tf.range(n), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(self.kernel[:n])",
                            "Call"
                        ],
                        [
                            "tf.stack(self.kernel[:n])",
                            "Call"
                        ],
                        [
                            "tf.gather(self.kernel, tf.range(n), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(100, dtype=int)",
                            "Call"
                        ],
                        [
                            "np.reshape(x, (10, 10))",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.float32, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "x.write(0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.write(i, 1.0 if rng.uniform(shape=[]) < prob else -1.0)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(self.kernel[:n])",
                            "Call"
                        ],
                        [
                            "tf.stack(self.kernel[:n])",
                            "Call"
                        ],
                        [
                            "tf.gather(self.kernel, tf.range(n), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_69": {
                "input": {
                    "value": "x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}