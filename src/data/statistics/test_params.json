{
    "core/leras/initializers/__init__.py": {
        "tensorflow": {}
    },
    "core/leras/nn.py": {
        "tensorflow": {
            "Session_109": {
                "variable": {
                    "value": "nn.tf_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "nn.tf_sess_config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_98": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ConfigProto_101": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/leras/ops/__init__.py": {
        "tensorflow": {
            "gradients_55": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "colocate_gradients_with_ops": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_205": {
                "condition": {
                    "value": "random_ops.random_uniform(shape, dtype=tf.float16, seed=seed) < p",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.ones(shape, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.zeros(shape, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_207": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_207": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "core/leras/optimizers/RMSprop.py": {
        "tensorflow": {
            "group_71": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_updates'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_add_49": {
                "ref": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_68": {
                "ref": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.accumulators_dict[v.name]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "new_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rho * a + (1.0 - rho) * tf.square(g)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_69": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v + v_diff",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}