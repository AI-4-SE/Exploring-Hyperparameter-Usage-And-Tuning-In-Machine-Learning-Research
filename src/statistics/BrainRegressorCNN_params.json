{
    "Python/analyze/scoring.py": {
        "sklearn": {
            "r2_score_48": {
                "y_true": {
                    "value": "gt[:, idx]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions[:, idx]",
                    "possible_values": []
                }
            },
            "r2_score_89": {
                "y_true": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(gt).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predictions).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_49": {
                "y_true": {
                    "value": "gt[:, idx]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions[:, idx]",
                    "possible_values": []
                }
            },
            "r2_score_99": {
                "y_true": {
                    "value": "gt_sub",
                    "possible_values": [
                        [
                            "gt[:, indices]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_sub",
                    "possible_values": [
                        [
                            "predictions[:, indices]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "Python/train/training.py": {
        "sklearn": {
            "train_test_split_66": {
                "variable": {
                    "value": "(self._subjects_train, val_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "[s['subject'] for s in self._data_store.dataset]",
                    "possible_values": []
                },
                "train_size": {
                    "value": "TRAIN_TEST_SPLIT",
                    "possible_values": [
                        [
                            "0.8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_70": {
                "variable": {
                    "value": "(self._subjects_validate, self._subjects_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "val_test",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.5",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_squared_error_501": {
                "variable": {
                    "value": "accuracy_train",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_train / self._regression_column_multipliers",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_train / self._regression_column_multipliers",
                    "possible_values": []
                }
            },
            "r2_score_504": {
                "variable": {
                    "value": "r2_train",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_train",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_train",
                    "possible_values": []
                }
            },
            "mean_squared_error_510": {
                "variable": {
                    "value": "accuracy_test",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_test / self._regression_column_multipliers",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_test / self._regression_column_multipliers",
                    "possible_values": []
                }
            },
            "r2_score_513": {
                "variable": {
                    "value": "r2_test",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_test",
                    "possible_values": []
                }
            },
            "r2_score_416": {
                "variable": {
                    "value": "r2_train",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_train",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_train",
                    "possible_values": []
                }
            },
            "r2_score_417": {
                "variable": {
                    "value": "r2_validation",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_validation",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_validation",
                    "possible_values": []
                }
            },
            "r2_score_431": {
                "y_true": {
                    "value": "gt_train[:, idx]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_train[:, idx]",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "raw_values",
                    "possible_values": []
                }
            },
            "r2_score_432": {
                "y_true": {
                    "value": "gt_validation[:, idx]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions_validation[:, idx]",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "raw_values",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_80": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42 + epoch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + sample[data_storage.STORE_IMAGES].shape[0:]",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, len(self._regression_column_ids))",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2)",
                    "possible_values": []
                },
                "name": {
                    "value": "d",
                    "possible_values": []
                }
            },
            "placeholder_264": {
                "variable": {
                    "value": "is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_266": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_267": {
                "variable": {
                    "value": "epoch_checkpoint",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "epoch",
                    "possible_values": []
                }
            },
            "Variable_268": {
                "variable": {
                    "value": "best_r2_score_checkpoint",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "possible_values": []
                },
                "name": {
                    "value": "best_r2_score",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "possible_values": []
                }
            },
            "scalar_294": {
                "variable": {
                    "value": "sum_lr",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self._cfg.learning_rate, global_step, self._cfg.learning_rate_decay_steps, self._cfg.learning_rate_decay_rate)",
                            "Call"
                        ],
                        [
                            "tf.Variable(self._cfg.learning_rate, name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_315": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.checkpoint_dir, 'tb_logs')",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "possible_values": []
                }
            },
            "global_variables_initializer_317": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_320": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self._cfg.checkpoint_keep + 2",
                    "possible_values": []
                }
            },
            "Graph_258": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_squared_error_275": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, len(self._regression_column_ids)), name='y')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "net",
                    "possible_values": [
                        [
                            "self.get_python_obj(self._cfg.model)({'x': x, 'y': y, 'd': d, 'is_train': is_train})",
                            "Call"
                        ]
                    ]
                }
            },
            "exponential_decay_280": {
                "variable": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._cfg.learning_rate",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self._cfg.learning_rate_decay_steps",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self._cfg.learning_rate_decay_rate",
                    "possible_values": []
                }
            },
            "Variable_284": {
                "variable": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self._cfg.learning_rate",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_287": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self._cfg.learning_rate, global_step, self._cfg.learning_rate_decay_steps, self._cfg.learning_rate_decay_rate)",
                            "Call"
                        ],
                        [
                            "tf.Variable(self._cfg.learning_rate, name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_301": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "latest_checkpoint_325": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.checkpoint_dir",
                    "possible_values": []
                }
            },
            "constant_195": {
                "value": {
                    "value": "epoch",
                    "possible_values": [
                        [
                            "range(epoch_checkpoint.eval(), self._cfg.epochs + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "absolute_difference_277": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, len(self._regression_column_ids)), name='y')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "net",
                    "possible_values": [
                        [
                            "self.get_python_obj(self._cfg.model)({'x': x, 'y': y, 'd': d, 'is_train': is_train})",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_289": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._cfg.learning_rate",
                    "possible_values": []
                }
            },
            "control_dependencies_291": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "possible_values": []
                }
            },
            "get_default_graph_315": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_322": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "import_meta_graph_335": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "checkpoint + '.meta'",
                    "possible_values": []
                }
            },
            "import_meta_graph_484": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "checkpoint + '.meta'",
                    "possible_values": []
                }
            },
            "constant_200": {
                "value": {
                    "value": "r2_score",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_291": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                }
            },
            "Variable_311": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, h, w, 1])",
                    "possible_values": []
                }
            },
            "SessionLog_360": {
                "status": {
                    "value": "tf.SessionLog.START",
                    "possible_values": []
                }
            },
            "Summary_401": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "merge_407": {
                "variable": {
                    "value": "summary_op",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[sum_lr]",
                    "possible_values": []
                }
            },
            "Summary_424": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "merge_438": {
                "variable": {
                    "value": "summary_op",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sum_histograms",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "histogram_305": {
                "name": {
                    "value": "'{}/{}'.format(m.group(1), m.group(2))",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(v.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_461": {
                "variable": {
                    "value": "summary_op",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sum_kernels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_311": {
                "shape": {
                    "value": "[1, h, w, 1]",
                    "possible_values": []
                }
            },
            "image_313": {
                "name": {
                    "value": "m.group(1)",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([1, h, w, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_343": {
                "value": {
                    "value": "1",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_81": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "42 + epoch",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Python/analyze/visualizing.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "image_str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "decode_image_67": {
                "variable": {
                    "value": "img_tf",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_str",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ]
                    ]
                }
            },
            "summary_iterator_77": {
                "path": {
                    "value": "event_file",
                    "possible_values": [
                        [
                            "candidates",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Python/main_predict.py": {
        "tensorflow": {
            "global_variables_initializer_43": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "import_meta_graph_49": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "checkpoint_file + '.meta'",
                    "possible_values": []
                }
            },
            "Session_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Python/model/net.py": {
        "tensorflow": {
            "reshape_10": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer",
                    "possible_values": [
                        [
                            "features['x'] / SCALE",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 256, 256, 256, 1]",
                    "possible_values": []
                }
            },
            "conv3d_11": {
                "variable": {
                    "value": "conv1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "possible_values": [
                        [
                            "tf.reshape(input_layer, [-1, 256, 256, 256, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "144",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[11, 11, 11]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3, 3]",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "layer1_conv",
                    "possible_values": []
                }
            },
            "max_pooling3d_21": {
                "variable": {
                    "value": "pool1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(inputs=data, filters=144, kernel_size=[11, 11, 11], strides=[3, 3, 3], padding='same', use_bias=True, activation=tf.nn.relu, name='layer1_conv')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[3, 3, 3]",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "name": {
                    "value": "layer1_pool",
                    "possible_values": []
                }
            },
            "conv3d_23": {
                "variable": {
                    "value": "conv2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(inputs=conv1, pool_size=[3, 3, 3], strides=2, name='layer1_pool')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "192",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5, 5]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2, 2]",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "layer2_conv",
                    "possible_values": []
                }
            },
            "max_pooling3d_33": {
                "variable": {
                    "value": "pool2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(inputs=pool1, filters=192, kernel_size=[5, 5, 5], strides=[2, 2, 2], padding='same', use_bias=False, activation=tf.nn.relu, name='layer2_conv')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[3, 3, 3]",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "name": {
                    "value": "layer2_pool",
                    "possible_values": []
                }
            },
            "conv3d_35": {
                "variable": {
                    "value": "conv3",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(inputs=conv2, pool_size=[3, 3, 3], strides=2, name='layer2_pool')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "192",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "layer3_conv",
                    "possible_values": []
                }
            },
            "max_pooling3d_44": {
                "variable": {
                    "value": "pool3",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(inputs=pool2, filters=192, kernel_size=[3, 3, 3], padding='same', use_bias=False, activation=tf.nn.relu, name='layer3_conv')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[3, 3, 3]",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "possible_values": []
                },
                "name": {
                    "value": "layer3_pool",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "pool3_flat",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(inputs=conv3, pool_size=[3, 3, 3], strides=2, name='layer3_pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 4 * 192]",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "dropout_pool3",
                    "possible_values": []
                },
                "x": {
                    "value": "pool3_flat",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, 4 * 4 * 4 * 192])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "features['is_train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dense_48": {
                "variable": {
                    "value": "fc1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_pool3",
                    "possible_values": [
                        [
                            "tf.layers.dropout(pool3_flat, rate=0.4, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "6 * 64",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "possible_values": []
                },
                "name": {
                    "value": "layer4_fc",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "dropout_fc1",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_pool3, units=6 * 64, use_bias=True, activation=tf.nn.relu, name='layer4_fc')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "features['is_train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dense_51": {
                "variable": {
                    "value": "fc2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_fc1",
                    "possible_values": [
                        [
                            "tf.layers.dropout(fc1, rate=0.4, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "6 * 32",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "layer5_fc",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "dropout_fc2",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_fc1, units=6 * 32, use_bias=True, activation=None, name='layer5_fc')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "features['is_train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dense_54": {
                "variable": {
                    "value": "fc3",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout_fc2",
                    "possible_values": [
                        [
                            "tf.layers.dropout(fc2, rate=0, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_layer.shape[1]",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                },
                "name": {
                    "value": "layer6_fc",
                    "possible_values": []
                }
            },
            "identity_57": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "input": {
                    "value": "fc3",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout_fc2, units=output_layer.shape[1], use_bias=True, activation=None, name='layer6_fc')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "model",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "NET",
                    "possible_values": []
                }
            }
        }
    },
    "miapy/miapy/data/extraction/__init__.py": {
        "torch": {}
    },
    "miapy/miapy/data/extraction/dataset.py": {
        "torch": {}
    },
    "miapy/miapy/data/extraction/sample.py": {
        "torch": {}
    },
    "miapy/miapy/data/transformation.py": {
        "torch": {
            "from_numpy_175": {
                "variable": {
                    "value": "sample[entry]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_entry",
                    "possible_values": [
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "self._normalize(np_entry, self.lower, self.upper)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "self.normalize_fn(np_entry)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "self.lambda_fn(np_entry)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "_check_and_return(sample[entry], np.ndarray)",
                            "Call"
                        ],
                        [
                            "np_entry[slicing]",
                            "Subscript"
                        ],
                        [
                            "np.pad(np_entry, pad_width, mode='constant', constant_values=self.pad_value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}