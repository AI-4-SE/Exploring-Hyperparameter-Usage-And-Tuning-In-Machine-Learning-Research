{
    "partitioning/drl_partitioning_coarsest_train.py": {
        "torch": {
            "sum_48": {
                "variable": {
                    "value": "da",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs[ia]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs[ib]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_388": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "state.x[vertex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "state.x[vertex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_307": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outdir + 'model_coarsest'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_40": {
                "condition": {
                    "value": "(graph.x[:, :2] == torch.tensor([1.0, 0.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_42": {
                "condition": {
                    "value": "(graph.x[:, :2] != torch.tensor([1.0, 0.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_208": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(logprobs).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_208": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_209": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(vals).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_209": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(rews).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_210": {
                "variable": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "R_partial",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_219": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(R).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_226": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R - vals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_conv[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_337": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.actor1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.actor2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.critic1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.critic2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_353": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_357": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_362": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_367": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_actor)",
                            "Call"
                        ],
                        [
                            "self.actor2(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x_actor, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "x_actor.data[flipped]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_372": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_actor)",
                            "Call"
                        ],
                        [
                            "self.actor2(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x_actor, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_376": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.GlobAtt(x, batch)",
                            "Call"
                        ],
                        [
                            "self.critic1(x_critic)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_critic)",
                            "Call"
                        ],
                        [
                            "self.critic2(x_critic)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "policy.view(-1)[action]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_231": {
                "input": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * logprobs * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_342": {
                "*args": {
                    "value": "nn.Linear(hid_lin[1], hid_lin[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_369": {
                "condition": {
                    "value": "(x_start == torch.tensor([0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.coeff",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_232": {
                "input": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(R - vals, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_343": {
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_158": {
                "condition": {
                    "value": "graph.x == torch.tensor([0.0, 1.0])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "partitioning/drl_partitioning_test.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "coarse_graph.x[np.array(parts[0])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "coarse_graph.x[np.array(parts[1])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_157": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(graph.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 if i.item() in nodes_boundary else 0.0 for i in data_cut[0]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_178": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.x[data_cut[0]], boundary_features, torch.true_divide(va, nnz) * e, torch.true_divide(vb, nnz) * e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_202": {
                "variable": {
                    "value": "da",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs[ia]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_203": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs[ib]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "graph.x[parts[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "variable": {
                    "value": "graph.x[parts[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_335": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph_cut.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "variable": {
                    "value": "g.x[np.where(part == 0)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_436": {
                "variable": {
                    "value": "g.x[np.where(part == 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "state.x[vertex, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "state.x[vertex, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "state.x[vertex, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "state.x[vertex, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unique_235": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(graph.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_299": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(graph.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "true_divide_362": {
                "variable": {
                    "value": "graph_cut.x[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "volA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volA - dv",
                            "BinOp"
                        ],
                        [
                            "volA + dv",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "graph.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_363": {
                "variable": {
                    "value": "graph_cut.x[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "volB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volB + dv",
                            "BinOp"
                        ],
                        [
                            "volB - dv",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "graph.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_453": {
                "variable": {
                    "value": "self.conv_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.common_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_457": {
                "variable": {
                    "value": "self.conv_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, 1 if i == self.actor_layers - 1 else self.units) for i in range(self.actor_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_462": {
                "variable": {
                    "value": "self.conv_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.critic_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_466": {
                "variable": {
                    "value": "self.final_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_471": {
                "variable": {
                    "value": "do_not_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 2] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_482": {
                "variable": {
                    "value": "x_actor[do_not_flip]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_483": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.zeros([n, 1], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.actor1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_actor)",
                            "Call"
                        ],
                        [
                            "self.actor2(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x_actor, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_494": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_mean_pool(x_critic, batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_571": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_165": {
                "condition": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_194": {
                "condition": {
                    "value": "(graph.x[:, :2] == torch.tensor([1.0, 0.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_196": {
                "condition": {
                    "value": "(graph.x[:, :2] != torch.tensor([1.0, 0.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_411": {
                "variable": {
                    "value": "graph_test.x[nodes[stops[0] + 1:]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "graph_test.x[nodes[stop + 1:]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_597": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_conv[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_598": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_599": {
                "variable": {
                    "value": "self.actor1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_600": {
                "variable": {
                    "value": "self.actor2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_607": {
                "variable": {
                    "value": "self.critic1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.critic2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_lin[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_614": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.conv_first(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_common[i](x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_616": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.conv_first(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_common[i](x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_618": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.conv_first(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_common[i](x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_620": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.conv_first(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_common[i](x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_623": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.conv_first(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_common[i](x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_625": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(self.conv_first(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_common[i](x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.conv1(graph.x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_628": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.zeros([n, 1], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.actor1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_actor)",
                            "Call"
                        ],
                        [
                            "self.actor2(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x_actor, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_632": {
                "variable": {
                    "value": "x_actor.data[flipped]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_633": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.zeros([n, 1], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.actor1(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_actor)",
                            "Call"
                        ],
                        [
                            "self.actor2(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x_actor, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_637": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "self.conv_critic[i](x_critic, edge_index)",
                            "Call"
                        ],
                        [
                            "self.final_critic(x_critic)",
                            "Call"
                        ],
                        [
                            "torch.tanh(global_mean_pool(x_critic, batch))",
                            "Call"
                        ],
                        [
                            "self.activation(x_critic)",
                            "Call"
                        ],
                        [
                            "self.GlobAtt(x, batch)",
                            "Call"
                        ],
                        [
                            "self.critic1(x_critic)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x_critic)",
                            "Call"
                        ],
                        [
                            "self.critic2(x_critic)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_652": {
                "f": {
                    "value": "./temp_edge/model_coarsest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_668": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_402": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "graph_test.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_646": {
                "f": {
                    "value": "./temp_edge/model_partitioning_suitesparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_649": {
                "f": {
                    "value": "./temp_edge/model_partitioning_delaunay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "true_divide_180": {
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "graph.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_181": {
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "graph.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_345": {
                "dividend": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "divisor": {
                    "value": "volA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volA - dv",
                            "BinOp"
                        ],
                        [
                            "volA + dv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "true_divide_346": {
                "dividend": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "divisor": {
                    "value": "volB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volB + dv",
                            "BinOp"
                        ],
                        [
                            "volB - dv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "true_divide_387": {
                "dividend": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "divisor": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "true_divide_388": {
                "dividend": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "divisor": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_603": {
                "*args": {
                    "value": "nn.Linear(hid_lin[1], hid_lin[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_630": {
                "condition": {
                    "value": "(x_start == torch.tensor([0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_696": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_604": {
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_605": {
                "in_features": {
                    "value": "hid_lin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_631": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "partitioning/drl_partitioning_train.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "coarse_graph.x[np.array(parts[0])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "variable": {
                    "value": "coarse_graph.x[np.array(parts[1])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_224": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(graph.edge_index)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 if i.item() in nodes_boundary else 0.0 for i in data_cut[0]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_246": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.x[data_cut[0]], boundary_features, torch.true_divide(va, nnz) * e, torch.true_divide(vb, nnz) * e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_271": {
                "variable": {
                    "value": "da",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs[ia]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_272": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs[ib]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_560": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "state.x[vertex, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "state.x[vertex, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "state.x[vertex, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "state.x[vertex, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_401": {
                "variable": {
                    "value": "self.conv_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.common_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_405": {
                "variable": {
                    "value": "self.conv_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, 1 if i == self.actor_layers - 1 else self.units) for i in range(self.actor_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_410": {
                "variable": {
                    "value": "self.conv_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.critic_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.final_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_419": {
                "variable": {
                    "value": "do_not_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 2] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_430": {
                "variable": {
                    "value": "x_actor[do_not_flip]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_431": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ],
                        [
                            "torch.zeros([n, 1], dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_442": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_mean_pool(x_critic, batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_526": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "g.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * g.num_edges",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_232": {
                "condition": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_263": {
                "condition": {
                    "value": "(graph.x[:, :2] == torch.tensor([1.0, 0.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_265": {
                "condition": {
                    "value": "(graph.x[:, :2] != torch.tensor([1.0, 0.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "(graph.x[graph.edge_index[0], :2] != graph.x[graph.edge_index[1], :2]).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_585": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outdir + 'model_partitioning_delaunay'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_587": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outdir + 'model_partitioning_suitesparse'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_315": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "true_divide_341": {
                "variable": {
                    "value": "start.x[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "start_all.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_342": {
                "variable": {
                    "value": "start.x[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "start_all.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "true_divide_248": {
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "start_all.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_249": {
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ],
                        [
                            "start_all.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_349": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(logprobs).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_349": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_350": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(vals).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_350": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(rews).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_351": {
                "variable": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "R_partial",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_360": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(R).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_367": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R - vals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_372": {
                "input": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * logprobs * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "data": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.coeff",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_373": {
                "input": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(R - vals, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "separator/drl_nd_testing.py": {
        "torch": {
            "ones_82": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph_cut.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 if i.item() in nodes_boundary else 0.0 for i in data_cut[0]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_317": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "remove_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "remove_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "remove_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len(remove_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_338": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.x[data_cut[0]], boundary_features, remove_features, torch.true_divide(va, nnz) * e, torch.true_divide(vb, nnz) * e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_360": {
                "variable": {
                    "value": "ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "coarse_graph.x[sep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_378": {
                "variable": {
                    "value": "coarse_graph.x[A]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "variable": {
                    "value": "coarse_graph.x[B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_380": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(g.edge_index, num_nodes=g.num_nodes)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(graph.edge_index, num_nodes=graph.num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "variable": {
                    "value": "coarse_graph.x[sep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "coarse_graph.x[A]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "variable": {
                    "value": "coarse_graph.x[B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_57": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(g.edge_index, num_nodes=g.num_nodes)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(graph.edge_index, num_nodes=graph.num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "true_divide_117": {
                "variable": {
                    "value": "graph_cut.x[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": [
                        [
                            "va - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_118": {
                "variable": {
                    "value": "graph_cut.x[:, 6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vb - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_525": {
                "variable": {
                    "value": "self.conv_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.common_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_529": {
                "variable": {
                    "value": "self.conv_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, 1 if i == self.actor_layers - 1 else self.units) for i in range(self.actor_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_534": {
                "variable": {
                    "value": "self.conv_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.critic_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_538": {
                "variable": {
                    "value": "self.final_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_543": {
                "variable": {
                    "value": "do_not_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 3] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_544": {
                "variable": {
                    "value": "do_not_flip_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 4] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_555": {
                "variable": {
                    "value": "x_actor[do_not_flip]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_556": {
                "variable": {
                    "value": "x_actor[do_not_flip_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_557": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_568": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_mean_pool(x_critic, batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_608": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_85": {
                "condition": {
                    "value": "graph_cut.x[:, 2] == torch.tensor(1.0)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "graph.x[i, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "graph.x[i, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_302": {
                "condition": {
                    "value": "graph.x[:, 2] == torch.tensor(1.0)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_645": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_120": {
                "condition": {
                    "value": "graph_cut.x[:, 2] == torch.tensor(1.0)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_627": {
                "f": {
                    "value": "./temp_edge/model_separator_suitesparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_630": {
                "f": {
                    "value": "./temp_edge/model_separator_delaunay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_273": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_282": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "true_divide_343": {
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": [
                        [
                            "va - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_345": {
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vb - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "g.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * g.num_edges",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_674": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_456": {
                "*size": {
                    "value": "len(ia)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "len(ia)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "*size": {
                    "value": "len(ib)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "*size": {
                    "value": "len(ib)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "*size": {
                    "value": "len(ia)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_497": {
                "*size": {
                    "value": "len(ia)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_500": {
                "*size": {
                    "value": "len(ib)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "*size": {
                    "value": "len(ib)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_446": {
                "condition": {
                    "value": "g.x[:, 0] == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_447": {
                "condition": {
                    "value": "g.x[:, 1] == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_448": {
                "condition": {
                    "value": "g.x[:, 2] == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "separator/drl_separator_test.py": {
        "torch": {
            "ones_77": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph_cut.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 if i.item() in nodes_boundary else 0.0 for i in data_cut[0]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "remove_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "remove_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "remove_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len(remove_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_333": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.x[data_cut[0]], boundary_features, remove_features, torch.true_divide(va, nnz) * e, torch.true_divide(vb, nnz) * e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_355": {
                "variable": {
                    "value": "ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "coarse_graph.x[sep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "coarse_graph.x[A]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "coarse_graph.x[B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_375": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(g.edge_index, num_nodes=g.num_nodes)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(graph.edge_index, num_nodes=graph.num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_384": {
                "variable": {
                    "value": "coarse_graph.x[sep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "coarse_graph.x[A]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "variable": {
                    "value": "coarse_graph.x[B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_52": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(g.edge_index, num_nodes=g.num_nodes)",
                            "Call"
                        ],
                        [
                            "info.pop()",
                            "Call"
                        ],
                        [
                            "graclus(graph.edge_index, num_nodes=graph.num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "true_divide_112": {
                "variable": {
                    "value": "graph_cut.x[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": [
                        [
                            "va - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_113": {
                "variable": {
                    "value": "graph_cut.x[:, 6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vb - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "variable": {
                    "value": "self.conv_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.common_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_407": {
                "variable": {
                    "value": "self.conv_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, 1 if i == self.actor_layers - 1 else self.units) for i in range(self.actor_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_412": {
                "variable": {
                    "value": "self.conv_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.critic_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_416": {
                "variable": {
                    "value": "self.final_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_421": {
                "variable": {
                    "value": "do_not_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 3] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_422": {
                "variable": {
                    "value": "do_not_flip_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 4] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "x_actor[do_not_flip]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_434": {
                "variable": {
                    "value": "x_actor[do_not_flip_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_435": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_446": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_mean_pool(x_critic, batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_486": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_80": {
                "condition": {
                    "value": "graph_cut.x[:, 2] == torch.tensor(1.0)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "graph.x[i, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "graph.x[i, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_297": {
                "condition": {
                    "value": "graph.x[:, 2] == torch.tensor(1.0)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_115": {
                "condition": {
                    "value": "graph_cut.x[:, 2] == torch.tensor(1.0)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_344": {
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_505": {
                "f": {
                    "value": "./temp_edge/model_separator_suitesparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_508": {
                "f": {
                    "value": "./temp_edge/model_separator_delaunay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_268": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_277": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "true_divide_338": {
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": [
                        [
                            "va - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_340": {
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vb - 1",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "g.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "separator/drl_separator_train.py": {
        "torch": {
            "tensor_90": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_203": {
                "variable": {
                    "value": "ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "b_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "boundary_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len(b_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "remove_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "remove_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "remove_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len(remove_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_251": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.x[data_cut[0]], boundary_features, remove_features, torch.true_divide(va, nnz) * e, torch.true_divide(vb, nnz) * e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "coarse_graph.x[sep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "coarse_graph.x[A]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "variable": {
                    "value": "coarse_graph.x[B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_316": {
                "variable": {
                    "value": "(_, inverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(g.edge_index)",
                            "Call"
                        ],
                        [
                            "graclus(graph.edge_index)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_594": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_451": {
                "variable": {
                    "value": "self.conv_common",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.common_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.conv_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, 1 if i == self.actor_layers - 1 else self.units) for i in range(self.actor_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_460": {
                "variable": {
                    "value": "self.conv_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGEConv(self.units, self.units) for i in range(self.critic_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_464": {
                "variable": {
                    "value": "self.final_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_469": {
                "variable": {
                    "value": "do_not_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 3] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_470": {
                "variable": {
                    "value": "do_not_flip_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 4] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_481": {
                "variable": {
                    "value": "x_actor[do_not_flip]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_482": {
                "variable": {
                    "value": "x_actor[do_not_flip_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-np.Inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_483": {
                "variable": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_actor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv_actor[i](x_actor, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x_actor, dim=0)",
                            "Call"
                        ],
                        [
                            "self.activation(x_actor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_494": {
                "variable": {
                    "value": "x_critic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_mean_pool(x_critic, batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_560": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "g.x[v, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "g.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * g.num_edges",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_210": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_619": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outdir + 'model_separator_delaunay'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_621": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outdir + 'model_separator_suitesparse'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "*size": {
                    "value": "data_cut[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "graph.x[i, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "graph.x[i, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Categorical_358": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "true_divide_385": {
                "variable": {
                    "value": "start.x[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "start_all.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_386": {
                "variable": {
                    "value": "start.x[:, 6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "start_all.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_183": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_192": {
                "condition": {
                    "value": "(graph.x == torch.tensor([0.0, 0.0, 1.0])).all(axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "true_divide_256": {
                "dividend": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "start_all.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "true_divide_258": {
                "dividend": {
                    "value": "vb",
                    "type": "variable",
                    "possible_values": []
                },
                "divisor": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ],
                        [
                            "start_all.num_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_398": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(logprobs).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_398": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_399": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(vals).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_399": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(rews).flip(dims=(0,)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_400": {
                "variable": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "R_partial",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_409": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(R).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_416": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R - vals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_421": {
                "input": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * logprobs * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "g.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "data": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.coeff",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_422": {
                "input": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(R - vals, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}