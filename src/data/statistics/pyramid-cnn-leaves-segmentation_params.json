{
    "evaluation.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MSUDenseLeavesDataset(args.dataset_filepath[:-1] + '_eval/', args.predictions_number)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "msu_leaves_dataset.py": {
        "torch": {
            "DataLoader_134": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MSUDenseLeavesDataset('/home/nick/datasets/DenseLeaves/leaves_edges/', num_targets=5, random_augmentation=True, augm_probability=1.0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose(2, 0, 1) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(self.labels[item])",
                            "Call"
                        ],
                        [
                            "label[:, :, 0] / 255.0",
                            "BinOp"
                        ],
                        [
                            "rotate(torch.from_numpy(label).float(), angle).squeeze().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.masks[item])",
                            "Call"
                        ],
                        [
                            "mask[:, :, 0] / 255.0",
                            "BinOp"
                        ],
                        [
                            "rotate(torch.from_numpy(mask).float(), angle).squeeze().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyramid_network.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.no_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.downsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.downsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.pre_loss_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.pre_loss_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_36": {
                "pos_weight": {
                    "value": "lw",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_55": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "(2, s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_96": {
                "*size": {
                    "value": "(2, s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_64": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_73": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "self.no_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.no_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "self.no_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "run_on_custom_image.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "og_image.transpose(2, 0, 1) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_17": {
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MSUDenseLeavesDataset(args.dataset_filepath, args.predictions_number)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MSUDenseLeavesDataset(args.dataset_filepath[:-1] + '_eval/', args.predictions_number)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'pyramid_net.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "input": {
                    "value": "predictions[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "predictions[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_4": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_5": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_device_name_6": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_13": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}