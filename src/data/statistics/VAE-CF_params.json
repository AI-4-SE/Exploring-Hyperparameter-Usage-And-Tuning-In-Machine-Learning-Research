{
    "vae/models/Mult_VAE_training.py": {
        "sklearn": {
            "normalize_346": {
                "variable": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(data_input)",
                            "Call"
                        ],
                        [
                            "data_input[list(indices)]",
                            "Subscript"
                        ],
                        [
                            "normalize(data_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_372": {
                "variable": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(data_input)",
                            "Call"
                        ],
                        [
                            "data_input[list(indices)]",
                            "Subscript"
                        ],
                        [
                            "normalize(data_input)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_266": {
                "variable": {
                    "value": "self.inputs_validation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "np.array([self.batch_size_validation, self.vae.input_dim], dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_269": {
                "variable": {
                    "value": "self.inputs_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "np.array([1, self.vae.input_dim], dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_308": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_310": {
                "variable": {
                    "value": "anneal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.train.get_or_create_global_step(), tf.float32) / self.total_anneal_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.anneal_cap",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_315": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum((-latent_log_var + tf.exp(latent_log_var) + latent_mean ** 2 - 1) / 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "simple_save_246": {
                "session": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'export_dir'",
                            "MethodArgument"
                        ],
                        [
                            "'export_dir'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "{'inputs_validation': self.inputs_validation}",
                    "type": "Dict",
                    "possible_values": []
                },
                "outputs": {
                    "value": "{'logits_validation': self.logits_validation}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "load_251": {
                "export_dir": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'export_dir'",
                            "MethodArgument"
                        ],
                        [
                            "'export_dir'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConfigProto_257": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_259": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_260": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_339": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_255": {
                "device_name": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_316": {
                "input_tensor": {
                    "value": "(-latent_log_var + tf.exp(latent_log_var) + latent_mean ** 2 - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_325": {
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_311": {
                "x": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "input_tensor": {
                    "value": "tf.gather_nd(softmax, inputs.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_326": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_nd_322": {
                "params": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inputs.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_281": {
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_dims + decoder_dims + [batch_size_train, batch_size_validation]",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "(batch_size_train, encoder_dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_317": {
                "x": {
                    "value": "latent_log_var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vae/models/Mult_VAE_training_horovod.py": {
        "sklearn": {
            "normalize_51": {
                "variable": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(data_input)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_30": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_36": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "hooks": {
                    "value": "[hvd.BroadcastGlobalVariablesHook(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_40": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_24": {
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "(batch_size_train, encoder_dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "vae/models/Mult_VAE_model.py": {
        "tensorflow": {
            "exp_32": {
                "variable": {
                    "value": "latent_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * latent_log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "layers": {
                    "value": "[DenseFromSparse(dims[0], activation=tf.nn.tanh, name='encoder_{}'.format(dims[0]), kernel_initializer=tf.contrib.layers.xavier_initializer(), bias_initializer=tf.truncated_normal_initializer(stddev=0.001), kernel_regularizer=tf.contrib.layers.l2_regularizer)] + [layers.Dense(d, activation=tf.nn.tanh, name='encoder_{}'.format(d), kernel_initializer=tf.contrib.layers.xavier_initializer(), bias_initializer=tf.truncated_normal_initializer(stddev=0.001), kernel_regularizer=tf.contrib.layers.l2_regularizer) for d in dims[1:-1]] + [layers.Dense(dims[-1], name='encoder_{}'.format(dims[-1]), kernel_initializer=tf.contrib.layers.xavier_initializer(), bias_initializer=tf.truncated_normal_initializer(stddev=0.001), kernel_regularizer=tf.contrib.layers.l2_regularizer)] + [layers.Reshape(target_shape=(2, last))]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "layers": {
                    "value": "[layers.Dense(d, activation=tf.nn.tanh, name='decoder_{}'.format(d), kernel_initializer=tf.contrib.layers.xavier_initializer(), bias_initializer=tf.truncated_normal_initializer(stddev=0.001), kernel_regularizer=tf.contrib.layers.l2_regularizer) for d in dims[:-1]] + [layers.Dense(dims[-1], name='decoder_{}'.format(dims[-1]), kernel_initializer=tf.contrib.layers.xavier_initializer(), bias_initializer=tf.truncated_normal_initializer(stddev=0.001), kernel_regularizer=tf.contrib.layers.l2_regularizer)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "latent_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_all[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_36": {
                "input": {
                    "value": "latent_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_all[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_86": {
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_93": {
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_72": {
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_56": {
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_64": {
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "vae/models/layers/densefromsparse.py": {
        "tensorflow": {
            "sparse_dense_matmul_13": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_15": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.sparse_dense_matmul(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, self.bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}