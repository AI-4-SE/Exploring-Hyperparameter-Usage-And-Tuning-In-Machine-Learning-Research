{
    "PCFG.py": {
        "torch": {
            "max_19": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_135": {
                "variable": {
                    "value": "(max_score, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scores[:, 0, n - 1, :self.nt_states] + root_scores",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_20": {
                "input": {
                    "value": "torch.exp(x - d) + torch.exp(y - d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "tmp_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_u, 2)",
                            "Call"
                        ],
                        [
                            "self.logsumexp(tmp_u, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "tmp_max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_max_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "tmp_left_child",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_left_child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_left_child, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "tmp_right_child",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_right_child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_right_child, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_127": {
                "variable": {
                    "value": "(max_score, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_max_score, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_128": {
                "variable": {
                    "value": "max_left_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_left_child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_left_child, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "max_idx.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "max_left_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_129": {
                "variable": {
                    "value": "max_right_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_right_child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tmp_right_child, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "max_idx.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "max_right_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_25": {
                "input": {
                    "value": "torch.exp(x - d).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "torch.exp(x - d.unsqueeze(dim).expand_as(x)).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(max_score, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_scores_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_scores.view(batch_size, tmp_scores.size(1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_121": {
                "variable": {
                    "value": "right_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "r_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_scores.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_20": {
                "input": {
                    "value": "y - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_25": {
                "input": {
                    "value": "x - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_27": {
                "input": {
                    "value": "x - d.unsqueeze(dim).expand_as(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "compare_trees.py": {
        "torch": {
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "np.asarray(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "load_115": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_117": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sent_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.t_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(t_states, state_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.nt_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(nt_states, state_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.root_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, state_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.rule_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_states ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.root_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim + state_dim, state_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.vocab_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim + state_dim, state_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_97": {
                "variable": {
                    "value": "root_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.root_mlp(root_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_98": {
                "variable": {
                    "value": "unary_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_mlp(t_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "unary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unary_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.vocab_mlp(t_emb), 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(2).expand(batch_size, x.size(1), self.t_states).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "unary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_101": {
                "variable": {
                    "value": "rule_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rule_mlp(nt_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.enc_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_46": {
                "variable": {
                    "value": "self.enc_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.enc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "root_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root_emb, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "t_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_emb, z_expand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "nt_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nt_emb, z.unsqueeze(1).expand(batch_size, self.nt_states, self.z_dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pcfg._inside(unary, rule_scores, root_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "t_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_29": {
                "*size": {
                    "value": "nt_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "z_dim + state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.nt_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "z_dim + state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_63": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[:, self.z_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_63": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[:, :self.z_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parse.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_38": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sent_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_62": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__102": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': args.__dict__, 'model': model.cpu(), 'word2idx': train_data.word2idx, 'idx2word': train_data.idx2word}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}