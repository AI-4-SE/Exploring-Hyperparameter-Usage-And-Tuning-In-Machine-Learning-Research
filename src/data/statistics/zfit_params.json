{
    "docs/plots/fftconv_spline_linear.py": {
        "tensorflow": {
            "linspace_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "n_point_plotting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/custom_3d_pdf_simple.py": {
        "tensorflow": {
            "cos_23": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zfit.Parameter('alpha', 0.2)",
                            "Call"
                        ],
                        [
                            "self.params['alpha']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sinh_24": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zfit.Parameter('beta', 0.4, floating=False)",
                            "Call"
                        ],
                        [
                            "self.params['beta']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/custom_pdf_advanced.py": {
        "tensorflow": {
            "log_37": {
                "x": {
                    "value": "param2 * momentum ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_37": {
                "x": {
                    "value": "energy ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/minimize_python_func.py": {
        "tensorflow": {}
    },
    "tests/data/test_binneddata.py": {
        "tensorflow": {
            "constant_22": {
                "value": {
                    "value": "asdf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_32": {
                "value": {
                    "value": "asdf",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_basePDF.py": {
        "tensorflow": {
            "cast_234": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.random.uniform(low=low, high=high, size=100000)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_237": {
                "variable": {
                    "value": "small_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.random.uniform(low=low, high=high, size=10)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_247": {
                "x": {
                    "value": "probs_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.pdf(small_samples)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_coordinates.py": {
        "tensorflow": {
            "constant_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "true_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data.py": {
        "tensorflow": {
            "ones_238": {
                "shape": {
                    "value": "(1000, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_263": {
                "x": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 2], [0, 1], [-2, 1], [-1, -1], [-5, 10]])",
                            "Call"
                        ],
                        [
                            "np.linspace((0, 5), (10, 15), num=11)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_numpy(obs=space2d, array=npdata1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_102": {
                "shape": {
                    "value": "(1000,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_144": {
                "shape": {
                    "value": "(1000,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_232": {
                "shape": {
                    "value": "(1000,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_graph.py": {
        "tensorflow": {
            "uniform_20": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_integrate.py": {
        "tensorflow": {
            "transpose_292": {
                "variable": {
                    "value": "vals_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vals_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(func4_2values)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_286": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(func4_values)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_332": {
                "x": {
                    "value": "2 * znp.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_327": {
                "x": {
                    "value": "(x - mu) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_limit.py": {
        "tensorflow": {
            "constant_10": {
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_16": {
                "x": {
                    "value": "rect_limits[0] < x",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "x < rect_limits[1]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_loss.py": {
        "tensorflow": {
            "constant_117": {
                "variable": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_values_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=mu_true, scale=sigma_true, size=(yield_true, 1))",
                            "Call"
                        ],
                        [
                            "np.random.normal(loc=mu_true, scale=4, size=(10000, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_119": {
                "variable": {
                    "value": "test_values2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_values_np2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=mu_true2, scale=sigma_true2, size=yield_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_181": {
                "variable": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_values_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=mu_true, scale=sigma_true, size=(yield_true, 1))",
                            "Call"
                        ],
                        [
                            "np.random.normal(loc=mu_true, scale=4, size=(10000, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_393": {
                "variable": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_values_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=mu_true, scale=sigma_true, size=(yield_true, 1))",
                            "Call"
                        ],
                        [
                            "np.random.normal(loc=mu_true, scale=4, size=(10000, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_416": {
                "variable": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_values_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=mu_true, scale=sigma_true, size=(yield_true, 1))",
                            "Call"
                        ],
                        [
                            "np.random.normal(loc=mu_true, scale=4, size=(10000, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_509": {
                "variable": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_values_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=mu_true, scale=sigma_true, size=(yield_true, 1))",
                            "Call"
                        ],
                        [
                            "np.random.normal(loc=mu_true, scale=4, size=(10000, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_26": {
                "mean": {
                    "value": "mu_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.2",
                            "Constant"
                        ]
                    ]
                },
                "stddev": {
                    "value": "sigma_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4.1",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "(size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_350": {
                "input_tensor": {
                    "value": "tf.math.log(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "input_tensor": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "z.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "create_test_values(size)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values, weights=weights)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs, tensor=test_values, weights=weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_std_152": {
                "input_tensor": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "z.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "create_test_values(size)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values, weights=weights)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs1, tensor=test_values)",
                            "Call"
                        ],
                        [
                            "tf.constant(test_values_np)",
                            "Call"
                        ],
                        [
                            "zfit.Data.from_tensor(obs=obs, tensor=test_values, weights=weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_350": {
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor((a_param - true_a) ** 2 + (b_param - true_b) ** 2 + (c_param - true_c) ** 4) + 0.42",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_operations.py": {
        "tensorflow": {
            "square_55": {
                "x": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parameter('param2', 2.0)",
                            "Call"
                        ],
                        [
                            "Parameter('param2', 2.0)",
                            "Call"
                        ],
                        [
                            "Parameter('param2', 2.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_parameter.py": {
        "tensorflow": {
            "square_157": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parameter(name='a', value=1)",
                            "Call"
                        ],
                        [
                            "Parameter(name='a', value=1)",
                            "Call"
                        ],
                        [
                            "zfit.Parameter(f'param', 42)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_110": {
                "x": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zfit.param.ComposedParameter('aoeu2', lambda params: 2 * params['p1'], {'p1': p1})",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_partial_integration.py": {
        "tensorflow": {
            "cos_16": {
                "x": {
                    "value": "x * y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pdf_cauchy.py": {
        "tensorflow": {
            "uniform_17": {
                "variable": {
                    "value": "test_values",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pdf_fftconv.py": {
        "tensorflow": {
            "linspace_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2432",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_135": {
                "variable": {
                    "value": "xnp",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "obs_kernel.rect_lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stop": {
                    "value": "obs.rect_upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "4023",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "variable": {
                    "value": "y_func",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func.pdf(x)",
                            "Call"
                        ],
                        [
                            "func.pdf(xfunc)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_func, (nfunc, nfunc))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nfunc, nfunc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "y_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss1.pdf(xkernel)",
                            "Call"
                        ],
                        [
                            "gauss1.pdf(xkernel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_kernel, (nkernel, nkernel))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nkernel, nkernel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_262": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_points, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_func.rect_lower",
                            "Attribute"
                        ]
                    ]
                },
                "maxval": {
                    "value": "stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_func.rect_upper",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform((n_points, 2), start, stop)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_tensor, (-1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_264": {
                "variable": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_func.rect_lower",
                            "Attribute"
                        ]
                    ]
                },
                "stop": {
                    "value": "stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_func.rect_upper",
                            "Attribute"
                        ]
                    ]
                },
                "num": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2432",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "transpose_265": {
                "variable": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.meshgrid(*tf.unstack(linspace, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "linspace_func",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(start, stop, num=n_points)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.meshgrid(*tf.unstack(linspace, axis=-1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_272": {
                "variable": {
                    "value": "linspace_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "obskernel.rect_lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stop": {
                    "value": "obskernel.rect_upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2432",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "transpose_275": {
                "variable": {
                    "value": "linspace_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.meshgrid(*tf.unstack(linspace_kernel, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "linspace_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linspace_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(obskernel.rect_lower, obskernel.rect_upper, num=n_points)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.meshgrid(*tf.unstack(linspace_kernel, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linspace_kernel, (-1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "variable": {
                    "value": "true_probsr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "true_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_conv_2d_np(func, gauss, obsfunc=obs_func, xfunc=linspace_func, xkernel=linspace_kernel)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_points, n_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "probsr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.pdf(x=x)",
                            "Call"
                        ],
                        [
                            "conv.pdf(x=x)",
                            "Call"
                        ],
                        [
                            "conv.pdf(x=linspace_data)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_points, n_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "tensor": {
                    "value": "true_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_conv_np(func, gauss, obs, x, xkernel=tf.linspace(*obs.limit1d, num=n_points))",
                            "Call"
                        ],
                        [
                            "true_conv_np(func, funck, obs, x=x, xkernel=kernel_points)",
                            "Call"
                        ],
                        [
                            "scipy.signal.fftconvolve(y_func, y_kernel, mode='same')",
                            "Call"
                        ],
                        [
                            "true_conv / (np.mean(true_conv) * obsfunc.rect_area())",
                            "BinOp"
                        ],
                        [
                            "scipy.signal.convolve(y_func, y_kernel, mode='same')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xfunc.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_265": {
                "*args": {
                    "value": "*tf.unstack(linspace, axis=-1)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "meshgrid_275": {
                "*args": {
                    "value": "*tf.unstack(linspace_kernel, axis=-1)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "linspace_51": {
                "start": {
                    "value": "*obs.limit1d",
                    "type": "Starred",
                    "possible_values": []
                },
                "num": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2432",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "unstack_265": {
                "value": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(start, stop, num=n_points)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.meshgrid(*tf.unstack(linspace, axis=-1)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_275": {
                "value": {
                    "value": "linspace_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(obskernel.rect_lower, obskernel.rect_upper, num=n_points)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.meshgrid(*tf.unstack(linspace_kernel, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(linspace_kernel, (-1, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pdf_kde.py": {
        "tensorflow": {
            "init_scope_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "init_scope_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pdf_polynomials.py": {
        "tensorflow": {
            "uniform_96": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_sampling, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pdfs.py": {
        "tensorflow": {
            "cast_298": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.random.uniform(low=space.lower, high=space.upper, size=(40000, pdf.n_obs))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_226": {
                "input_tensor": {
                    "value": "true_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gauss1.pdf(values[:, 3])]",
                            "List"
                        ],
                        [
                            "true_prob + [prod_gauss_3d.pdf(values[:, 0:3], norm=Space(limits=(((-5,) * 3,), ((4,) * 3,)), obs=['obs1', 'obs2', 'obs3']))]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_233": {
                "input_tensor": {
                    "value": "normalization_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "limits_4d.area() * probs_4d(tf.random.uniform(minval=low, maxval=high, shape=(40 ** 4, 4)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "uniform_231": {
                "minval": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(40 ** 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sampling.py": {
        "tensorflow": {
            "Variable_147": {
                "variable": {
                    "value": "n_draws_param",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "n_draws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n_draws",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_293": {
                "variable": {
                    "value": "n_to_produce",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_to_produce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_to_produce, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(n_to_produce, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_297": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_to_produce,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_332": {
                "variable": {
                    "value": "n_to_produce",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_to_produce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_to_produce, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(n_to_produce, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_338": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_to_produce,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_368": {
                "value": {
                    "value": "tuple([lower1] * n_samples1 + [lower2] * n_samples2 + [lower3] * n_samples3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_373": {
                "value": {
                    "value": "tuple([upper1] * n_samples1 + [upper2] * n_samples2 + [upper3] * n_samples3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_space.py": {
        "tensorflow": {}
    },
    "tests/test_tfext.py": {
        "tensorflow": {
            "constant_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_42": {
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_46": {
                "value": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_47": {
                "value": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_z.py": {
        "tensorflow": {
            "numpy_function_15": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "numpy_func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x_tensor, a_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.numpy_function(func=numpy_func, inp=[x_tensor, a_tensor], Tout=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(result)",
                            "Call"
                        ],
                        [
                            "wrapped_numpy_func(rnd, z.constant(3.0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_z_numpy.py": {
        "tensorflow": {}
    },
    "tests/test_z_random.py": {
        "tensorflow": {
            "Variable_14": {
                "variable": {
                    "value": "total_count_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000.0",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/__init__.py": {
        "tensorflow": {
            "get_logger_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "zfit/_data/binneddatav1.py": {
        "tensorflow": {
            "shape_32": {
                "variable": {
                    "value": "value_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.moveaxis(values, tuple(range(target.n_obs)), new_axes)",
                            "Call"
                        ],
                        [
                            "move_axis_obs(self.space, space, self.values)",
                            "Call"
                        ],
                        [
                            "znp.asarray(values, znp.float64)",
                            "Call"
                        ],
                        [
                            "znp.asarray(hist.values(flow=flow))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_38": {
                "variable": {
                    "value": "variances_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variances",
                            "Attribute"
                        ],
                        [
                            "move_axis_obs(self.space, space, self.variances)",
                            "Call"
                        ],
                        [
                            "znp.sqrt(values)",
                            "Call"
                        ],
                        [
                            "znp.asarray(variances)",
                            "Call"
                        ],
                        [
                            "hist.variances(flow=flow)",
                            "Call"
                        ],
                        [
                            "znp.asarray(variances)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_55": {
                "x": {
                    "value": "edges_shape - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "value_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(values)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "f'Edges (minus one) and values do not have the same shape: {edges_shape} vs {value_shape}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "assert_equal_44": {
                "x": {
                    "value": "variances_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(variances)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "value_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(values)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "f'Variances and values do not have the same shape: {variances_shape} vs {value_shape}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "znp.reshape(edge, (-1,))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/_loss/binnedloss.py": {
        "tensorflow": {
            "log_poisson_loss_59": {
                "variable": {
                    "value": "poisson_term",
                    "type": "variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values + znp.asarray(1e-307, dtype=znp.float64)",
                            "BinOp"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ]
                    ]
                },
                "log_input": {
                    "value": "znp.log(probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "compute_full_loss": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squared_difference_469": {
                "variable": {
                    "value": "chi2_term",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs * znp.sum(values)",
                            "BinOp"
                        ],
                        [
                            "mod.counts(dat)",
                            "Call"
                        ],
                        [
                            "mod.rel_counts(dat)",
                            "Call"
                        ],
                        [
                            "mod.rel_counts(dat)",
                            "Call"
                        ],
                        [
                            "mod.counts(dat)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values + znp.asarray(1e-307, dtype=znp.float64)",
                            "BinOp"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ],
                        [
                            "dat.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_471": {
                "variable": {
                    "value": "one_over_var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "znp.sqrt(probs + znp.asarray(1e-307, dtype=znp.float64))",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "znp.sqrt(probs + znp.asarray(1e-307, dtype=znp.float64))",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reciprocal_473": {
                "variable": {
                    "value": "one_over_var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "znp.sqrt(probs + znp.asarray(1e-307, dtype=znp.float64))",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "znp.sqrt(probs + znp.asarray(1e-307, dtype=znp.float64))",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_37": {
                "x": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "znp.sqrt(probs + znp.asarray(1e-307, dtype=znp.float64))",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "znp.sqrt(probs + znp.asarray(1e-307, dtype=znp.float64))",
                            "Call"
                        ],
                        [
                            "dat.variances()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/constraint.py": {
        "tensorflow": {}
    },
    "zfit/core/basemodel.py": {
        "tensorflow": {}
    },
    "zfit/core/baseobject.py": {
        "tensorflow": {}
    },
    "zfit/core/basepdf.py": {
        "tensorflow": {
            "InvalidArgumentError_623": {
                "node_def": {
                    "value": "`n` cannot be `None` if pdf is not extended.",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/core/binnedpdf.py": {
        "tensorflow": {
            "slice_910": {
                "variable": {
                    "value": "values_cut",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "counts",
                            "Name"
                        ],
                        [
                            "density",
                            "Name"
                        ],
                        [
                            "self.values(**kwargs)",
                            "Call"
                        ],
                        [
                            "self._call_pdf(x, norm=norm)",
                            "Call"
                        ],
                        [
                            "self._call_unnormalized_pdf(x)",
                            "Call"
                        ],
                        [
                            "values / self.normalization(norm)",
                            "BinOp"
                        ],
                        [
                            "self._call_ext_pdf(x, norm=norm)",
                            "Call"
                        ],
                        [
                            "self._call_pdf(x, norm=norm)",
                            "Call"
                        ],
                        [
                            "self._call_sample(n, limits)",
                            "Call"
                        ],
                        [
                            "BinnedData.from_tensor(space=limits, values=values, variances=None)",
                            "Call"
                        ],
                        [
                            "values.with_obs(original_limits)",
                            "Call"
                        ],
                        [
                            "z.random.counts_multinomial(n, probs=probs, dtype=znp.float64)",
                            "Call"
                        ],
                        [
                            "self._call_rel_counts(x, norm)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "lower_bins",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "upper_bins - lower_bins",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_963": {
                "variable": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "values_cut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(values, lower_bins, upper_bins - lower_bins)",
                            "Call"
                        ],
                        [
                            "values_cut * binareas",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(axis)",
                            "Call"
                        ],
                        [
                            "list(range(ndims))",
                            "Call"
                        ],
                        [
                            "convert_to_container(axis)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_1094": {
                "variable": {
                    "value": "all_lower_bins",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_lower_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_lower_bins, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1095": {
                "variable": {
                    "value": "all_upper_bins",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_upper_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_upper_bins, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_934": {
                "variable": {
                    "value": "lower_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.asarray(edge)",
                            "Call"
                        ],
                        [
                            "znp.reshape(edge, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "edge_lowest_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(edge_lower_index, dtype=znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "edge_upper_index - edge_lowest_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_937": {
                "variable": {
                    "value": "upper_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.asarray(edge)",
                            "Call"
                        ],
                        [
                            "znp.reshape(edge, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "edge_lower_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * rank",
                            "BinOp"
                        ],
                        [
                            "znp.array(edge_lower_index, dtype=znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "edge_highest_index - edge_lower_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_nd_315": {
                "variable": {
                    "value": "ordered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "padded_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.pad(values, znp.ones((z._get_ndims(values), 2), dtype=znp.float64), mode='constant')",
                            "Call"
                        ],
                        [
                            "znp.pad(values, znp.ones((z._get_ndims(values), 2), dtype=znp.float64), mode='constant')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "binindices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "unbinned_to_binindex(x, self.space, flow=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "unbinned_to_binindex(x, self.space, flow=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_387": {
                "variable": {
                    "value": "ordered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "padded_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.pad(values, znp.ones((z._get_ndims(values), 2), dtype=znp.float64), mode='constant')",
                            "Call"
                        ],
                        [
                            "znp.pad(values, znp.ones((z._get_ndims(values), 2), dtype=znp.float64), mode='constant')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "binindices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "unbinned_to_binindex(x, self.space, flow=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "unbinned_to_binindex(x, self.space, flow=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_944": {
                "variable": {
                    "value": "lower_edge_unscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unscaled_edges[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "edge_lowest_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(edge_lower_index, dtype=znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "edge_upper_index - edge_lowest_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_949": {
                "variable": {
                    "value": "upper_edge_unscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "unscaled_edges[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "edge_lower_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * rank",
                            "BinOp"
                        ],
                        [
                            "znp.array(edge_lower_index, dtype=znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "edge_highest_index - edge_lower_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1042": {
                "variable": {
                    "value": "lower_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(lower_bin_float, dtype=znp.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1051": {
                "variable": {
                    "value": "new_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.asarray(edge)",
                            "Call"
                        ],
                        [
                            "znp.reshape(edge, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "lower_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(lower_bin_float, dtype=znp.int32), [-1])",
                            "Call"
                        ],
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_update_1054": {
                "variable": {
                    "value": "new_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(edge, lower_bin, size + 1)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(new_edge, [tf.constant([0]), size], [lower_i[0], upper_i[0]])",
                            "Call"
                        ],
                        [
                            "edge",
                            "Name"
                        ],
                        [
                            "znp.reshape(new_edge, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[tf.constant([0]), size]",
                    "type": "List",
                    "possible_values": []
                },
                "updates": {
                    "value": "[lower_i[0], upper_i[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_928": {
                "input": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.asarray(edge)",
                            "Call"
                        ],
                        [
                            "znp.reshape(edge, (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1059": {
                "variable": {
                    "value": "new_edge_unscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.asarray(edge)",
                            "Call"
                        ],
                        [
                            "znp.reshape(edge, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "lower_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(lower_bin_float, dtype=znp.int32), [-1])",
                            "Call"
                        ],
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1042": {
                "x": {
                    "value": "lower_bin_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfp.stats.find_bins(lower_i, edge, extend_lower_interval=True, extend_upper_interval=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "znp.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1049": {
                "tensor": {
                    "value": "tf.cast(upper_bin_float, dtype=znp.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1049": {
                "x": {
                    "value": "upper_bin_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfp.stats.find_bins(upper_i, edge, extend_lower_interval=True, extend_upper_interval=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "znp.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1055": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/core/binning.py": {
        "tensorflow": {
            "constant_30": {
                "variable": {
                    "value": "none_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "NONE_TENSOR",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "none_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "numpy_function_45": {
                "variable": {
                    "value": "(bincounts, *edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "histdd",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inputs_cleaned",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inp if inp is not None else none_tensor for inp in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "Tout": {
                    "value": "out_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.float64, tf.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "numpy_function_77": {
                "variable": {
                    "value": "(values, variances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "unbinned_to_hist_eager",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[values, edges, weights]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float64, tf.float64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "midpoints_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.meshgrid(*tf.unstack(midpoints), indexing='ij')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_122": {
                "variable": {
                    "value": "bincounts_nonzero_index",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bincounts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(bincounts)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_123": {
                "variable": {
                    "value": "bincounts_nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bincounts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(bincounts)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "bincounts_nonzero_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(bincounts)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_124": {
                "variable": {
                    "value": "midpoints_nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "midpoints_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(*tf.unstack(midpoints), indexing='ij'), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "bincounts_nonzero_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(bincounts)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_97": {
                "variable": {
                    "value": "bin_is_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stacked_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack(bins, axis=-1)",
                            "Call"
                        ],
                        [
                            "stacked_bins + 1",
                            "BinOp"
                        ],
                        [
                            "znp.asarray(binindices, dtype=znp.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_120": {
                "*args": {
                    "value": "*tf.unstack(midpoints)",
                    "type": "Starred",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_120": {
                "value": {
                    "value": "midpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(edges[:, :-1] + edges[:, 1:]) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/core/constraint.py": {
        "tensorflow": {
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.distribution.log_prob(self._params_array)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "tensor_diag_236": {
                "variable": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "z.pow(sigma, 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_diag_239": {
                "variable": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "z.pow(sigma, 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_258": {
                "input": {
                    "value": "create_covariance(observation, uncertainty)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/core/coordinates.py": {
        "tensorflow": {}
    },
    "zfit/core/data.py": {
        "tensorflow": {
            "cast_374": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df[list(obs.obs)].values",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_408": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample1 + sample2",
                            "BinOp"
                        ],
                        [
                            "tf.cast(array, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tensor, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(tensor, -1)",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(tensor, -1)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(tensor)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_757": {
                "variable": {
                    "value": "sample_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "sample_func()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "ztypes.float",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs.n_obs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "f'sample_data_holder_{cls.get_cache_counting()}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "shuffle_861": {
                "variable": {
                    "value": "sample2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sample2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample2.value(obs=obs)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(sample2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_504": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_range.filter(value)",
                            "Call"
                        ],
                        [
                            "self.dataset.value()",
                            "Call"
                        ],
                        [
                            "self._cut_data(value, obs=self._original_space.obs)",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(value, -1)",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(value, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(value, always_list=True)",
                            "Call"
                        ],
                        [
                            "[value[i] for i in perm_indices]",
                            "ListComp"
                        ],
                        [
                            "z.stack_x(value)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_614": {
                "input": {
                    "value": "self.value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_367": {
                "x": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df[list(obs.obs)].values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/core/integration.py": {
        "tensorflow": {
            "cast_95": {
                "variable": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simpsons_options['draws_simpson']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(num_points, znp.int32)",
                            "Call"
                        ],
                        [
                            "num_points + (num_points % 2 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "znp.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_382": {
                "variable": {
                    "value": "initial_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ],
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "while_loop_384": {
                "variable": {
                    "value": "(_, final_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda batch_num, _: batch_num < num_batches",
                            "Lambda"
                        ],
                        [
                            "lambda batch_num, _: batch_num < num_batches",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "initial_body_args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, initial_mean)",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_444": {
                "variable": {
                    "value": "fake_resource_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "fake_hack_ResVar_for_custom_gradient",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "z.constant(4242.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_486": {
                "variable": {
                    "value": "initial_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_487": {
                "variable": {
                    "value": "(_, final_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda batch_num, _: batch_num < num_batches",
                            "Lambda"
                        ],
                        [
                            "lambda batch_num, _: batch_num < num_batches",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, initial_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_all_finite_105": {
                "x": {
                    "value": "(lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "message": {
                    "value": "'MC integration does (currently) not support unbound limits (np.infty) as given here:\\nlower: {}, upper: {}'.format(lower, upper)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_all_finite_176": {
                "x": {
                    "value": "(lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "message": {
                    "value": "'MC integration does (currently) not support unbound limits (np.infty) as given here:\\nlower: {}, upper: {}'.format(lower, upper)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "guarantee_const_467": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mc_sampler(space.n_obs, sequence_indices=indices, dtype=ztypes.float, randomized=False)",
                            "Call"
                        ],
                        [
                            "mc_sampler(shape=(batch_size, space.n_obs), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.guarantee_const(sample)",
                            "Call"
                        ],
                        [
                            "(np.array(upper[0]) - np.array(lower[0])) * sample + lower[0]",
                            "BinOp"
                        ],
                        [
                            "znp.transpose(a=sample)",
                            "Call"
                        ],
                        [
                            "func(sample)",
                            "Call"
                        ],
                        [
                            "tf.guarantee_const(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "guarantee_const_471": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mc_sampler(space.n_obs, sequence_indices=indices, dtype=ztypes.float, randomized=False)",
                            "Call"
                        ],
                        [
                            "mc_sampler(shape=(batch_size, space.n_obs), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.guarantee_const(sample)",
                            "Call"
                        ],
                        [
                            "(np.array(upper[0]) - np.array(lower[0])) * sample + lower[0]",
                            "BinOp"
                        ],
                        [
                            "znp.transpose(a=sample)",
                            "Call"
                        ],
                        [
                            "func(sample)",
                            "Call"
                        ],
                        [
                            "tf.guarantee_const(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "guarantee_const_474": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.mean(func_vals, axis=reduce_axis)",
                            "Call"
                        ],
                        [
                            "znp.mean(sample)",
                            "Call"
                        ],
                        [
                            "tf.guarantee_const(batch_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_266": {
                "variable": {
                    "value": "ifloat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n_axes + xval.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_298": {
                "variable": {
                    "value": "(avg, error, std, ntot, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda batch_num, _: batch_num < num_batches",
                            "Lambda"
                        ],
                        [
                            "lambda batch_num, _: batch_num < num_batches",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body_integrate",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[avg, error, std, ntot, i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_333": {
                "x": {
                    "value": "z.convert_to_tensor(space.rect_area())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "avg.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_373": {
                "x": {
                    "value": "batch_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_377": {
                "*inputs": {
                    "value": "batch_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_458": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_526": {
                "*inputs": {
                    "value": "Total mean calculated = ",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "final_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_332": {
                "pred": {
                    "value": "error > tol",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "print_none_return",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : None",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "GradientTape_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_475": {
                "x": {
                    "value": "batch_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_480": {
                "*inputs": {
                    "value": "batch_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_507": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "print_304": {
                "*inputs": {
                    "value": "i:",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n_axes + xval.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "print_314": {
                "*inputs": {
                    "value": "Estimated integral error (",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.minimum(error_sobol, error_random) * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_256": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_228": {}
        }
    },
    "zfit/core/interfaces.py": {
        "tensorflow": {}
    },
    "zfit/core/loss.py": {
        "tensorflow": {
            "log_poisson_loss_891": {
                "variable": {
                    "value": "term_new",
                    "type": "variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "nevents_collected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "znp.stack(nevents_collected, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "log_input": {
                    "value": "znp.log(yields)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_885": {
                "variable": {
                    "value": "nevents",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nevents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((d.nevents for d in data))",
                            "Call"
                        ],
                        [
                            "150000",
                            "Constant"
                        ],
                        [
                            "dat.n_events if dat.weights is None else z.reduce_sum(dat.weights)",
                            "IfExp"
                        ],
                        [
                            "tf.cast(nevents, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_320": {
                "variable": {
                    "value": "log_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-znp.divide(log_offset_sum, nevents_tot)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/core/parameter.py": {
        "tensorflow": {
            "register_tensor_conversion_function_70": {
                "base_type": {
                    "value": "convertable",
                    "type": "variable",
                    "possible_values": []
                },
                "conversion_func": {
                    "value": "_dense_var_to_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "priority": {
                    "value": "priority",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "self.variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "constraint": {
                    "value": "constraint",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_393": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_static_value_814": {
                "variable": {
                    "value": "self._value_np",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "partial": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "guarantee_const_815": {
                "variable": {
                    "value": "self._value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.convert_to_tensor(value, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_390": {
                "variable": {
                    "value": "self._lower_limit_neg_inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "-np.infty",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_392": {
                "variable": {
                    "value": "self._upper_limit_neg_inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "np.infty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_429": {
                "variable": {
                    "value": "self._lower_limit_neg_inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "-np.infty",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "self._upper_limit_neg_inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "np.infty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_565": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_649": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower",
                            "Attribute"
                        ],
                        [
                            "tf.cast(minval, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_653": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper",
                            "Attribute"
                        ],
                        [
                            "tf.cast(maxval, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_674": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_782": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_785": {
                "input": {
                    "value": "self.value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "executing_eagerly_940": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_431": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_447": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_476": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "executing_eagerly_641": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_815": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assert_greater_596": {
                "x": {
                    "value": "tf.cast(value, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.lower, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'Setting value {value} invalid for parameter {self.name} with limits {self.lower} - {self.upper}. This is changed. In order to silence this and clip the value, you can use (with caution, advanced) `Parameter.assign`'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "assert_less_601": {
                "x": {
                    "value": "tf.cast(value, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.upper, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'Setting value {value} invalid for parameter {self.name} with limits {self.lower} - {self.upper}. This is changed. In order to silence this and clip the value, you can use (with caution, advanced) `Parameter.assign`'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "cast_983": {
                "x": {
                    "value": "tf.complex(_real, _imag)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_1011": {
                "x": {
                    "value": "tf.complex(_mod * znp.cos(_arg), _mod * znp.sin(_arg))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_1296": {
                "x": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "convert_to_container(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_597": {
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_598": {
                "x": {
                    "value": "self.lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_602": {
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(value)",
                            "Call"
                        ],
                        [
                            "z.to_complex(value)",
                            "Call"
                        ],
                        [
                            "z.to_real(value)",
                            "Call"
                        ],
                        [
                            "Parameter(name=name, value=value, lower=lower, upper=upper, step_size=step_size)",
                            "Call"
                        ],
                        [
                            "ConstantParameter(name, value=value)",
                            "Call"
                        ],
                        [
                            "ComplexParameter.from_cartesian(name, real=complex_params[0], imag=complex_params[1])",
                            "Call"
                        ],
                        [
                            "a._AsTensor()",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "super().value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "super().read_value()",
                            "Call"
                        ],
                        [
                            "self.constraint(value)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(value, preferred_dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(value, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "sampler(size=self.shape, low=minval, high=maxval)",
                            "Call"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ],
                        [
                            "self._value_fn(params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(*params)",
                            "Call"
                        ],
                        [
                            "self._value_fn(**params)",
                            "Call"
                        ],
                        [
                            "self._value_np",
                            "Attribute"
                        ],
                        [
                            "f'{self.numpy():.4g}'",
                            "JoinedStr"
                        ],
                        [
                            "'graph-node'",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_603": {
                "x": {
                    "value": "self.upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "complex_984": {
                "real": {
                    "value": "_real",
                    "type": "variable",
                    "possible_values": []
                },
                "imag": {
                    "value": "_imag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "complex_1012": {
                "real": {
                    "value": "_mod * znp.cos(_arg)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "imag": {
                    "value": "_mod * znp.sin(_arg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/core/sample.py": {
        "tensorflow": {
            "cast_198": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_210": {
                "variable": {
                    "value": "initial_is_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "EMPTY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "inital_n_produced",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_222": {
                "variable": {
                    "value": "initial_n_drawn",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_223": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.cast(n, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "dynamic_array_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "clear_after_read": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "(limits.n_obs,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_480": {
                "variable": {
                    "value": "n_min_to_produce",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_min_to_produce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3000",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.cast(n_min_to_produce, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_481": {
                "variable": {
                    "value": "inital_n_produced",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inital_n_produced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(inital_n_produced, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_482": {
                "variable": {
                    "value": "initial_n_drawn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "initial_n_drawn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(initial_n_drawn, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_505": {
                "variable": {
                    "value": "new_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_array.stack()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(new_sample)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(new_sample)",
                            "Call"
                        ],
                        [
                            "new_sample[:n, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "broadcast_to_26": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.constant(1.0, shape=(1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_to_produce,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "n_produced",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_218": {
                "variable": {
                    "value": "initial_is_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dims": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_330": {
                "variable": {
                    "value": "n_drawn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_drawn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_drawn, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "n_to_produce",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_435": {
                "variable": {
                    "value": "filtered_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnd_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.from_tensor(obs=new_limits, tensor=rnd_sample)",
                            "Call"
                        ],
                        [
                            "znp.concatenate(rnd_samples, axis=0)",
                            "Call"
                        ],
                        [
                            "sample_drawn[:, :-1] * (upper - lower) + lower",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "take_or_not",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities > random_thresholds",
                            "Compare"
                        ],
                        [
                            "take_or_not[0] if len(take_or_not.shape) == 2 else take_or_not",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_508": {
                "variable": {
                    "value": "new_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_array.stack()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(new_sample)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(new_sample)",
                            "Call"
                        ],
                        [
                            "new_sample[:n, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "poisson_567": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "lam": {
                    "value": "pdf.get_yield()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_568": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_44": {
                "variable": {
                    "value": "sample_drawn",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_partial_to_produce, limits.n_obs + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_non_negative_200": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_244": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_produced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(new_scaling_needed, calc_new_n_produced, lambda : n_produced)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, tf.int64)",
                            "Call"
                        ],
                        [
                            "n_produced + n_partial_to_produce",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_289": {
                "variable": {
                    "value": "one_over_eff_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 / eff * 1.01 * eff_precision",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_296": {
                "variable": {
                    "value": "max_produce_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "800000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_312": {
                "variable": {
                    "value": "is_not_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "is_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(is_sampled, current_sampled)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "boolean_mask_314": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tensor=lower, mask=is_not_sampled)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "is_not_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(is_sampled)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_315": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tensor=upper, mask=is_not_sampled)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "is_not_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(is_sampled)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_317": {
                "variable": {
                    "value": "draw_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_not_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(is_sampled)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_368": {
                "variable": {
                    "value": "weights_scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "new_scaling_needed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_prob_weights_ratio > weights_scaling",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : max_prob_weights_ratio * overestimate_factor_scaling",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : weights_scaling",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_381": {
                "variable": {
                    "value": "n_produced",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "new_scaling_needed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_prob_weights_ratio > weights_scaling",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "calc_new_n_produced",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : n_produced",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "greater_398": {
                "variable": {
                    "value": "invalid_probs_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob(rnd_sample)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weights_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_scaling * weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_399": {
                "variable": {
                    "value": "failed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_scaling * weights",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "invalid_probs_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(probabilities, weights_scaled)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_440": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "draw_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_not_sampled)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "take_or_not",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities > random_thresholds",
                            "Compare"
                        ],
                        [
                            "take_or_not[0] if len(take_or_not.shape) == 2 else take_or_not",
                            "IfExp"
                        ]
                    ]
                }
            },
            "to_dense_441": {
                "variable": {
                    "value": "current_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "tf.SparseTensor(indices=indices, values=tf.broadcast_to(input=(True,), shape=(n_accepted,)), dense_shape=(tf.cast(n, dtype=tf.int64),))",
                    "type": "Call",
                    "possible_values": []
                },
                "default_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_or_449": {
                "variable": {
                    "value": "is_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "is_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(is_sampled, current_sampled)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "current_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(tf.SparseTensor(indices=indices, values=tf.broadcast_to(input=(True,), shape=(n_accepted,)), dense_shape=(tf.cast(n, dtype=tf.int64),)), default_value=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_452": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "while_loop_497": {
                "cond": {
                    "value": "not_enough_produced",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "sample_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n, sample, inital_n_produced, initial_n_drawn, efficiency_estimation, initial_is_sampled, weights_scaling, weights_maximum, prob_maximum, n_min_to_produce)",
                            "Tuple"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "n_partial_to_produce",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z.to_real(n_to_produce) * z.to_real(frac)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_216": {
                "x": {
                    "value": "tf.cast(limits.n_events, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_225": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_269": {
                "*inputs": {
                    "value": "Number of samples to produce:",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "n_to_produce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n - n_produced",
                            "BinOp"
                        ],
                        [
                            "n_to_produce * one_over_eff_int",
                            "BinOp"
                        ],
                        [
                            "znp.floor_divide(n_to_produce, eff_precision)",
                            "Call"
                        ],
                        [
                            "znp.maximum(n_to_produce, n_min_to_produce)",
                            "Call"
                        ],
                        [
                            "znp.minimum(n_to_produce, max_produce_cap)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_positive_297": {
                "x": {
                    "value": "n_to_produce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n - n_produced",
                            "BinOp"
                        ],
                        [
                            "n_to_produce * one_over_eff_int",
                            "BinOp"
                        ],
                        [
                            "znp.floor_divide(n_to_produce, eff_precision)",
                            "Call"
                        ],
                        [
                            "znp.maximum(n_to_produce, n_min_to_produce)",
                            "Call"
                        ],
                        [
                            "znp.minimum(n_to_produce, max_produce_cap)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "n_to_produce went negative, overflow?",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_non_negative_332": {
                "x": {
                    "value": "n_drawn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_drawn, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "n_to_produce",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_335": {
                "input": {
                    "value": "rnd_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.from_tensor(obs=new_limits, tensor=rnd_sample)",
                            "Call"
                        ],
                        [
                            "znp.concatenate(rnd_samples, axis=0)",
                            "Call"
                        ],
                        [
                            "sample_drawn[:, :-1] * (upper - lower) + lower",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assert_equal_337": {
                "x": {
                    "value": "tf.shape(input=probabilities)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_rnd_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(input=rnd_sample)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_375": {
                "variable": {
                    "value": "n_produced_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_produced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(new_scaling_needed, calc_new_n_produced, lambda : n_produced)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, tf.int64)",
                            "Call"
                        ],
                        [
                            "n_produced + n_partial_to_produce",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_409": {
                "x": {
                    "value": "tf.shape(input=failed_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_437": {
                "input": {
                    "value": "filtered_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tensor=rnd_sample, mask=take_or_not, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_216": {
                "x": {
                    "value": "limits.n_events",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_337": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob(rnd_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_379": {
                "x": {
                    "value": "tf.round(binomial.sample())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_409": {
                "input": {
                    "value": "failed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tensor=weights_scaled, mask=invalid_probs_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_greater_equal_413": {
                "x": {
                    "value": "weights_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_scaling * weights",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob(rnd_sample)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "\"Not all weights are >= probs so the sampling will be biased. If a custom `sample_and_weights` was used, make sure that either the shape of the custom sampler (resp. it's weights) overlap better or decrease the `max_weight`\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTensor_442": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tensor=draw_indices, mask=take_or_not)",
                            "Call"
                        ],
                        [
                            "indices[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.range(n_produced, n_produced_new)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.broadcast_to(input=(True,), shape=(n_accepted,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "(tf.cast(n, dtype=tf.int64),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_456": {
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tensor=draw_indices, mask=take_or_not)",
                            "Call"
                        ],
                        [
                            "indices[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.range(n_produced, n_produced_new)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_379": {
                "x": {
                    "value": "binomial.sample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_444": {
                "input": {
                    "value": "(True,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_accepted,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_445": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random.poisson(lam=pdf.get_yield(), shape=(), dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(n, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/core/space.py": {
        "tensorflow": {
            "logical_and_158": {
                "variable": {
                    "value": "inside",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "above_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.all(tf.greater_equal(x, lower), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "below_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.all(tf.less_equal(x, upper), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_3342": {
                "variable": {
                    "value": "tensor_found",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._limit_fn, self.n_obs)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "boolean_mask_164": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "inside_rect_limits(x, rect_limits=rect_limits, axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_static_value_328": {
                "variable": {
                    "value": "lower_nobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lower.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_static_value_329": {
                "variable": {
                    "value": "upper_nobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "upper.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_859": {
                "variable": {
                    "value": "filtered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "self.inside(x, guarantee_limits=guarantee_limits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_equal_156": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(upper)",
                            "Call"
                        ],
                        [
                            "self._sanitize_rect_limit(upper)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(rect_limits[1])",
                            "Call"
                        ],
                        [
                            "z.unstable._try_convert_numpy(upper)",
                            "Call"
                        ],
                        [
                            "self.upper[0][0]",
                            "Subscript"
                        ],
                        [
                            "z.unstable._try_convert_numpy(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_157": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(lower)",
                            "Call"
                        ],
                        [
                            "self._sanitize_rect_limit(lower)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(rect_limits[0])",
                            "Call"
                        ],
                        [
                            "z.unstable._try_convert_numpy(lower)",
                            "Call"
                        ],
                        [
                            "self.lower[0][0]",
                            "Subscript"
                        ],
                        [
                            "z.unstable._try_convert_numpy(lower)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_static_value_190": {
                "tensor": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_static_value_318": {
                "variable": {
                    "value": "lower_nevents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lower.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_static_value_319": {
                "variable": {
                    "value": "upper_nevents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "upper.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_543": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "self.inside(x, guarantee_limits=guarantee_limits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binning",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "broadcast_to_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "znp.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ],
                        [
                            "_sanitize_x_input(x, n_obs=self.n_obs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_tensor_200": {
                "x": {
                    "value": "limit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "limit.with_axes(None)",
                            "Call"
                        ],
                        [
                            "limit.with_obs(None)",
                            "Call"
                        ],
                        [
                            "limit_fn",
                            "Name"
                        ],
                        [
                            "convert_to_tensor_or_numpy(limit, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "z.unstable.broadcast_to(limit, shape=(1, 1))",
                            "Call"
                        ],
                        [
                            "z.unstable.expand_dims(limit, axis=0)",
                            "Call"
                        ],
                        [
                            "Limit(limit_fn=limit, rect_limits=rect_limits, n_obs=n_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_greater_342": {
                "x": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(upper)",
                            "Call"
                        ],
                        [
                            "self._sanitize_rect_limit(upper)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(rect_limits[1])",
                            "Call"
                        ],
                        [
                            "z.unstable._try_convert_numpy(upper)",
                            "Call"
                        ],
                        [
                            "self.upper[0][0]",
                            "Subscript"
                        ],
                        [
                            "z.unstable._try_convert_numpy(upper)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(lower)",
                            "Call"
                        ],
                        [
                            "self._sanitize_rect_limit(lower)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(rect_limits[0])",
                            "Call"
                        ],
                        [
                            "z.unstable._try_convert_numpy(lower)",
                            "Call"
                        ],
                        [
                            "self.lower[0][0]",
                            "Subscript"
                        ],
                        [
                            "z.unstable._try_convert_numpy(lower)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "All upper limits have to be larger than the lower limits and are given as (lower, upper). Maybe (upper, lower) was entered?",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_to_498": {
                "input": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_825": {
                "input": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_3354": {
                "value": {
                    "value": "objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._limit_fn, self.n_obs)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/core/tensorlike.py": {
        "tensorflow": {
            "register_tensor_conversion_function_17": {
                "base_type": {
                    "value": "convertable",
                    "type": "variable",
                    "possible_values": []
                },
                "conversion_func": {
                    "value": "_dense_var_to_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "priority": {
                    "value": "priority",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/minimizers/base_tf.py": {
        "tensorflow": {}
    },
    "zfit/minimizers/errors.py": {
        "tensorflow": {
            "ForwardAccumulator_221": {
                "primals": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(params)",
                            "Call"
                        ]
                    ]
                },
                "tangents": {
                    "value": "list(vector)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/minimizers/evaluation.py": {
        "tensorflow": {}
    },
    "zfit/minimizers/minimizer_tfp.py": {
        "tensorflow": {
            "tensor_diag_116": {
                "variable": {
                    "value": "initial_inv_hessian_est",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[p.step_size for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unstack_65": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/minimizers/optimizers_tf.py": {
        "tensorflow": {
            "Adam_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Adam'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/basefunctor.py": {
        "tensorflow": {
            "assert_non_negative_185": {
                "x": {
                    "value": "remaining_frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_parameter(remaining_frac_func, params=fracs)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "f'The remaining fraction is negative, the sum of fracs is > 0. Fracs: {fracs}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "constant_180": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_182": {
                "inputs": {
                    "value": "fracs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(fracs)",
                            "Call"
                        ],
                        [
                            "[convert_to_parameter(frac) for frac in fracs]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/basic.py": {
        "tensorflow": {
            "assert_all_finite_68": {
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.exp(lambda_ * self._shift_x(x))",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "f'Exponential PDF {self} has non valid values. This is likely caused by numerical problems: if the exponential is too steep, this will yield NaNs or infs. Make sure that your lambda is small enough and/or the initial space is in the same region as your data (and norm, if explicitly set differently). If this issue still persists, please oben an issue on Github: https://github.com/zfit/zfit'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/conditional.py": {
        "tensorflow": {
            "TensorSpec_93": {
                "variable": {
                    "value": "output_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *x_values.shape[1:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_141": {
                "variable": {
                    "value": "output_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *x_values.shape[1:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_159": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x.nevents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "message": {
                    "value": "Different number of n requested than x given for conditional sampling. Needs to agree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorSpec_177": {
                "variable": {
                    "value": "output_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, pdf.n_obs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/convolution.py": {
        "tensorflow": {
            "linspace_247": {
                "variable": {
                    "value": "x_funcs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lower_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_func + kernel_shift",
                            "BinOp"
                        ]
                    ]
                },
                "stop": {
                    "value": "upper_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper_func + kernel_shift",
                            "BinOp"
                        ]
                    ]
                },
                "num": {
                    "value": "tf.cast(nbins_func, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_251": {
                "variable": {
                    "value": "x_kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lower_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stop": {
                    "value": "upper_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(nbins_kernel, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_255": {
                "variable": {
                    "value": "x_func",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tf.unstack(x_funcs, axis=-1)",
                    "type": "Starred",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "meshgrid_260": {
                "variable": {
                    "value": "x_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tf.unstack(x_kernels, axis=-1)",
                    "type": "Starred",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_279": {
                "variable": {
                    "value": "y_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdfs[1].pdf(data_kernel, norm=False)",
                            "Call"
                        ],
                        [
                            "znp.reshape(y_kernel, kernel_dims)",
                            "Call"
                        ],
                        [
                            "tf.reverse(y_kernel, axis=range(self.n_obs))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "range(self.n_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convolution_297": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_func_rect_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.reshape(y_func_rect, (1, *func_dims, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "y_kernel_rect_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.reshape(y_kernel_rect, (*kernel_dims, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_406": {
                "variable": {
                    "value": "thresholds_unscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_drawn,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_215": {
                "x": {
                    "value": "n - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(1000000.0, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "Number of points automatically calculated to be used for the FFT based convolution exceeds 1e6. If you want to use this number - or an even higher value - use explicitly the `n` argument.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_217": {
                "x": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_247": {
                "x": {
                    "value": "nbins_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.ceil(nbins_func_exact_max)",
                            "Call"
                        ],
                        [
                            "self._conv_limits['nbins_func']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_252": {
                "x": {
                    "value": "nbins_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Name"
                        ],
                        [
                            "self._conv_limits['nbins_kernel']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_398": {
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_samples(sample_func, sample_kernel, obs=limits, shuffle=True)",
                            "Call"
                        ],
                        [
                            "limits.filter(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_positive_402": {
                "x": {
                    "value": "n_drawn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(sample)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "message": {
                    "value": "Could not draw any samples. Check the limits of the func and kernel.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_255": {
                "value": {
                    "value": "x_funcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(lower_func, upper_func, tf.cast(nbins_func, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_260": {
                "value": {
                    "value": "x_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(lower_kernel, upper_kernel, tf.cast(nbins_kernel, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_365": {
                "shape": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_365": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/dist_tfp.py": {
        "tensorflow": {
            "assert_all_finite_114": {
                "x": {
                    "value": "(lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "message": {
                    "value": "Are infinite limits needed? Causes troubles with NaNs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/functions.py": {
        "tensorflow": {
            "accumulate_n_77": {
                "variable": {
                    "value": "sum_funcs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "funcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_container(funcs)",
                            "Call"
                        ],
                        [
                            "[func.func(x) for func in self.funcs]",
                            "ListComp"
                        ],
                        [
                            "[func.func(x) for func in self.funcs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "accumulate_n_86": {
                "inputs": {
                    "value": "integrals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[func.analytic_integrate(limits=limits, norm=norm) for func in self.funcs]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/functor.py": {
        "tensorflow": {
            "shuffle_229": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.concatenate(samples, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_220": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "counts_multinomial(total_count=n, probs=self.fracs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/histmodifier.py": {
        "tensorflow": {
            "stack_108": {
                "variable": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "modifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "{f'sysshape_{i}': zfit.Parameter(f'auto_sysshape_{self}_{i}', 1.0) for i in range(pdf.counts(obs).shape.num_elements())}",
                            "DictComp"
                        ],
                        [
                            "list(self._binwise_modifiers.values())",
                            "Call"
                        ],
                        [
                            "znp.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_76": {
                "variable": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params.values())",
                            "Call"
                        ],
                        [
                            "znp.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/kde.py": {
        "tensorflow": {
            "concat_568": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_62": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_229": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_359": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_488": {
                "variable": {
                    "value": "shape_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_489": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_548": {
                "variable": {
                    "value": "lower_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "lower_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.where(lower_area)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_561": {
                "variable": {
                    "value": "upper_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "upper_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.where(upper_area)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_571": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_1367": {
                "variable": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(size, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(num_grid_points, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_1542": {
                "variable": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(size, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(num_grid_points, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1547": {
                "variable": {
                    "value": "self._data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_454": {
                "input": {
                    "value": "1 / size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.cast(size, tf.int32),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_552": {
                "variable": {
                    "value": "lower_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kde_silverman._grid_data",
                            "Attribute"
                        ],
                        [
                            "tf.concat(new_weights, axis=0)",
                            "Call"
                        ],
                        [
                            "data.weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "lower_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.where(lower_area)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_565": {
                "variable": {
                    "value": "upper_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kde_silverman._grid_data",
                            "Attribute"
                        ],
                        [
                            "tf.concat(new_weights, axis=0)",
                            "Call"
                        ],
                        [
                            "data.weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "upper_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.where(upper_area)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_1138": {
                "variable": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(size, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(num_grid_points, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_363": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.sum(weights)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(data)[0], ztypes.float)",
                            "Call"
                        ],
                        [
                            "znp.sum(weights)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(data)[0], ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_712": {
                "x": {
                    "value": "all_inside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.all(inside)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "message": {
                    "value": "Not all data points are inside the limits but a truncate kernel was chosen.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1368": {
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_data[0], ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1368": {
                "value": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.cast(num_grid_points, ztypes.int))",
                            "Call"
                        ],
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.constant(num_grid_points, ztypes.int))",
                            "Call"
                        ],
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.constant(num_grid_points, ztypes.int))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1543": {
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_data[0], ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1543": {
                "value": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.cast(num_grid_points, ztypes.int))",
                            "Call"
                        ],
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.constant(num_grid_points, ztypes.int))",
                            "Call"
                        ],
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.constant(num_grid_points, ztypes.int))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "tf.shape(data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_229": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_359": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1139": {
                "x": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.cast(num_grid_points, ztypes.int))",
                            "Call"
                        ],
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.constant(num_grid_points, ztypes.int))",
                            "Call"
                        ],
                        [
                            "self._default_num_grid_points",
                            "Attribute"
                        ],
                        [
                            "tf.minimum(tf.cast(size, ztypes.int), tf.constant(num_grid_points, ztypes.int))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_moments_439": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.unstack_x(x)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "frequency_weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kde_silverman._grid_data",
                            "Attribute"
                        ],
                        [
                            "tf.concat(new_weights, axis=0)",
                            "Call"
                        ],
                        [
                            "data.weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_454": {
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_data[0], ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_383": {
                "x": {
                    "value": "tf.shape(data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_383": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "z.convert_to_tensor(data)",
                            "Call"
                        ],
                        [
                            "tf.concat(new_data, axis=0)",
                            "Call"
                        ],
                        [
                            "z.unstack_x(data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/morphing.py": {
        "tensorflow": {
            "shape_21": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "densities[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfa.image.interpolate_spline(train_points=alphas, train_values=densities_flat[None, ...], query_points=alpha_shaped, order=2)",
                            "Call"
                        ],
                        [
                            "y_flat[0, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(densities[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/physics.py": {
        "tensorflow": {
            "less_26": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - mu) / sigma * tf.sign(alpha)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-abs_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "less_40": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unstack_x()",
                            "Call"
                        ],
                        [
                            "x.unstack_x()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['mu']",
                            "Subscript"
                        ],
                        [
                            "params['mu']",
                            "Subscript"
                        ],
                        [
                            "self.params['mu']",
                            "Subscript"
                        ],
                        [
                            "self.params['mu']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_42": {
                "variable": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(t, -abs_alpha)",
                            "Call"
                        ],
                        [
                            "tf.less(x, mu)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "crystalball_func(x, mu, sigma, alphal, nl)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "crystalball_func(x, mu, sigma, -alphar, nr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_70": {
                "variable": {
                    "value": "use_log",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "znp.abs(n - 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_76": {
                "variable": {
                    "value": "alpha_negative",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['alpha']",
                            "Subscript"
                        ],
                        [
                            "self.params['alpha']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_106": {
                "variable": {
                    "value": "result_3",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "use_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(znp.abs(n - 1.0), 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "if_true_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_1",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "if_false_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_2",
                            "Name"
                        ]
                    ]
                }
            },
            "where_123": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "use_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(znp.abs(n - 1.0), 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "if_true_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a * abs_sigma * (znp.log(b - tmin) - znp.log(n / abs_alpha))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "if_false_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "term1",
                            "Name"
                        ]
                    ]
                }
            },
            "where_132": {
                "variable": {
                    "value": "result_6",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less_equal(tmax, -abs_alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "if_true_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_3",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "if_false_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_4",
                            "Name"
                        ]
                    ]
                }
            },
            "where_136": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(tmin, -abs_alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "if_true_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs_sigma * sqrt_pi_over_two * (tf.math.erf(tmax / sqrt2) - tf.math.erf(tmin / sqrt2))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "if_false_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_6",
                            "Name"
                        ]
                    ]
                }
            },
            "where_175": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(mu, lower)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "znp.zeros_like(integral_left)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "integral_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crystalball_integral_func(mu=mu, sigma=sigma, alpha=alphal, n=nl, lower=lower, upper=upper_of_lowerint)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_181": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(mu, upper)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "znp.zeros_like(integral_right)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "integral_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crystalball_integral_func(mu=mu, sigma=sigma, alpha=-alphar, n=nr, lower=lower_of_upperint, upper=upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_138": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.greater_equal(tmin, -abs_alpha), if_true_4, if_false_4)",
                            "Call"
                        ],
                        [
                            "tf.gather(result, 0, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_22": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['alpha']",
                            "Subscript"
                        ],
                        [
                            "self.params['alpha']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_34": {
                "input": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.safe_where(cond, lambda t: _powerlaw(b - t, a, -n), lambda t: znp.exp(-0.5 * tf.square(t)), values=t, value_safer=lambda t: tf.ones_like(t) * (b - 2))",
                            "Call"
                        ],
                        [
                            "znp.maximum(func, tf.zeros_like(func))",
                            "Call"
                        ],
                        [
                            "tf.where(cond, crystalball_func(x, mu, sigma, alphal, nl), crystalball_func(x, mu, sigma, -alphar, nr))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_132": {
                "x": {
                    "value": "tmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(upper - mu) / abs_sigma",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-abs_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_equal_136": {
                "x": {
                    "value": "tmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lower - mu) / abs_sigma",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-abs_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "less_175": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['mu']",
                            "Subscript"
                        ],
                        [
                            "params['mu']",
                            "Subscript"
                        ],
                        [
                            "self.params['mu']",
                            "Subscript"
                        ],
                        [
                            "self.params['mu']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "greater_182": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['mu']",
                            "Subscript"
                        ],
                        [
                            "params['mu']",
                            "Subscript"
                        ],
                        [
                            "self.params['mu']",
                            "Subscript"
                        ],
                        [
                            "self.params['mu']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "erf_84": {
                "x": {
                    "value": "tmin / sqrt2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_127": {
                "x": {
                    "value": "-abs_alpha / sqrt2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_90": {
                "x": {
                    "value": "abs_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.abs(alpha)",
                            "Call"
                        ],
                        [
                            "znp.abs(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_110": {
                "x": {
                    "value": "abs_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.abs(alpha)",
                            "Call"
                        ],
                        [
                            "znp.abs(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_30": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - mu) / sigma * tf.sign(alpha)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_32": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - mu) / sigma * tf.sign(alpha)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/polynomials.py": {
        "tensorflow": {
            "gather_333": {
                "variable": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integral_0",
                            "Name"
                        ],
                        [
                            "indefinite_integral(upper) - indefinite_integral(lower) + integral_0",
                            "BinOp"
                        ],
                        [
                            "znp.reshape(integral, newshape=())",
                            "Call"
                        ],
                        [
                            "integral * (0.5 * model.space.area())",
                            "BinOp"
                        ],
                        [
                            "model.params[f'c_0'] * (upper - lower)",
                            "BinOp"
                        ],
                        [
                            "znp.reshape(integral, newshape=())",
                            "Call"
                        ],
                        [
                            "tf.gather(integral, indices=0, axis=-1)",
                            "Call"
                        ],
                        [
                            "n_float * polys[degree + 1] / (z.square(n_float) - 1) - limits * polys[degree] / (n_float - 1)",
                            "BinOp"
                        ],
                        [
                            "indefinite_integral(upper) - indefinite_integral(lower)",
                            "BinOp"
                        ],
                        [
                            "znp.reshape(integral, newshape=())",
                            "Call"
                        ],
                        [
                            "indefinite_integral(upper) - indefinite_integral(lower)",
                            "BinOp"
                        ],
                        [
                            "znp.reshape(integral, newshape=())",
                            "Call"
                        ],
                        [
                            "indefinite_integral(upper) - indefinite_integral(lower)",
                            "BinOp"
                        ],
                        [
                            "znp.reshape(integral, newshape=())",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_549": {
                "variable": {
                    "value": "coeffs_laguerre_nup[c_0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "model.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_110": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * x - lim_low - lim_high) / (lim_high - lim_low)",
                            "BinOp"
                        ],
                        [
                            "rescale_minus_plus_one(x, limits=self.space)",
                            "Call"
                        ],
                        [
                            "x.unstack_x()",
                            "Call"
                        ],
                        [
                            "self._polynomials_rescale(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_228": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * x - lim_low - lim_high) / (lim_high - lim_low)",
                            "BinOp"
                        ],
                        [
                            "rescale_minus_plus_one(x, limits=self.space)",
                            "Call"
                        ],
                        [
                            "x.unstack_x()",
                            "Call"
                        ],
                        [
                            "self._polynomials_rescale(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_342": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * x - lim_low - lim_high) / (lim_high - lim_low)",
                            "BinOp"
                        ],
                        [
                            "rescale_minus_plus_one(x, limits=self.space)",
                            "Call"
                        ],
                        [
                            "x.unstack_x()",
                            "Call"
                        ],
                        [
                            "self._polynomials_rescale(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_566": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * x - lim_low - lim_high) / (lim_high - lim_low)",
                            "BinOp"
                        ],
                        [
                            "rescale_minus_plus_one(x, limits=self.space)",
                            "Call"
                        ],
                        [
                            "x.unstack_x()",
                            "Call"
                        ],
                        [
                            "self._polynomials_rescale(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_63": {
                "x": {
                    "value": "coeff0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.constant(1.0) if coeff0 is None else tf.cast(coeff0, dtype=ztypes.float)",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_438": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * x - lim_low - lim_high) / (lim_high - lim_low)",
                            "BinOp"
                        ],
                        [
                            "rescale_minus_plus_one(x, limits=self.space)",
                            "Call"
                        ],
                        [
                            "x.unstack_x()",
                            "Call"
                        ],
                        [
                            "self._polynomials_rescale(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/special.py": {
        "tensorflow": {
            "InvalidArgumentError_49": {
                "node_def": {
                    "value": "Norm_range given to Function: cannot be normalized.",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/template.py": {
        "tensorflow": {
            "stack_81": {
                "variable": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{f'sysshape_{i}': zfit.Parameter(f'auto_sysshape_{self}_{i}', 1.0) for i in range(data.values().shape.num_elements())}",
                            "DictComp"
                        ],
                        [
                            "list(params.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "list(self._template_sysshape.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "list(self._template_sysshape.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ],
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ],
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "values.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{f'sysshape_{i}': zfit.Parameter(f'auto_sysshape_{self}_{i}', 1.0) for i in range(data.values().shape.num_elements())}",
                            "DictComp"
                        ],
                        [
                            "list(params.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "list(self._template_sysshape.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "list(self._template_sysshape.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ],
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ],
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "values.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{f'sysshape_{i}': zfit.Parameter(f'auto_sysshape_{self}_{i}', 1.0) for i in range(data.values().shape.num_elements())}",
                            "DictComp"
                        ],
                        [
                            "list(params.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "list(self._template_sysshape.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "list(self._template_sysshape.values())",
                            "Call"
                        ],
                        [
                            "tf.reshape(sysshape_flat, values.shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "sysshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sysshape_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ],
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ],
                        [
                            "tf.stack(sysshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "values.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/models/tobinned.py": {
        "tensorflow": {
            "shape_76": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lowers_meshed[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "vectorized_map_94": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "integrate_one",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_109": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lowers_meshed[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unstack_89": {
                "variable": {
                    "value": "(l, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_124": {
                "variable": {
                    "value": "(l, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_133": {
                "variable": {
                    "value": "(l, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_143": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "integrate_one",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "vectorized_map_141": {
                "fn": {
                    "value": "integrate_one",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ],
                        [
                            "znp.stack([lower_flat, upper_flat], axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/models/unbinnedpdf.py": {
        "tensorflow": {
            "gather_nd_45": {
                "variable": {
                    "value": "ordered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "padded_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.pad(values, znp.ones((z._get_ndims(values), 2)), mode='constant')",
                            "Call"
                        ],
                        [
                            "znp.pad(values, znp.ones((ndim, 2)), mode='constant')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "binindices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unbinned_to_binindex(x, binned_space, flow=True)",
                            "Call"
                        ],
                        [
                            "unbinned_to_binindex(x, binned_space, flow=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_63": {
                "variable": {
                    "value": "ordered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "padded_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.pad(values, znp.ones((z._get_ndims(values), 2)), mode='constant')",
                            "Call"
                        ],
                        [
                            "znp.pad(values, znp.ones((ndim, 2)), mode='constant')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "binindices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unbinned_to_binindex(x, binned_space, flow=True)",
                            "Call"
                        ],
                        [
                            "unbinned_to_binindex(x, binned_space, flow=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_101": {
                "variable": {
                    "value": "counts_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "counts_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.reshape(sample.values(), (-1,))",
                            "Call"
                        ],
                        [
                            "tf.cast(counts_flat, znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "znp.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_104": {
                "variable": {
                    "value": "lower_flat_repeated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lower_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack(lowers_meshed_flat, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "counts_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.reshape(sample.values(), (-1,))",
                            "Call"
                        ],
                        [
                            "tf.cast(counts_flat, znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_105": {
                "variable": {
                    "value": "upper_flat_repeated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.stack(uppers_meshed_flat, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "counts_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.reshape(sample.values(), (-1,))",
                            "Call"
                        ],
                        [
                            "tf.cast(counts_flat, znp.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_106": {
                "variable": {
                    "value": "sample_unbinned",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(znp.sum(counts_flat), ndim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "lower_flat_repeated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.repeat(lower_flat, counts_flat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "maxval": {
                    "value": "upper_flat_repeated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.repeat(upper_flat, counts_flat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/settings.py": {
        "tensorflow": {
            "set_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/util/binning.py": {
        "tensorflow": {
            "reduce_min_11": {
                "variable": {
                    "value": "minimum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_12": {
                "variable": {
                    "value": "maximum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_14": {
                "variable": {
                    "value": "outside_borders",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relative_boundary * space_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "absolute_boundary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "size_58": {
                "variable": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_59": {
                "variable": {
                    "value": "grid_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_60": {
                "variable": {
                    "value": "grid_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_61": {
                "variable": {
                    "value": "num_intervals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_62": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.subtract(grid_max, grid_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(num_intervals, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_66": {
                "variable": {
                    "value": "transformed_data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.subtract(data, grid_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(tf.math.subtract(grid_max, grid_min), tf.cast(num_intervals, ztypes.float))",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_71": {
                "variable": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "transformed_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(tf.math.subtract(data, grid_min), dx)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_72": {
                "variable": {
                    "value": "fractional",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "transformed_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(tf.math.subtract(data, grid_min), dx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.floor(transformed_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_78": {
                "variable": {
                    "value": "frac_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fractional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.subtract(transformed_data, integral)",
                            "Call"
                        ],
                        [
                            "tf.cast(fractional > 0.5, fractional.dtype) * fractional",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "weights / tf.reduce_sum(weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "subtract_79": {
                "variable": {
                    "value": "neg_frac_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "weights / tf.reduce_sum(weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "frac_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.multiply(fractional, weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_82": {
                "variable": {
                    "value": "bincount_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(tf.math.bincount(tf.cast(integral, tf.int32), weights=frac_weights, minlength=grid_size, maxlength=grid_size), tf.constant(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bincount_95": {
                "variable": {
                    "value": "bincount_right",
                    "type": "variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "tf.cast(integral, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "neg_frac_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.subtract(weights, frac_weights)",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid)",
                            "Call"
                        ]
                    ]
                },
                "maxlength": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_102": {
                "variable": {
                    "value": "bincount",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(bincount_left, bincount_right)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_16": {
                "start": {
                    "value": "minimum - outside_borders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "maximum + outside_borders",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "bincount",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.histogram_fixed_width(data, [tf.math.reduce_min(grid), tf.math.reduce_max(grid)], tf.size(grid))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "weights / tf.reduce_sum(weights)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_61": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_63": {
                "x": {
                    "value": "grid_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_max(grid)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grid_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_63": {
                "x": {
                    "value": "num_intervals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.subtract(grid_size, tf.constant(1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_66": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "grid_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_83": {
                "values": {
                    "value": "tf.math.bincount(tf.cast(integral, tf.int32), weights=frac_weights, minlength=grid_size, maxlength=grid_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.constant(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.floor(transformed_data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_102": {
                "x": {
                    "value": "bincount_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.roll(tf.concat(tf.math.bincount(tf.cast(integral, tf.int32), weights=frac_weights, minlength=grid_size, maxlength=grid_size), tf.constant(0)), shift=1, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bincount_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.bincount(tf.cast(integral, tf.int32), weights=neg_frac_weights, minlength=grid_size, maxlength=grid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_fixed_width_35": {
                "values": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value_range": {
                    "value": "[tf.math.reduce_min(grid), tf.math.reduce_max(grid)]",
                    "type": "List",
                    "possible_values": []
                },
                "nbins": {
                    "value": "tf.size(grid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "fractional > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fractional.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_84": {
                "arr": {
                    "value": "tf.cast(integral, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "frac_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.multiply(fractional, weights)",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid)",
                            "Call"
                        ]
                    ]
                },
                "maxlength": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_90": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_38": {
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_85": {
                "x": {
                    "value": "integral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.floor(transformed_data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_37": {
                "input_tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_37": {
                "input_tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/util/cache.py": {
        "tensorflow": {
            "reset_default_graph_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_282": {
                "x": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined",
                            "Name"
                        ],
                        [
                            "(id(obj),)",
                            "Tuple"
                        ],
                        [
                            "(ZfitParameter, obj.name)",
                            "Tuple"
                        ],
                        [
                            "(id(obj),)",
                            "Tuple"
                        ],
                        [
                            "self.IS_TENSOR",
                            "Attribute"
                        ],
                        [
                            "(obj,) if sum(obj.shape) < 20 else id(obj)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/util/container.py": {
        "tensorflow": {}
    },
    "zfit/util/convolution.py": {
        "tensorflow": {
            "reduce_min_39": {
                "variable": {
                    "value": "kernel_grid_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_40": {
                "variable": {
                    "value": "kernel_grid_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "size_42": {
                "variable": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid, ztypes.int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_54": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.floor(support_bandwidth / dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_grid_points, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.math.floor(support_bandwidth / dx), L)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_57": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_58": {
                "variable": {
                    "value": "kernel_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "stop": {
                    "value": "dx * L",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(L, ztypes.int) + tf.constant(1, ztypes.int)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "kernel_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reverse(kernel_weights, axis=[0])[:-1], kernel_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_70": {
                "variable": {
                    "value": "c_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.reshape(c, [1, c_size, 1], name='c')",
                            "Call"
                        ],
                        [
                            "tf.pad(data, [[left_padding, right_padding]])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.reshape(c, [1, c_size, 1], name='c')",
                            "Call"
                        ],
                        [
                            "tf.pad(data, [[left_padding, right_padding]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, c_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_73": {
                "variable": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_weights",
                            "Name"
                        ],
                        [
                            "tf.reshape(k, [k_size, 1, 1], name='k')",
                            "Call"
                        ],
                        [
                            "tf.pad(kernel_weights, [[0, right_padding]])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_weights",
                            "Name"
                        ],
                        [
                            "tf.reshape(k, [k_size, 1, 1], name='k')",
                            "Call"
                        ],
                        [
                            "tf.pad(kernel_weights, [[0, right_padding]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[k_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_80": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(2, ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.math.ceil(tf.math.log(tf.constant(3.0, ztypes.float) * tf.cast(num_grid_points, ztypes.float) - tf.constant(1.0, ztypes.float)) / tf.math.log(tf.constant(2.0, ztypes.float))), ztypes.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_102": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[left_padding, right_padding]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(loc=zero, scale=bandwidth).prob(kernel_grid)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=[tf.reverse(kernel_weights, axis=[0])[:-1], kernel_weights], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, right_padding]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "irfft_105": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.signal.rfft(c) * tf.signal.rfft(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "num_intervals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_grid_points - tf.constant(1, ztypes.int)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_54": {
                "x": {
                    "value": "support_bandwidth / dx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "input": {
                    "value": "tf.nn.conv1d(c, k, 1, 'SAME')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_22": {
                "value": {
                    "value": "absolute_tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_27": {
                "value": {
                    "value": "8.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_59": {
                "x": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_grid_points, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.math.floor(support_bandwidth / dx), L)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_59": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_76": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.reshape(c, [1, c_size, 1], name='c')",
                            "Call"
                        ],
                        [
                            "tf.pad(data, [[left_padding, right_padding]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_weights",
                            "Name"
                        ],
                        [
                            "tf.reshape(k, [k_size, 1, 1], name='k')",
                            "Call"
                        ],
                        [
                            "tf.pad(kernel_weights, [[0, right_padding]])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_81": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "tf.math.ceil(tf.math.log(tf.constant(3.0, ztypes.float) * tf.cast(num_grid_points, ztypes.float) - tf.constant(1.0, ztypes.float)) / tf.math.log(tf.constant(2.0, ztypes.float)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_98": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_83": {
                "x": {
                    "value": "tf.math.log(tf.constant(3.0, ztypes.float) * tf.cast(num_grid_points, ztypes.float) - tf.constant(1.0, ztypes.float)) / tf.math.log(tf.constant(2.0, ztypes.float))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.pow(tf.constant(2, ztypes.int), tf.cast(tf.math.ceil(tf.math.log(tf.constant(3.0, ztypes.float) * tf.cast(num_grid_points, ztypes.float) - tf.constant(1.0, ztypes.float)) / tf.math.log(tf.constant(2.0, ztypes.float))), ztypes.int))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rfft_105": {
                "input_tensor": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_weights",
                            "Name"
                        ],
                        [
                            "tf.reshape(k, [k_size, 1, 1], name='k')",
                            "Call"
                        ],
                        [
                            "tf.pad(kernel_weights, [[0, right_padding]])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_106": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_108": {
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_63": {
                "tensor": {
                    "value": "kernel_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(loc=zero, scale=bandwidth).prob(kernel_grid)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=[tf.reverse(kernel_weights, axis=[0])[:-1], kernel_weights], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_84": {
                "x": {
                    "value": "tf.constant(3.0, ztypes.float) * tf.cast(num_grid_points, ztypes.float) - tf.constant(1.0, ztypes.float)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_89": {
                "x": {
                    "value": "tf.constant(2.0, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_87": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "num_grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(grid, ztypes.int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/util/deprecation.py": {
        "tensorflow": {}
    },
    "zfit/util/execution.py": {
        "tensorflow": {
            "flatten_123": {
                "variable": {
                    "value": "flattened_args",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_sequence_as_125": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "evaluated_args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[eval_object(arg) for arg in flattened_args]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "is_tensor_429": {
                "x": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj.value()",
                            "Call"
                        ]
                    ]
                }
            },
            "run_functions_eagerly_313": {
                "run_eagerly": {
                    "value": "graph is False",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "executing_eagerly_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_intra_op_parallelism_threads_92": {
                "num_threads": {
                    "value": "intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if strict else 2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_inter_op_parallelism_threads_93": {
                "num_threads": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_cpu",
                            "Name"
                        ]
                    ]
                }
            },
            "executing_eagerly_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "zfit/util/graph.py": {
        "tensorflow": {}
    },
    "zfit/util/improved_sheather_jones.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "one_half",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "two",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_18": {
                "variable": {
                    "value": "three",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_19": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_21": {
                "variable": {
                    "value": "odd_numbers_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.range(one, two * s + one, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_24": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "two * const * K0 / (N * f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "two / (three + two * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "ell",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_94": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_109": {
                "variable": {
                    "value": "t_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(2 * np.sqrt(np.pi), ztypes.float) * N * fnew",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(-2.0 / 5.0, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_129": {
                "variable": {
                    "value": "N2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.minimum(tf.constant(1050, ztypes.float), N)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(50, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_134": {
                "variable": {
                    "value": "left_bracket",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_139": {
                "variable": {
                    "value": "converged",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "t_star",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_160": {
                "variable": {
                    "value": "(right_bracket, converged, t_star)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[right_bracket, converged, t_star]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(data) - tf.reduce_min(data)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_175": {
                "variable": {
                    "value": "(data_unique, data_unique_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_176": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(data_unique)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dct_183": {
                "variable": {
                    "value": "grid_data_dct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binning_util.bin_1d(binning_method, data, grid, weights)",
                            "Call"
                        ]
                    ]
                },
                "type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_186": {
                "variable": {
                    "value": "squared_integers",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(1, num_grid_points, dtype=ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(2, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_199": {
                "variable": {
                    "value": "squared_integers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "squared_integers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.pow(tf.range(1, num_grid_points, dtype=ztypes.float), tf.constant(2, ztypes.float))",
                            "Call"
                        ],
                        [
                            "tf.pad(squared_integers, [[1, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_222": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "x": {
                    "value": "two * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "tf.math.pow(squared_integers, s) * grid_data_dct2 * tf.math.exp(-squared_integers * tf.math.pow(pi, two) * time)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "tf.math.pow(squared_integers, ell) * grid_data_dct2 * tf.math.exp(-squared_integers * tf.math.pow(tf.constant(np.pi, ztypes.float), tf.constant(2.0, ztypes.float)) * t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "while_loop_104": {
                "cond": {
                    "value": "while_condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda i, f: i > 1",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_111": {
                "value": {
                    "value": "-2.0 / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_130": {
                "x": {
                    "value": "tf.constant(1050, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.size(data_unique), ztypes.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_131": {
                "value": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_135": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_146": {
                "x": {
                    "value": "converged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(False)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_176": {
                "input": {
                    "value": "data_unique",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_187": {
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_187": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_189": {
                "x": {
                    "value": "grid_data_dct[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_203": {
                "x": {
                    "value": "-squared_integers * tf.math.pow(tf.constant(np.pi, ztypes.float), tf.constant(2.0, ztypes.float)) * t_star / tf.constant(2.0, ztypes.float)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "idct_211": {
                "input": {
                    "value": "grid_data_dct_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_data_dct * tf.math.exp(-squared_integers * tf.math.pow(tf.constant(np.pi, ztypes.float), tf.constant(2.0, ztypes.float)) * t_star / tf.constant(2.0, ztypes.float))",
                            "BinOp"
                        ]
                    ]
                },
                "type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_214": {
                "x": {
                    "value": "density > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "density.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_228": {
                "x": {
                    "value": "t_star",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "t_star - value_at_t_star",
                            "BinOp"
                        ],
                        [
                            "_find_root(_fixed_point, N, squared_integers, grid_data_dct2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_240": {
                "x": {
                    "value": "t_star",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=ztypes.float)",
                            "Call"
                        ],
                        [
                            "t_star - value_at_t_star",
                            "BinOp"
                        ],
                        [
                            "_find_root(_fixed_point, N, squared_integers, grid_data_dct2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_23": {
                "x": {
                    "value": "one_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0 / 2.0, ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s + one_half",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_29": {
                "x": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.pi, ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "two * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_77": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_78": {
                "x": {
                    "value": "tf.constant(np.pi, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(2.0, ztypes.float) * ell",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_130": {
                "value": {
                    "value": "1050",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_137": {
                "value": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_155": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_172": {
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_172": {
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, ztypes.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_33": {
                "x": {
                    "value": "-squared_integers * tf.math.pow(pi, two) * time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_84": {
                "x": {
                    "value": "-squared_integers * tf.math.pow(tf.constant(np.pi, ztypes.float), tf.constant(2.0, ztypes.float)) * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_110": {
                "value": {
                    "value": "2 * np.sqrt(np.pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_207": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_31": {
                "x": {
                    "value": "squared_integers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.pow(tf.range(1, num_grid_points, dtype=ztypes.float), tf.constant(2, ztypes.float))",
                            "Call"
                        ],
                        [
                            "tf.pad(squared_integers, [[1, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_82": {
                "x": {
                    "value": "squared_integers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.pow(tf.range(1, num_grid_points, dtype=ztypes.float), tf.constant(2, ztypes.float))",
                            "Call"
                        ],
                        [
                            "tf.pad(squared_integers, [[1, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(7, ztypes.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_205": {
                "x": {
                    "value": "tf.constant(np.pi, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(2.0, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_33": {
                "x": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.pi, ztypes.float)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "two",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(2.0, ztypes.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_86": {
                "x": {
                    "value": "tf.constant(np.pi, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(2.0, ztypes.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_205": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_87": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ztypes.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/util/ztyping.py": {
        "tensorflow": {}
    },
    "zfit/z/math.py": {
        "tensorflow": {
            "function_329": {
                "autograph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_361": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.pop()",
                            "Call"
                        ],
                        [
                            "_auto_upcast(x)",
                            "Call"
                        ],
                        [
                            "znp.array(x)",
                            "Call"
                        ],
                        [
                            "tf.gather(x, sorter)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.argsort(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_362": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(weights)",
                            "Call"
                        ],
                        [
                            "tf.gather(weights, sorter)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.argsort(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_41": {
                "inputs": {
                    "value": "[coef * z.to_complex(pow_func(x, p)) for (p, coef) in enumerate(args)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "executing_eagerly_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numpy_function_75": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "grad_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numdifftools.Gradient(wrapped_func, order=2, base_step=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[param_vals]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numpy_function_150": {
                "variable": {
                    "value": "computed_hessian",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "hesse_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numdifftools.Hessdiag(wrapped_func, order=2, base_step=0.0001)",
                            "Call"
                        ],
                        [
                            "numdifftools.Hessian(wrapped_func, order=2, base_step=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[param_vals]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "searchsorted_368": {
                "variable": {
                    "value": "quantile_index_left",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "weighted_quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.cumsum(weights) - 0.5 * weights",
                            "BinOp"
                        ],
                        [
                            "weighted_quantiles / znp.sum(weights)",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(quantiles)",
                            "Call"
                        ],
                        [
                            "znp.reshape(quantiles, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "side": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "searchsorted_371": {
                "variable": {
                    "value": "quantile_index_right",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "weighted_quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.cumsum(weights) - 0.5 * weights",
                            "BinOp"
                        ],
                        [
                            "weighted_quantiles / znp.sum(weights)",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(quantiles)",
                            "Call"
                        ],
                        [
                            "znp.reshape(quantiles, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "side": {
                    "value": "right",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_375": {
                "variable": {
                    "value": "calculated_left",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.pop()",
                            "Call"
                        ],
                        [
                            "_auto_upcast(x)",
                            "Call"
                        ],
                        [
                            "znp.array(x)",
                            "Call"
                        ],
                        [
                            "tf.gather(x, sorter)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "quantile_index_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(weighted_quantiles, quantiles, side='left')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_376": {
                "variable": {
                    "value": "calculated_right",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.pop()",
                            "Call"
                        ],
                        [
                            "_auto_upcast(x)",
                            "Call"
                        ],
                        [
                            "znp.array(x)",
                            "Call"
                        ],
                        [
                            "tf.gather(x, sorter)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "quantile_index_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(weighted_quantiles, quantiles, side='right')",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_229": {
                "persistent": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "executing_eagerly_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_295": {
                "persistent": {
                    "value": "persistant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hessian == 'diag' or tf.executing_eagerly()",
                            "BoolOp"
                        ]
                    ]
                },
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "searchsorted_380": {
                "variable": {
                    "value": "quantile_index",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "weighted_quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.cumsum(weights) - 0.5 * weights",
                            "BinOp"
                        ],
                        [
                            "weighted_quantiles / znp.sum(weights)",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(quantiles)",
                            "Call"
                        ],
                        [
                            "znp.reshape(quantiles, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "side": {
                    "value": "side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'middle'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_382": {
                "variable": {
                    "value": "calculated",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.pop()",
                            "Call"
                        ],
                        [
                            "_auto_upcast(x)",
                            "Call"
                        ],
                        [
                            "znp.array(x)",
                            "Call"
                        ],
                        [
                            "tf.gather(x, sorter)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "quantile_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(weighted_quantiles, quantiles, side=side)",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_moments_332": {
                "x": {
                    "value": "log(input_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "frequency_weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.array(weights)",
                            "Call"
                        ],
                        [
                            "tf.gather(weights, sorter)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/z/numpy.py": {
        "tensorflow": {}
    },
    "zfit/z/random.py": {
        "tensorflow": {
            "uniform_48": {
                "variable": {
                    "value": "choice_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "sample_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(a)[axis]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_51": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "choice_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(sample_shape, minval=0, maxval=dim, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_74": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(total_count)",
                            "Call"
                        ],
                        [
                            "tf.cast(total_count, dtype=float_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_86": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(total_count)",
                            "Call"
                        ],
                        [
                            "tf.cast(total_count, dtype=float_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.dtype",
                            "Attribute"
                        ],
                        [
                            "logits.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_108": {
                "variable": {
                    "value": "counts_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "counts_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "tf.cast(counts_flat, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.int32",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_79": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(probs) if probs is not None else probs",
                            "IfExp"
                        ],
                        [
                            "tf.cast(probs, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "znp.reshape(probs, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_99": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.convert_to_tensor(probs) if probs is not None else probs",
                            "IfExp"
                        ],
                        [
                            "tf.cast(probs, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "znp.reshape(probs, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_102": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(logits) if logits is not None else logits",
                            "IfExp"
                        ],
                        [
                            "tf.cast(logits, tf.float64)",
                            "Call"
                        ],
                        [
                            "znp.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_115": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(probs)",
                            "Call"
                        ],
                        [
                            "tf.shape(logits)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.int32",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_122": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(probs)",
                            "Call"
                        ],
                        [
                            "tf.shape(logits)",
                            "Call"
                        ]
                    ]
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.int32",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "poisson_135": {
                "lam": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(probs)",
                            "Call"
                        ],
                        [
                            "tf.shape(logits)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.int32",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_47": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(logits) if logits is not None else logits",
                            "IfExp"
                        ],
                        [
                            "tf.cast(logits, tf.float64)",
                            "Call"
                        ],
                        [
                            "znp.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_82": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(logits) if logits is not None else logits",
                            "IfExp"
                        ],
                        [
                            "tf.cast(logits, tf.float64)",
                            "Call"
                        ],
                        [
                            "znp.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/z/tools.py": {
        "tensorflow": {
            "cast_12": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x=tensor, dtype=new_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "new_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upcast_ztypes[tensor.dtype]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/z/unstable.py": {
        "tensorflow": {
            "is_tensor_11": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_to_57": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_81": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_102": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_109": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_116": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_123": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_130": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_15": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_equal_33": {
                "x": {
                    "value": "znp.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "znp.abs(y) * rtol + atol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_15": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zfit/z/wrapping_tf.py": {
        "tensorflow": {
            "cast_22": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_23": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype_hint": {
                    "value": "preferred_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normal_32": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_41": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "poisson_54": {
                "lam": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_numerics_86": {
                "variable": {
                    "value": "real_check",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "znp.real(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_numerics_89": {
                "variable": {
                    "value": "imag_check",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "znp.imag(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_92": {
                "variable": {
                    "value": "check_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "real_check",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.debugging.check_numerics(tensor=znp.real(tensor), message=message, name=name)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "imag_check",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.debugging.check_numerics(tensor=znp.imag(tensor), message=message, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_numerics_94": {
                "variable": {
                    "value": "check_op",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_58": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_62": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_66": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "complex_72": {
                "real": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_auto_upcast(real)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_auto_upcast(imag)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_dtype_85": {
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zfit/z/zextension.py": {
        "tensorflow": {
            "where_130": {
                "variable": {
                    "value": "safe_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "value_safer(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_131": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "func(safe_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "safe_func(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_144": {
                "variable": {
                    "value": "finite_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "finite_bools",
                    "type": "variable",
                    "possible_values": [
                        [
                            "znp.isfinite(tf.cast(value_with_nans, dtype=tf.float64))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_145": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "finite_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(finite_bools)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_148": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "finite_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(finite_bools)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "vals_no_nan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(x=new_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(input=value_with_nans, out_type=finite_indices.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Const'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_33": {
                "x": {
                    "value": "number",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_94": {
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Const'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_101": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Const'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype_hint": {
                    "value": "preferred_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "function_213": {
                "variable": {
                    "value": "self.tf_function",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_function_300": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Const'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_37": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.complex",
                            "MethodArgument"
                        ],
                        [
                            "ztypes.float",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_87": {
                "variable": {
                    "value": "unstacked_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Const'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_143": {
                "x": {
                    "value": "value_with_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(x=x)",
                            "Call"
                        ],
                        [
                            "znp.real(value_with_nans) + znp.imag(value_with_nans)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_151": {
                "input": {
                    "value": "value_with_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(x=x)",
                            "Call"
                        ],
                        [
                            "znp.real(value_with_nans) + znp.imag(value_with_nans)",
                            "BinOp"
                        ]
                    ]
                },
                "out_type": {
                    "value": "finite_indices.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}