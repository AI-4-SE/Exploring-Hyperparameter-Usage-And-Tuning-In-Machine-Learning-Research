{
    "datasets.py": {
        "torch": {}
    },
    "layers.py": {
        "torch": {
            "Conv2d_92": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(gamma)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_96": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_109": {
                "variable": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "p_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(b_size, -1, w * h).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "p_key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(b_size, -1, w * h)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_113": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "p_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(b_size, -1, w * h)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_33": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_75": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(raw_out - bias_view, self.mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(output, self.update_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out, self.mask_ratio)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_77": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super(PartialConv2d, self).forward(torch.mul(x, mask) if mask_in is not None else x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_in",
                            "Name"
                        ],
                        [
                            "torch.ones(x.data.shape[0], x.data.shape[1], x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_67": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_68": {
                "variable": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_70": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + sampled_noise",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_in",
                            "Name"
                        ],
                        [
                            "torch.ones(x.data.shape[0], x.data.shape[1], x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_74": {
                "input": {
                    "value": "raw_out - bias_view",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x.data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "abs_10": {
                "variable": {
                    "value": "var_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, :-1] - x[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_10": {
                "variable": {
                    "value": "var_w",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_11": {
                "variable": {
                    "value": "var_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :-1, :] - x[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_11": {
                "variable": {
                    "value": "var_h",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_19": {
                "variable": {
                    "value": "self.pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_20": {
                "variable": {
                    "value": "self.content",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_21": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_22": {
                "variable": {
                    "value": "self.adversarial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "i_",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "baddbmm_55": {
                "variable": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "i_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(b, ch, ch).type(m.type())",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mat.view(b, ch, w * h)",
                            "Call"
                        ]
                    ]
                },
                "batch2": {
                    "value": "m_transposed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "beta": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0 / (ch * h * w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_43": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "train_img_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FashionGen(filename=os.path.join(DATA_FOLDER, 'fashiongen_256_256_train.h5'), mask_form=MASK_FORM)",
                            "Call"
                        ],
                        [
                            "FashionAI(filename=os.path.join(DATA_FOLDER, 'train', 'Numpys', 'train_imgs.npy'), mask_form=MASK_FORM)",
                            "Call"
                        ],
                        [
                            "DeepFashion(base_folder=DATA_FOLDER, mask_form=MASK_FORM)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(DATA_FOLDER, 'train'), transform=df2_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(DATA_FOLDER, MODE, 'CelebA-HQ-img/'), transform=celebA_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "val_img_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FashionGen(filename=os.path.join(DATA_FOLDER, 'fashiongen_256_256_validation.h5'), mask_form=MASK_FORM)",
                            "Call"
                        ],
                        [
                            "FashionAI(filename=os.path.join(DATA_FOLDER, 'train', 'Numpys', 'train_imgs.npy'), mask_form=MASK_FORM)",
                            "Call"
                        ],
                        [
                            "DeepFashion(base_folder=DATA_FOLDER, mode='val', mask_form=MASK_FORM)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(DATA_FOLDER, 'validation'), transform=df2_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(DATA_FOLDER, MODE, 'CelebA-HQ-img/'), transform=celebA_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "DEVICE if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_100": {
                "variable": {
                    "value": "d_loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "d_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "d_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "r_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "refine_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "r_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ExponentialLR_109": {
                "variable": {
                    "value": "d_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "d_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(d_net.parameters(), lr=d_lr, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_110": {
                "variable": {
                    "value": "r_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "r_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(refine_net.parameters(), lr=r_lr, betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "train_mask_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "m_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(root='./data/qd_imd_big/train/', transform=mask_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "val_mask_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "m_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(root='./data/qd_imd_big/test/', transform=mask_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "d_net",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "d_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(d_net)",
                            "Call"
                        ],
                        [
                            "d_net.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_90": {
                "variable": {
                    "value": "refine_net",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "refine_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Net()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(refine_net)",
                            "Call"
                        ],
                        [
                            "refine_net.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_215": {
                "variable": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(imgs).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_216": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_masks",
                            "Name"
                        ],
                        [
                            "torch.stack(masks).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_160": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "ma",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ma] * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "refine_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./weights_{}_{}/weights_net_epoch_{}.pth'.format(DATASET, MASK_FORM, e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_244": {
                "f": {
                    "value": "PATH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./weights/weights_{}_{}/weights_net_epoch_{}.pth'.format(DATASET, MASK_FORM, NUM_EPOCHS)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mask_updater.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "train_mask_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "m_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(root='./data/nvidia/', transform=mask_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_21": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "leaky_relu_24": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_0(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_25": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(self.conv_1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_2(self.conv_2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_3(self.conv_3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pooling(self.conv_4(x).squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_55": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x_0",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(x_0)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_1(x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_2(x_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_3(x_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x_4",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_4(x_4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_3, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "out_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m_3, out_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_6(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_2, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m_2, out_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_81": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_7(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_0, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "out_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m_0, out_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_88": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_8(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "out_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask, out_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.upsample(x_4)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_3, out), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_6(out), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_2, out), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_7(out), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_0, out), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_8(out), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_2, x_6), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_0, x_7), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_8(self.block_8(out)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x_9), dim=1)",
                            "Call"
                        ],
                        [
                            "self.block_9(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "vgg_outputs(h_relu1_2, h_relu2_2, h_relu3_3, h_relu4_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.block_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.block_7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.block_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "192",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.block_9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "67",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_137": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "x_0",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(x_0)",
                            "Call"
                        ],
                        [
                            "torch.relu(x_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_1(x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "x_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_2(x_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_3(x_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "dilated_x_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dilated_norm_1(dilated_x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "dilated_x_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dilated_norm_2(dilated_m_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "dilated_x_3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dilated_norm_3(dilated_x_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "dilated_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dilated_norm_4(self.dilated_block_4(dilated_x_3, dilated_m_3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "x_6_a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_6_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.relu(x_6_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_3, x_6_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_169": {
                "variable": {
                    "value": "x_6",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_6(self.block_6(x_6))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_2, x_6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "x_7_a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_7_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.relu(x_7_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_175": {
                "variable": {
                    "value": "x_7",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_7(self.block_7(x_7))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_0, x_7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_177": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_8(self.block_8(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_182": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.upsample(x_4)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_3, out), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_6(out), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_2, out), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_7(out), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_0, out), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_8(out), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_2, x_6), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_0, x_7), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.norm_8(self.block_8(out)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x_9), dim=1)",
                            "Call"
                        ],
                        [
                            "self.block_9(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "vgg_outputs(h_relu1_2, h_relu2_2, h_relu3_3, h_relu4_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_msssim/__init__.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "mu1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "mu2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_57": {
                "variable": {
                    "value": "cs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 / v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "mssim",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mssim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mssim)",
                            "Call"
                        ],
                        [
                            "(mssim + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_86": {
                "variable": {
                    "value": "mcs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mcs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mcs)",
                            "Call"
                        ],
                        [
                            "(mcs + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_96": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pow1[:-1] * pow2[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_83": {
                "variable": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_49": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_50": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_22": {
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_27": {
                "input": {
                    "value": "img1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "div_81": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(batch, div_factor)",
                            "Call"
                        ],
                        [
                            "batch * Variable(std)",
                            "BinOp"
                        ],
                        [
                            "torch.add(batch, Variable(mean))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "div_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_84": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(batch, div_factor)",
                            "Call"
                        ],
                        [
                            "batch * Variable(std)",
                            "BinOp"
                        ],
                        [
                            "torch.add(batch, Variable(mean))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "val_mask_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "m_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(root='./data/nvidia/', transform=mask_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_56": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flatten_125": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "m[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_46": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[img_c, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}