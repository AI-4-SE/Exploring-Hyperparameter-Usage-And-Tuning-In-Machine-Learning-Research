{
    "pointcnn.py": {
        "tensorflow": {
            "gather_nd_18": {
                "variable": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_pts[-1]",
                            "Subscript"
                        ],
                        [
                            "self.layer_pts[pts_layer_idx + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_dilated[:, :, ::D, :]",
                            "Subscript"
                        ],
                        [
                            "pf.sort_points(pts, indices, sorting_method)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(fps_indices, -1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pf.inverse_density_sampling(pts, K, P)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tag + 'nn_pts'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_19": {
                "variable": {
                    "value": "nn_pts_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_pts[-1]",
                            "Subscript"
                        ],
                        [
                            "self.layer_pts[qrs_layer_idx + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(pts, indices, name=tag + 'qrs')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pts, indices)",
                            "Call"
                        ],
                        [
                            "tf.slice(pts, (0, 0, 0), (-1, P, -1), name=tag + 'qrs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'nn_pts_center'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_20": {
                "variable": {
                    "value": "nn_pts_local",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(pts, indices, name=tag + 'nn_pts')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nn_pts_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(qrs, axis=2, name=tag + 'nn_pts_center')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tag + 'nn_pts_local'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "fts_conv_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fts_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf.separable_conv2d(fts_X, C, tag + 'fts_conv', is_training, (1, K), depth_multiplier=depth_multiplier)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'fts_conv_3d'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_nd_28": {
                "variable": {
                    "value": "nn_fts_from_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_fts[-1]",
                            "Subscript"
                        ],
                        [
                            "self.layer_fts[pts_layer_idx + 1] if layer_idx == 0 else self.layer_fts[-1]",
                            "IfExp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_dilated[:, :, ::D, :]",
                            "Subscript"
                        ],
                        [
                            "pf.sort_points(pts, indices, sorting_method)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(fps_indices, -1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pf.inverse_density_sampling(pts, K, P)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tag + 'nn_fts_from_prev'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_29": {
                "variable": {
                    "value": "nn_fts_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[nn_fts_from_pts, nn_fts_from_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'nn_fts_input'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "X_0_KK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf.conv2d(nn_pts_local, K * K, tag + 'X_0', is_training, (1, K))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, P, K, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'X_0_KK'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "X_1_KK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf.depthwise_conv2d(X_0_KK, K, tag + 'X_1', is_training, (1, K))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, P, K, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'X_1_KK'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "X_2_KK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf.depthwise_conv2d(X_1_KK, K, tag + 'X_2', is_training, (1, K), activation=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, P, K, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'X_2_KK'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "fts_X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_2_KK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X_2, (N, P, K, K), name=tag + 'X_2_KK')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "nn_fts_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_fts_from_pts",
                            "variable"
                        ],
                        [
                            "tf.concat([nn_fts_from_pts, nn_fts_from_prev], axis=-1, name=tag + 'nn_fts_input')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tag + 'fts_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_50": {
                "values": {
                    "value": "[fts_global, fts_conv_3d]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'fts_conv_3d_with_global'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(features, (N, -1, setting.data_dim - 3), name='features_reshape')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, -1, setting.data_dim - 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "features_reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_158": {
                "variable": {
                    "value": "fc_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf.dense(self.fc_layers[-1], C, 'fc{:d}'.format(layer_idx), is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_param['dropout_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc{:d}_drop'.format(layer_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "fts_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fts_xdconv, fts_qrs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'fts_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_94": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(N), (-1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, P, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_95": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, tf.expand_dims(fps_indices, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_96": {
                "variable": {
                    "value": "qrs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_pts[-1]",
                            "Subscript"
                        ],
                        [
                            "self.layer_pts[pts_layer_idx + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_dilated[:, :, ::D, :]",
                            "Subscript"
                        ],
                        [
                            "pf.sort_points(pts, indices, sorting_method)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(fps_indices, -1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pf.inverse_density_sampling(pts, K, P)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tag + 'qrs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_121": {
                "variable": {
                    "value": "fts_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "fts_from_link",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_fts[link]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "size": {
                    "value": "(-1, P, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'fts_slice_' + str(-link)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_nd_99": {
                "variable": {
                    "value": "qrs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_pts[-1]",
                            "Subscript"
                        ],
                        [
                            "self.layer_pts[pts_layer_idx + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_dilated[:, :, ::D, :]",
                            "Subscript"
                        ],
                        [
                            "pf.sort_points(pts, indices, sorting_method)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(fps_indices, -1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pf.inverse_density_sampling(pts, K, P)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_125": {
                "values": {
                    "value": "fts_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'fts_list_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "tf.range(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "slice_101": {
                "variable": {
                    "value": "qrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_pts[-1]",
                            "Subscript"
                        ],
                        [
                            "self.layer_pts[pts_layer_idx + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "size": {
                    "value": "(-1, P, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tag + 'qrs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "fps_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_sampling.farthest_point_sample(P, pts)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointcnn_cls.py": {
        "tensorflow": {
            "reduce_mean_13": {
                "variable": {
                    "value": "fc_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.fc_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_14": {
                "variable": {
                    "value": "self.fc_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.fc_layers[-1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : fc_mean",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "pointfly.py": {
        "tensorflow": {
            "matmul_95": {
                "variable": {
                    "value": "points_xformed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "xforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(shape=(xform_num, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "points_xformed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "variable": {
                    "value": "jitter_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "jitter_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range * tf.random_normal(tf.shape(points_xformed), name='jitter_data')",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-5 * range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5 * range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "jitter_clipped",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(A, perm=(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "r_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "variable": {
                    "value": "r_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "B * B",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(B, perm=(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "py_func_143": {
                "variable": {
                    "value": "indices_duplicated",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "find_duplicate_columns",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[A]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_149": {
                "variable": {
                    "value": "points_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "top_k_156": {
                "variable": {
                    "value": "(distances, point_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-D",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "sorted": {
                    "value": "sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_157": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, point_num, k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, tf.expand_dims(point_indices, axis=3)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_164": {
                "variable": {
                    "value": "queries_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "top_k_171": {
                "variable": {
                    "value": "(distances, point_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-D",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "sorted": {
                    "value": "sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_172": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, point_num, k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, tf.expand_dims(point_indices, axis=3)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_180": {
                "variable": {
                    "value": "indices_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=2)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=2)], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_185": {
                "variable": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=2)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=2)], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_207": {
                "variable": {
                    "value": "(_, k_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sorting_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nn_pts_normalized * scaling, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros((batch_size, point_num, 1)), sorting_data[:, :, 1:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.norm(nn_pts_local, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_208": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, point_num, k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_209": {
                "variable": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(point_num), (1, -1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, 1, k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_210": {
                "variable": {
                    "value": "k_indices_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_211": {
                "variable": {
                    "value": "sorting_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, point_indices, k_indices_4d]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_234": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "q_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trace(A) / 3",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "p_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(p2 / 6) + 1e-08",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_by_value_243": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "compute_determinant(B) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_254": {
                "variable": {
                    "value": "nn_pts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_256": {
                "variable": {
                    "value": "nn_pts_NPK31",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn_pts_demean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_pts - nn_pts_mean",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_257": {
                "variable": {
                    "value": "covariance_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "nn_pts_NPK31",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(nn_pts_demean, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "nn_pts_NPK31",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(nn_pts_demean, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_258": {
                "variable": {
                    "value": "covariance_matrix_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "covariance_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(nn_pts_NPK31, nn_pts_NPK31, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_266": {
                "variable": {
                    "value": "(_, point_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "curvature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(eigvals, axis=-1) / (tf.reduce_sum(eigvals, axis=-1) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "compute_curvature(nn_pts)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_268": {
                "variable": {
                    "value": "pts_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_270": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_271": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, tf.expand_dims(point_indices, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_286": {
                "variable": {
                    "value": "(distances, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-D",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_289": {
                "variable": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "random_choice_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[sample_num, prob_matrix]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_293": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, sample_num, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_294": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, tf.expand_dims(point_indices, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "separable_conv2d_307": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "depthwise_filter": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_multiplier": {
                    "value": "depth_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "depthwise_initializer": {
                    "value": "tf.glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "pointwise_initializer": {
                    "value": "tf.glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "depthwise_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pointwise_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "not with_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "separable_conv2d_320": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_multiplier": {
                    "value": "depth_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "tf.glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "weights_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "None if with_bn else tf.zeros_initializer()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "biases_regularizer": {
                    "value": "None if with_bn else tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_334": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "not with_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_343": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.elu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "not with_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_191": {
                "variable": {
                    "value": "nn_pts_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_192": {
                "variable": {
                    "value": "nn_pts_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_197": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scaling_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[math.pow(100.0, 3 - sorting_method.find('x')), math.pow(100.0, 3 - sorting_method.find('y')), math.pow(100.0, 3 - sorting_method.find('z'))]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "variable": {
                    "value": "sorting_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nn_pts_normalized * scaling",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "sorting_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros((batch_size, point_num, 1)), sorting_data[:, :, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_212": {
                "params": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=2)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_indices, tf.expand_dims(point_indices, axis=2)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorting_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, point_indices, k_indices_4d], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_248": {
                "x": {
                    "value": "tf.stack([eig1, eig2, eig3], axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_299": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "a": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(A * A, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(A * A, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(compute_determinant(B) / 2, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_115": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "a": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(A * A, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(A * A, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(compute_determinant(B) / 2, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / p_4d * (A - q_4d * I)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "r_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(B * B, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_144": {
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * m + tf.transpose(r)",
                            "BinOp"
                        ],
                        [
                            "r - 2 * m + tf.transpose(r, perm=(0, 2, 1))",
                            "BinOp"
                        ],
                        [
                            "r_A - 2 * m + tf.transpose(r_B, perm=(0, 2, 1))",
                            "BinOp"
                        ],
                        [
                            "D + tf.reduce_max(D) * tf.cast(indices_duplicated, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "batch_distance_matrix(points)",
                            "Call"
                        ],
                        [
                            "batch_distance_matrix_general(queries, points)",
                            "Call"
                        ],
                        [
                            "batch_distance_matrix(points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_144": {
                "x": {
                    "value": "indices_duplicated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.fill((N, 1, P), 1, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "tf.py_func(find_duplicate_columns, [A], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_201": {
                "variable": {
                    "value": "nn_pts_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "subtract_202": {
                "variable": {
                    "value": "nn_pts_local",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nn_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(points, indices)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nn_pts_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(nn_pts, axis=2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_203": {
                "variable": {
                    "value": "sorting_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nn_pts_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(nn_pts, nn_pts_center)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "tensor": {
                    "value": "tf.range(point_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_235": {
                "x": {
                    "value": "A_13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A[:, :, 0, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trace_236": {
                "*args": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_238": {
                "x": {
                    "value": "p2 / 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_239": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "acos_244": {
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(A * A, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(A * A, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(compute_determinant(B) / 2, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_248": {
                "values": {
                    "value": "[eig1, eig2, eig3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_260": {
                "input_tensor": {
                    "value": "eigvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_eigenvals(covariance_matrix_mean)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_270": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_287": {
                "x": {
                    "value": "tf.reduce_mean(distances, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_288": {
                "input_tensor": {
                    "value": "distances_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.reduce_mean(distances, axis=-1)) + 1e-08",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_292": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "points_xformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(points, xforms, name='points_xformed')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_158": {
                "input": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.range(point_num), (1, -1, 1, 1)), (batch_size, 1, k, 1))",
                            "Call"
                        ],
                        [
                            "tf.py_func(random_choice_2d, [sample_num, prob_matrix], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.range(point_num), (1, -1, 1, 1)), (batch_size, 1, k, 1))",
                            "Call"
                        ],
                        [
                            "tf.py_func(random_choice_2d, [sample_num, prob_matrix], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_237": {
                "x": {
                    "value": "A_22 - q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_245": {
                "x": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.acos(r) / 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_246": {
                "x": {
                    "value": "phi + 2 * math.pi / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_260": {
                "input_tensor": {
                    "value": "eigvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_eigenvals(covariance_matrix_mean)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_271": {
                "input": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.range(point_num), (1, -1, 1, 1)), (batch_size, 1, k, 1))",
                            "Call"
                        ],
                        [
                            "tf.py_func(random_choice_2d, [sample_num, prob_matrix], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "input_tensor": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "input": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.range(point_num), (1, -1, 1, 1)), (batch_size, 1, k, 1))",
                            "Call"
                        ],
                        [
                            "tf.py_func(random_choice_2d, [sample_num, prob_matrix], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "shape": {
                    "value": "(batch_size, point_num, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_initializer_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls.py": {
        "tensorflow": {
            "reshape_37": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[l3_input_shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(l3_points, [l3_input_shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(FC1_inputs_shape, net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.4, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(FC2_inputs_shape, net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.4, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(FC3_inputs_shape, net, num_class, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_global_step_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/quick_draw_full.py": {
        "tensorflow": {
            "exponential_decay_72": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BN_INIT_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "BN_DECAY_DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(decay_steps)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "BN_DECAY_DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_78": {
                "variable": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BN_DECAY_CLIP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/tf_ops/3d_interpolation/tf_interpolate.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "interpolate_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_interpolate_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_29": {
                "op_type": {
                    "value": "ThreeInterpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 64)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_45": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_46": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_43": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_50": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/tf_ops/3d_interpolation/tf_interpolate_op_test.py": {
        "tensorflow": {
            "main_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_11": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 16)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "compute_gradient_error_19": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.random((1, 8, 16)).astype('float32'))",
                            "Call"
                        ]
                    ]
                },
                "x_shape": {
                    "value": "(1, 8, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y": {
                    "value": "interpolated_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "three_interpolate(points, idx, weight)",
                            "Call"
                        ]
                    ]
                },
                "y_shape": {
                    "value": "(1, 128, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_16": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/tf_ops/3d_interpolation/visu_interpolation.py": {
        "tensorflow": {
            "constant_18": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(pts2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_19": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(xyz1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(xyz2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_23": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(dist, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_25": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1.0 / dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_17": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_29": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/tf_ops/grouping/tf_grouping.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "grouping_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_grouping_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "GroupPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz1, (b, 1, n, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, m, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz2, (b, m, 1, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(xyz1 - xyz2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "outi",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_70": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_84": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 64)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_85": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_86": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(tmp1)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(xyz1, (b, 1, n, c)), [1, m, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, 1, n, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(tmp2)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(xyz2, (b, m, 1, c)), [1, 1, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, m, 1, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_83": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_97": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/tf_ops/grouping/tf_grouping_op_test.py": {
        "tensorflow": {
            "main_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_11": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 16)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "compute_gradient_error_23": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.random((1, 128, 16)).astype('float32'))",
                            "Call"
                        ]
                    ]
                },
                "x_shape": {
                    "value": "(1, 128, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ]
                    ]
                },
                "y_shape": {
                    "value": "(1, 8, 32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_10": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/utils/pointnet_util.py": {
        "tensorflow": {
            "InteractiveSession_72": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array(list(range(nsample))).reshape((1, 1, nsample)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1, nsample, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_47": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_199": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(dist, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_201": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1.0 / dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_209": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_180": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_124": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz - tf.tile(tf.expand_dims(new_xyz, 2), [1, 1, nsample, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xyz, (batch_size, 1, nsample, 3))",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dists * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_points, grouped_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "weighted_avg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dists * 5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[avg_points, max_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointnetpp_cls/utils/tf_util.py": {
        "tensorflow": {
            "get_variable_20": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_43": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_46": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_93": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_98": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_155": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_160": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_234": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_239": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_295": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_300": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_340": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_368": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_393": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_419": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_444": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_476": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_478": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_480": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_482": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cond_497": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_500": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_channels]), name='beta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[num_channels]), name='gamma', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_580": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "add_to_collection_47": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_284": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_441": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_487": {
                "variable": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ema.apply([batch_mean, batch_var])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_579": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_46": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_97": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_159": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_238": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_299": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_339": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_476": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_478": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_493": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_581": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_494": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test_general_seg.py": {
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, max_point_num, setting.data_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_49": {
                "variable": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(batch_size, max_point_num, setting.data_dim), name='points')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(batch_size, None, 2), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pts_fts_sampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "seg_probs_op",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "net.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "seg_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_65": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_51": {
                "variable": {
                    "value": "(points_sampled, features_sampled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(pts_fts, indices=indices, name='pts_fts_sampled')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, setting.data_dim - 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "split_points_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_shapenet_seg.py": {
        "tensorflow": {
            "placeholder_74": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, max_point_num, setting.data_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pts_fts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_80": {
                "variable": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, max_point_num, setting.data_dim), name='pts_fts')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(batch_size, None, 2), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pts_fts_sampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "probs_op",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.logits",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_96": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_82": {
                "variable": {
                    "value": "(points_sampled, features_sampled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(pts_fts, indices=indices, name='pts_fts_sampled')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, setting.data_dim - 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "split_points_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_val_cls.py": {
        "tensorflow": {
            "placeholder_102": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "xforms",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "xforms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rotations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "jitter_range",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "jitter_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "data_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_train.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "data_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "label_train_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "label_train.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "label_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "data_val_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_val.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "data_val",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "label_val_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "label_val.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "label_val",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "handle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_151": {
                "variable": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(None, None, 2), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pts_fts_sampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.logits",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_178": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='probs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "variable": {
                    "value": "labels_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "labels_2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_181": {
                "variable": {
                    "value": "labels_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, axis=-1, name='labels_2d')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, tf.shape(logits)[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels_tile",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_182": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(labels_2d, (1, tf.shape(logits)[1]), name='labels_tile')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variables_initializer_190": {
                "variable": {
                    "value": "reset_metrics_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.local_variables() if var.name.split('/')[0] == 'metrics']",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "scalar_193": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/train",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_mean_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_acc/train",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_195": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_per_class_acc/train",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_per_class_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_197": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/val",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_mean_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['val']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_198": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_acc/val",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['val']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_199": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_per_class_acc/val",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_per_class_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['val']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exponential_decay_201": {
                "variable": {
                    "value": "lr_exp_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "setting.learning_rate_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "setting.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "setting.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_203": {
                "variable": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_exp_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(setting.learning_rate_base, global_step, setting.decay_steps, setting.decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "setting.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_204": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(lr_exp_op, setting.learning_rate_min)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_210": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_214": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_216": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_154": {
                "variable": {
                    "value": "(points_sampled, features_sampled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(pts_fts, indices=indices, name='pts_fts_sampled')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, setting.data_dim - 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "split_points_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "(loss_mean_op, loss_mean_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=labels_tile, logits=logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_186": {
                "variable": {
                    "value": "(t_1_acc_op, t_1_acc_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(labels_2d, (1, tf.shape(logits)[1]), name='labels_tile')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=-1, name='predictions')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_per_class_accuracy_187": {
                "variable": {
                    "value": "(t_1_per_class_acc_op, t_1_per_class_acc_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(labels_2d, (1, tf.shape(logits)[1]), name='labels_tile')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=-1, name='predictions')",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "setting.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(lr_exp_op, setting.learning_rate_min)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "setting.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_235": {
                "variable": {
                    "value": "summaries_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_236": {
                "variable": {
                    "value": "summaries_val_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "val",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_237": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "folder_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_folder, 'summary')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_184": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MomentumOptimizer_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(lr_exp_op, setting.learning_rate_min)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "setting.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_246": {
                "variable": {
                    "value": "latest_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "folder_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_folder, 'ckpts')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_181": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "local_variables_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_121": {
                "func": {
                    "value": "setting.map_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[data, label]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, label.dtype]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_137": {
                "func": {
                    "value": "setting.map_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[data, label]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, label.dtype]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_166": {
                "variable": {
                    "value": "(normals, rest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "features_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[3, setting.data_dim - 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "features_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normals_augmented, rest]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_val_seg.py": {
        "tensorflow": {
            "placeholder_97": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "xforms",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "xforms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rotations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "jitter_range",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "jitter_range",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, point_num, setting.data_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pts_fts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "labels_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, point_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels_seg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "labels_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, point_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_109": {
                "variable": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, point_num, setting.data_dim), name='pts_fts')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(None, None, 2), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pts_fts_sampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_133": {
                "variable": {
                    "value": "labels_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=(None, point_num), name='labels_seg')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(None, None, 2), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "labels_sampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_134": {
                "variable": {
                    "value": "labels_weights_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, point_num), name='labels_weights')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(None, None, 2), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "labels_weight_sampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.logits",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='probs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_141": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels_seg, indices=indices, name='labels_sampled')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.logits",
                            "Attribute"
                        ]
                    ]
                },
                "weights": {
                    "value": "labels_weights_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels_weights, indices=indices, name='labels_weight_sampled')",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_150": {
                "variable": {
                    "value": "reset_metrics_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.local_variables() if var.name.split('/')[0] == 'metrics']",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "scalar_154": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/train",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_mean_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_155": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_acc/train",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_156": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_per_class_acc/train",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_per_class_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_158": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/val",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_mean_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['val']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_159": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_acc/val",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['val']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_160": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "t_1_per_class_acc/val",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_1_per_class_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['val']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exponential_decay_162": {
                "variable": {
                    "value": "lr_exp_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "setting.learning_rate_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "setting.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "setting.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_164": {
                "variable": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_exp_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(setting.learning_rate_base, global_step, setting.decay_steps, setting.decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "setting.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_165": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(lr_exp_op, setting.learning_rate_min)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_171": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_175": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_177": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_112": {
                "variable": {
                    "value": "(points_sampled, features_sampled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts_fts_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(pts_fts, indices=indices, name='pts_fts_sampled')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, setting.data_dim - 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "split_points_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_145": {
                "variable": {
                    "value": "(loss_mean_op, loss_mean_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=labels_sampled, logits=logits, weights=labels_weights_sampled)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_146": {
                "variable": {
                    "value": "(t_1_acc_op, t_1_acc_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels_seg, indices=indices, name='labels_sampled')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=-1, name='predictions')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "labels_weights_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels_weights, indices=indices, name='labels_weight_sampled')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_per_class_accuracy_148": {
                "variable": {
                    "value": "(t_1_per_class_acc_op, t_1_per_class_acc_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels_seg, indices=indices, name='labels_sampled')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=-1, name='predictions')",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "setting.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "labels_weights_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels_weights, indices=indices, name='labels_weight_sampled')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(lr_exp_op, setting.learning_rate_min)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "setting.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_196": {
                "variable": {
                    "value": "summaries_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_197": {
                "variable": {
                    "value": "summaries_val_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "val",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_198": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "folder_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_folder, 'summary')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_144": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MomentumOptimizer_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_clip_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(lr_exp_op, setting.learning_rate_min)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "setting.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_172": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_207": {
                "variable": {
                    "value": "latest_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "folder_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_folder, 'ckpts')",
                            "Call"
                        ]
                    ]
                }
            },
            "local_variables_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_124": {
                "variable": {
                    "value": "(normals, rest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "features_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[3, setting.data_dim - 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "features_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normals_augmented, rest]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}