{
    "model/AttTreeEmbedding.py": {
        "sklearn": {
            "KMeans_413": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "roc_auc_score_492": {
                "variable": {
                    "value": "test_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.array(normality_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.attention_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.project_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "variable": {
                    "value": "query_project",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_project",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention_matrix(inputs)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(query_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "project_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.project_weight(query_project)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "key * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.attention_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "F.normalize(hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.project_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "F.normalize(hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "cat_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "project_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "project_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.project_weight(cat_vector)",
                            "Call"
                        ],
                        [
                            "torch.relu(project_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "attention_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "project_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.project_weight(cat_vector)",
                            "Call"
                        ],
                        [
                            "torch.relu(project_vector)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(project_vector, self.h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_87": {
                "variable": {
                    "value": "self.leaf_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_leaf",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_88": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "importer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.user_embedding.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_90": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "self.item_embedding.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_99": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(100, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.fussionlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.output_cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.output_reg_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "variable": {
                    "value": "classification_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_cls_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "regression_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_reg_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "classification_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_cls_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_204": {
                "variable": {
                    "value": "self.leaf_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_leaf",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_205": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "importer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "self.user_embedding.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_207": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "self.item_embedding.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_216": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(100, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fussionlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.output_cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.output_reg_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_248": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "F.normalize(hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_251": {
                "variable": {
                    "value": "classification_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_cls_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_252": {
                "variable": {
                    "value": "regression_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_reg_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "classification_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_cls_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_320": {
                "variable": {
                    "value": "self.leaf_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_leaf",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_321": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "importer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "self.user_embedding.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_323": {
                "variable": {
                    "value": "self.item_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "self.item_embedding.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_332": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(100, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.fussionlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.output_cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.output_reg_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_414": {
                "variable": {
                    "value": "self.avg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_65": {
                "variable": {
                    "value": "(attention_vec, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "key * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(importer_vector, item_vector, set_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_196": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(importer_vector, item_vector, set_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_312": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(importer_vector, item_vector, set_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_366": {
                "variable": {
                    "value": "classification_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_cls_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_367": {
                "variable": {
                    "value": "regression_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_reg_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_22": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_45": {
                "*size": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "F.normalize(hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "key * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(importer_vector, item_vector, set_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(importer_vector, item_vector, set_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(importer_vector, item_vector, set_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_22": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "key * attention_weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(attention_vec, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention_vec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.MSELoss(reduction='none')(y_pred_rev, batch_reg) * batch_cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_290": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.MSELoss(reduction='none')(y_pred_rev, batch_reg) * batch_cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_450": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.MSELoss(reduction='none')(y_pred_rev, batch_reg) * batch_cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cdist_483": {
                "variable": {
                    "value": "distance_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "F.normalize(hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "self.hidden(fusion)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ],
                        [
                            "self.forward(batch_feature, batch_user, batch_item)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.avg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_486": {
                "variable": {
                    "value": "normality_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden - self.avg_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCELoss_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_175": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_290": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_450": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/AttentionAggregate.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valid_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ExponentialLR_90": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RangerLars(self.model.parameters(), lr=0.01, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "RangerLars(self.model.parameters(), lr=0.01, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "self.y_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logit_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ravel_146": {
                "variable": {
                    "value": "self.y_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valid_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_212": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ExponentialLR_218": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RangerLars(self.model.parameters(), lr=0.01, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "RangerLars(self.model.parameters(), lr=0.01, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_281": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "self.y_anomaly",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logit_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ravel_291": {
                "variable": {
                    "value": "self.y_anomaly",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_340": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outchannel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outchannel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_351": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Dense(inchannel, outchannel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_399": {
                "variable": {
                    "value": "row_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "row[self.node_columns].to_numpy(dtype=float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_433": {
                "variable": {
                    "value": "neighbor_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbor_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_447": {
                "variable": {
                    "value": "self.selfmha_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_448": {
                "variable": {
                    "value": "self.mha_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "variable": {
                    "value": "self.recons_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim, self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_461": {
                "variable": {
                    "value": "self.recon_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_462": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_482": {
                "variable": {
                    "value": "neighbor_queryatt_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbor_queryatt_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_512": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_dim, self.v_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_513": {
                "variable": {
                    "value": "self.proj_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.v_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_517": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_v(self.proj(context)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_476": {
                "variable": {
                    "value": "neighbor_each",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_each.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_489": {
                "variable": {
                    "value": "mask_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_503": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(final_repr).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logit_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ravel_124": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logit_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ravel_253": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_425": {
                "variable": {
                    "value": "aggregated_neighbors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.search_df.iloc[neighbors][self.node_columns].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_430": {
                "variable": {
                    "value": "aggregated_neighbors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neighbor_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "row_feature.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_456": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_457": {
                "num_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_458": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_459": {
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_485": {
                "tensors": {
                    "value": "(neighbor_queryatt_mat, query_embed.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.v_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_518": {
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_518": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_420": {
                "variable": {
                    "value": "random_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_num * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_428": {
                "variable": {
                    "value": "aggregated_neighbors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated_neighbors, torch.zeros(diff, aggregated_neighbors.shape[1]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiheadAttention_450": {
                "embed_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "self.nhead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiheadAttention_451": {
                "embed_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "self.nhead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_498": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(final_repr).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_501": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(final_repr).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_428": {
                "*size": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.neighbor_k - len(aggregated_neighbors)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "aggregated_neighbors.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_415": {
                "*size": {
                    "value": "sample_num * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/bATE.py": {
        "sklearn": {}
    },
    "query_strategies/badge.py": {
        "sklearn": {
            "pairwise_distances_20": {
                "variable": {
                    "value": "D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[X[ind]]",
                            "List"
                        ]
                    ]
                }
            },
            "pairwise_distances_22": {
                "variable": {
                    "value": "newD",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "[mu[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/deepSAD.py": {
        "sklearn": {
            "roc_curve_287": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_109": {
                "variable": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "train_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping[x] for x in train_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "train_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping[x] for x in train_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "train_unlab_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_unlab_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_unlab_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "train_unlab_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_unlab_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping[x] for x in train_raw_unlab_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "train_unlab_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_unlab_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping[x] for x in train_raw_unlab_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(valid_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "valid_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping.get(x, 0) for x in valid_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "valid_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping.get(x, 0) for x in valid_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "test_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping.get(x, 0) for x in test_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "test_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping.get(x, 0) for x in test_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "train_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.train_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "valid_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.valid_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "test_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.test_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "train_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "valid_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_valid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "test_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_test",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_135": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_136": {
                "variable": {
                    "value": "unlabel_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_unlab_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_137": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_138": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "self.data.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(train_leaves, train_user, train_item, train_label_cls, train_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "self.data.unlabel_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabel_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(train_unlab_leaves, train_unlab_user, train_unlab_item)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "self.data.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(valid_leaves, valid_user, valid_item, valid_label_cls, valid_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "self.data.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(test_leaves, test_user, test_item, test_label_cls, test_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_245": {
                "variable": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_329": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_336": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_450": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_456": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_566": {
                "variable": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "y_pred_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_510": {
                "variable": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_vector - self.model.module.avg_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_513": {
                "variable": {
                    "value": "unlabel_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unlabel_hidden_vector - self.model.module.avg_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_515": {
                "variable": {
                    "value": "label_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "batch_cls == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(hidden_vector - self.model.module.avg_hidden, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "distance ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_534": {
                "obj": {
                    "value": "normality_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'temp/normality_scores_valid{}.ckpt'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_535": {
                "obj": {
                    "value": "self.data.valid_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'temp/xgb_validy{}.ckpt'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_388": {
                "variable": {
                    "value": "revenue_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.MSELoss(reduction='none')(regression_output, batch_reg) * batch_cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_412": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_540": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_516": {
                "input": {
                    "value": "unlabel_distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(unlabel_hidden_vector - self.model.module.avg_hidden, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_388": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/diversity.py": {
        "sklearn": {
            "KMeans_39": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/gATE.py": {
        "sklearn": {}
    },
    "query_strategies/multideepSAD.py": {
        "sklearn": {
            "roc_curve_287": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_109": {
                "variable": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "train_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping[x] for x in train_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "train_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping[x] for x in train_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "train_unlab_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_unlab_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_unlab_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "train_unlab_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_unlab_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping[x] for x in train_raw_unlab_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "train_unlab_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_unlab_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping[x] for x in train_raw_unlab_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(valid_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "valid_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping.get(x, 0) for x in valid_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "valid_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping.get(x, 0) for x in valid_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "test_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping.get(x, 0) for x in test_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "test_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping.get(x, 0) for x in test_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "train_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.train_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "valid_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.valid_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "test_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.test_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "train_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "valid_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_valid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "test_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_test",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_135": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_136": {
                "variable": {
                    "value": "unlabel_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_unlab_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_137": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_138": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "self.data.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(train_leaves, train_user, train_item, train_label_cls, train_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "self.data.unlabel_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabel_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(train_unlab_leaves, train_unlab_user, train_unlab_item)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "self.data.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(valid_leaves, valid_user, valid_item, valid_label_cls, valid_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "self.data.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(test_leaves, test_user, test_item, test_label_cls, test_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_245": {
                "variable": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_330": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_337": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_451": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_457": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_571": {
                "variable": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "y_pred_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_511": {
                "variable": {
                    "value": "distance_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "hidden_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(batch_feature, batch_user, batch_item)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.model.module.avg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_516": {
                "variable": {
                    "value": "unlabel_distance_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "unlabel_hidden_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.model.module.avg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_519": {
                "variable": {
                    "value": "label_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "batch_cls == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distance_matrix.min(dim=1).values",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "min_dist ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_539": {
                "obj": {
                    "value": "normality_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'temp/normality_scores_valid{}.ckpt'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_540": {
                "obj": {
                    "value": "self.data.valid_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'temp/xgb_validy{}.ckpt'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_413": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_545": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_520": {
                "input": {
                    "value": "unlabel_min_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unlabel_distance_matrix.min(dim=1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BCELoss_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/risky.py": {
        "sklearn": {
            "LogisticRegression_68": {
                "variable": {
                    "value": "self.clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_100": {
                "variable": {
                    "value": "self.train_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(self.trainX.to_numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(len(self.train_ds) // 10, 256)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.trainX.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "self.y_totalrisk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(testX.to_numpy())",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.bestW",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "variable": {
                    "value": "self.y_totalrisk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "self.data.valid_lab[risk_perceptron]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(self.validX.to_numpy())",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "self.trainy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "s_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_111": {
                "variable": {
                    "value": "yhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data.train_cls_label",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "data": {
                    "value": "self.validX.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "testX.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/ssl_ae.py": {
        "sklearn": {
            "OneHotEncoder_161": {
                "variable": {
                    "value": "xgbenc",
                    "type": "Variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data.unlabel_loader.dataset.tensors[0].shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Dense(i, j) for (i, j) in zip(layers[:-1], layers[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data.unlabel_loader.dataset.tensors[0].shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Dense(i, j) for (i, j) in zip(layers[:-1], layers[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "variable": {
                    "value": "reconstruct_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "variable": {
                    "value": "sup_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cls_layer(code)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_172": {
                "variable": {
                    "value": "label_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(label_onehot.todense()).repeat(times, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_173": {
                "variable": {
                    "value": "unlabel_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(unlabel_onehot.todense())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_174": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(valid_onehot.todense())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_175": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(test_onehot.todense())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "self.data.label_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "label_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(torch.FloatTensor(label_onehot.todense()).repeat(times, 1), torch.FloatTensor(self.data.train_cls_label).repeat(times))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_186": {
                "variable": {
                    "value": "self.data.unlabel_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabel_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(torch.FloatTensor(unlabel_onehot.todense()))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "self.data.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(torch.FloatTensor(valid_onehot.todense()), torch.FloatTensor(self.data.valid_cls_label), torch.FloatTensor(self.data.norm_revenue_valid))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "self.data.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(torch.FloatTensor(test_onehot.todense()), torch.FloatTensor(self.data.test_cls_label), torch.FloatTensor(self.data.norm_revenue_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_207": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_209": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_215": {
                "variable": {
                    "value": "self.cls_objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_216": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_302": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_37": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "(recon_batch_unlab, recon_batch_lab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "(unlab_data, label_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/upDATE.py": {
        "sklearn": {}
    },
    "query_strategies/xgb_lr.py": {
        "sklearn": {
            "OneHotEncoder_38": {
                "variable": {
                    "value": "xgbenc",
                    "type": "Variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_47": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "roc_auc_score_50": {
                "variable": {
                    "value": "best_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(y_prob > best_thresh) * 1",
                            "BinOp"
                        ],
                        [
                            "(y_prob > th) * 1",
                            "BinOp"
                        ],
                        [
                            "(y_prob > best_thresh) * 1",
                            "BinOp"
                        ],
                        [
                            "(y_prob > th) * 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "f1_score_73": {
                "variable": {
                    "value": "best_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiLabelBinarizer_177": {
                "variable": {
                    "value": "mlb",
                    "type": "Variable",
                    "possible_values": []
                },
                "classes": {
                    "value": "list(range(len(codes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_61": {
                "variable": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_label[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_66": {
                "variable": {
                    "value": "roc_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_75": {
                "variable": {
                    "value": "roc_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob[~np.isnan(y_test)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_40": {
                "variable": {
                    "value": "auc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict_proba(x_list)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "main.py": {
        "torch": {}
    },
    "model/TreeEmbedding.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.leaf_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_leaf",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.output_cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.output_reg_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden(set_vector)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_33": {
                "variable": {
                    "value": "classification_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_cls_layer(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_25": {
                "variable": {
                    "value": "(set_vector, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "leaf_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.leaf_embedding(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_27": {
                "variable": {
                    "value": "set_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "leaf_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.leaf_embedding(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.MSELoss(reduction='none')(y_pred_rev, batch_reg) * batch_cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCELoss_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {
            "exp_21": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-BCE_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_41": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "contrast_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(features, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_50": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, torch.t(contrast_feature))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_52": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, torch.t(contrast_feature)), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_57": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size * anchor_count).view(-1, 1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_18": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_20": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "F_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - pt) ** self.gamma * BCE_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unbind_45": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features.view(features.shape[0], features.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "input": {
                    "value": "anchor_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "contrast_feature",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(contrast_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_57": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eq(labels, torch.t(labels)).float().cuda()",
                            "Call"
                        ],
                        [
                            "mask.float().cuda()",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_57": {
                "start": {
                    "value": "batch_size * anchor_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_61": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_62": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_50": {
                "input": {
                    "value": "contrast_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.unbind(features, dim=1), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_41": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "query_strategies/DATE.py": {
        "torch": {
            "tensor_102": {
                "variable": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "train_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping[x] for x in train_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "train_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping[x] for x in train_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(valid_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "valid_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping.get(x, 0) for x in valid_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "valid_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping.get(x, 0) for x in valid_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_leaves).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "test_user",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_importers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[importer_mapping.get(x, 0) for x in test_raw_importers]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "test_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_items",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[hs6_mapping.get(x, 0) for x in test_raw_items]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "train_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.train_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "valid_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.valid_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "test_label_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.test_cls_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "train_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "valid_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_valid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "test_label_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data.norm_revenue_test",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_124": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_125": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "valid_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_126": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "self.data.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(train_leaves, train_user, train_item, train_label_cls, train_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "self.data.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(valid_leaves, valid_user, valid_item, valid_label_cls, valid_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "self.data.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(test_leaves, test_user, test_item, test_label_cls, test_label_reg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_298": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_305": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_410": {
                "variable": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_157": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "y_pred_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_358": {
                "variable": {
                    "value": "revenue_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.MSELoss(reduction='none')(regression_output, batch_reg) * batch_cls",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_383": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_358": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/csi.py": {
        "torch": {
            "diagonal_52": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos + m - neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(d, ndf, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LeakyReLU(0.2, inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.optimizerC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_rots",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "celoss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diagflat_53": {
                "input": {
                    "value": "torch.ones(zs.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "sum_zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.ndf, self.n_rots)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_38": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_xs[rp[idx]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_90": {
                "variable": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_rots",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_test[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_119": {
                "variable": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "logp_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_27": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_118": {
                "input": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_53": {
                "*size": {
                    "value": "zs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_122": {
                "input": {
                    "value": "logp_sz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(diffs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/drift.py": {
        "torch": {
            "stack_20": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "date_sampler.get_embedding_valid()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "test_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "date_sampler.get_embedding_test()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "query_strategies/p_value.py": {
        "torch": {
            "tensor_45": {
                "variable": {
                    "value": "ind_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(len(valid_embeddings)), num_sample_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "ind_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(len(test_embeddings)), num_sample_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_48": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ind_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(random.sample(range(len(valid_embeddings)), num_sample_valid)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_49": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ind_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(random.sample(range(len(test_embeddings)), num_sample_test)).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "query_strategies/pot.py": {
        "torch": {
            "cdist_27": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(test_embeddings, 0, ind_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_28": {
                "variable": {
                    "value": "lol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cdist(xs, xt)",
                            "Call"
                        ],
                        [
                            "M / lol",
                            "BinOp"
                        ],
                        [
                            "M.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cdist(xs, xt)",
                            "Call"
                        ],
                        [
                            "M / lol",
                            "BinOp"
                        ],
                        [
                            "M.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cdist_39": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(test_embeddings, 0, ind_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_40": {
                "variable": {
                    "value": "lol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cdist(xs, xt)",
                            "Call"
                        ],
                        [
                            "M / lol",
                            "BinOp"
                        ],
                        [
                            "M.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cdist(xs, xt)",
                            "Call"
                        ],
                        [
                            "M / lol",
                            "BinOp"
                        ],
                        [
                            "M.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_48": {
                "variable": {
                    "value": "xsnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_50": {
                "variable": {
                    "value": "xtnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(test_embeddings, 0, ind_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "ind_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(len(valid_embeddings)), num_sample_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "ind_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(len(test_embeddings)), num_sample_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_70": {
                "variable": {
                    "value": "xv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ind_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(random.sample(range(len(valid_embeddings)), num_sample_valid)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_71": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ind_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(random.sample(range(len(test_embeddings)), num_sample_test)).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "query_strategies/radahybrid.py": {
        "torch": {}
    }
}