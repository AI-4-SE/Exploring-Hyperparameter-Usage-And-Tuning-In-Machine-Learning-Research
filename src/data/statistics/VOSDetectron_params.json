{
    "imdb/vos/config.py": {
        "torch": {}
    },
    "lib/core/config.py": {
        "torch": {}
    },
    "lib/core/test.py": {
        "torch": {
            "from_numpy_120": {
                "variable": {
                    "value": "inputs[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "ndarray": {
                    "value": "inputs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "inputs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/core/test_engine.py": {
        "torch": {
            "load_331": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/nms/_ext/nms/__init__.py": {
        "torch": {}
    },
    "lib/model/nms/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/nms/nms_gpu.py": {
        "torch": {}
    },
    "lib/model/nms/nms_wrapper.py": {
        "torch": {}
    },
    "lib/model/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_align/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "lib/model/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/_ext/crop_resize/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/_ext/roi_crop/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/crop_resize.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input1.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input2.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input2.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "grad_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/gridgen.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_45": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input1.new(self.input1.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.baddbmm(grad_input1, torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2), self.batchgrid.view(-1, self.height * self.width, 3))",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "input": {
                    "value": "grad_output.view(-1, self.height * self.width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_crop/modules/gridgen.py": {
        "torch": {
            "from_numpy_61": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output0, output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_133": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(x, 3), torch.sum(y, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_159": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_217": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_246": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_284": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_351": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_358": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan_102": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_158": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_178": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_179": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_180": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_182": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_187": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_215": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_216": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_244": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_245": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_246": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_248": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_253": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_260": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_282": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_282": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_283": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_314": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_319": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_330": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_356": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_357": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_400": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_102": {
                "input": {
                    "value": "np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(self.batchgrid, input1[:, :, :, 3:6])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid3d[:, :, :, 1:2] * depth + trans1.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1)",
                            "BinOp"
                        ],
                        [
                            "x_ * torch.sin(rotate_z) + y_ * torch.cos(rotate_z)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_185": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_251": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_260": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_317": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_330": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_397": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_397": {
                "input": {
                    "value": "rotate_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_403": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_407": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_409": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/modules/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/_ext/roi_pooling/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/build.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_pooling/functions/roi_pool.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/modules/roi_pool.py": {
        "torch": {}
    },
    "lib/model/utils/net_utils.py": {
        "torch": {
            "cat_69": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_112": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_159": {
                "variable": {
                    "value": "out_offcial",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(N, C, H, W).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_162": {
                "variable": {
                    "value": "grad_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out_offcial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(input, grid)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(input, grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_outputs.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_clone.data[:, :, :, 1], grid_clone.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_79": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_82": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_83": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(crops, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_85": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_88": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_153": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.size(2)",
                            "Call"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.size(3)",
                            "Call"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_156": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.size(2)",
                            "Call"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.size(3)",
                            "Call"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_160": {
                "*size": {
                    "value": "out_offcial.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/FPN.py": {
        "torch": {
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fpn_dim_lateral[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.topdown_lateral_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.posthoc_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_297": {
                "variable": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_blob",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "variable": {
                    "value": "self.FPN_RPN_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_level_info.dims[0]",
                            "Subscript"
                        ],
                        [
                            "fpn_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "variable": {
                    "value": "self.FPN_RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors * 2 if cfg.RPN.CLS_ACTIVATION == 'softmax' else num_anchors",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "variable": {
                    "value": "self.FPN_RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_340": {
                "variable": {
                    "value": "self.GenerateProposals_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.conv_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fpn_dim_lateral[0], fpn_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fpn_dim_lateral[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_135": {
                "variable": {
                    "value": "self.maxpool_p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.extra_pyramid_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.conv_lateral",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in_lateral, self.dim_out, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "variable": {
                    "value": "self.conv_lateral",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in_lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_387": {
                "variable": {
                    "value": "fpn_rpn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.FPN_RPN_conv(bl_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_446": {
                "variable": {
                    "value": "loss_rpn_cls_fpn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_logits_fpn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['rpn_cls_logits_fpn' + slvl].view(b, 2, c // 2, h, w).permute(0, 2, 3, 4, 1).contiguous().view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_labels_int32_fpn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['rpn_labels_int32_wide_fpn' + slvl][:, :, :h, :w]",
                            "Subscript"
                        ],
                        [
                            "rpn_labels_int32_fpn.contiguous().view(-1).long()",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_450": {
                "variable": {
                    "value": "loss_rpn_cls_fpn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kwargs['rpn_cls_logits_fpn' + slvl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rpn_labels_int32_fpn.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rpn_labels_int32_fpn >= 0).float()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "fpn_dim_lateral[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_99": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(fpn_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "dim_in_lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_271": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(self.dim_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_404": {
                "variable": {
                    "value": "fpn_rpn_cls_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_rpn_cls_score.view(B, 2, C // 2, H, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_408": {
                "variable": {
                    "value": "fpn_rpn_cls_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FPN_RPN_cls_score(fpn_rpn_conv)",
                            "Call"
                        ],
                        [
                            "self.FPN_RPN_cls_score(fpn_rpn_conv.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "nn.Conv2d(fpn_dim, fpn_dim, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_level_info.dims[0]",
                            "Subscript"
                        ],
                        [
                            "fpn_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_118": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(fpn_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_251": {
                "input": {
                    "value": "fpn_output_blobs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/ResNet.py": {
        "torch": {
            "AvgPool2d_128": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, outplanes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, outplanes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 7, stride=2, padding=3, bias=False)), ('bn1', mynn.AffineChannel2d(64)), ('relu', nn.ReLU(inplace=True)), ('maxpool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 7, stride=2, padding=3, bias=False)), ('gn1', nn.GroupNorm(net_utils.get_group_gn(64), 64, eps=cfg.GROUP_NORM.EPSILON)), ('relu', nn.ReLU(inplace=True)), ('maxpool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "str1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "str3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1 * dilation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_266": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "str1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_309": {
                "variable": {
                    "value": "self.gn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "net_utils.get_group_gn(innerplanes)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "str3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1 * dilation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_315": {
                "variable": {
                    "value": "self.gn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "net_utils.get_group_gn(innerplanes)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_318": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "innerplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_320": {
                "variable": {
                    "value": "self.gn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "net_utils.get_group_gn(outplanes)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_324": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*res_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_init",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_init",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_215": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(outplanes)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_230": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_236": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_239": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/collect_and_distribute_fpn_rpn_proposals.py": {
        "torch": {}
    },
    "lib/modeling/fast_rcnn_heads.py": {
        "torch": {
            "cross_entropy_91": {
                "variable": {
                    "value": "loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score(x)",
                            "Call"
                        ],
                        [
                            "self.cls_score(x.detach())",
                            "Call"
                        ],
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(label_int32.astype('int64'))).cuda(device_id)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cfg.MODEL.NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_106": {
                "variable": {
                    "value": "loss_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "id_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.identity_score(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(id_score, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "id_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(id_int32.astype('int64'))).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in * roi_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x.view(batch_size, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in * roi_size * roi_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x.view(batch_size, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in * roi_size * roi_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x.view(batch_size, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * cfg.MODEL.NUM_CLASSES",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.identity_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cfg.MODEL.TOTAL_INSTANCE_NUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score(x)",
                            "Call"
                        ],
                        [
                            "self.cls_score(x.detach())",
                            "Call"
                        ],
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "id_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "id_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.identity_score(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(id_score, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "ndarray": {
                    "value": "label_int32.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "ndarray": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(bbox_targets)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "bbox_inside_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(bbox_inside_weights)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "bbox_outside_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(bbox_outside_weights)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "id_int32.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_240": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.FAST_RCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/generate_proposal_labels.py": {
        "torch": {}
    },
    "lib/modeling/generate_proposals.py": {
        "torch": {}
    },
    "lib/modeling/keypoint_rcnn_heads.py": {
        "torch": {
            "cross_entropy_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kps_pred.view(-1, cfg.KRCNN.HEATMAP_SIZE ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "kps_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(keypoint_locations_int32.astype('int64'))).cuda(device_id)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.conv_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.KRCNN.DECONV_DIM",
                            "Attribute"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg.KRCNN.DECONV_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "cfg.KRCNN.DECONV_KERNEL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(cfg.KRCNN.DECONV_KERNEL / 2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_32": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.KRCNN.DECONV_DIM",
                            "Attribute"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg.KRCNN.NUM_KEYPOINTS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "cfg.KRCNN.DECONV_KERNEL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(cfg.KRCNN.DECONV_KERNEL / 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.KRCNN.DECONV_DIM",
                            "Attribute"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg.KRCNN.NUM_KEYPOINTS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "keypoint_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(keypoint_weights)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "keypoint_locations_int32.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "keypoint_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(keypoint_weights)).cuda(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.KRCNN.DECONV_DIM",
                            "Attribute"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.KRCNN.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.KRCNN.CONV_HEAD_KERNEL",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/mask_rcnn_heads.py": {
        "torch": {
            "binary_cross_entropy_with_logits_96": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_pred.view(n_rois, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "masks_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(masks_int32.astype('float32'))).cuda(device_id)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(masks_gt > -1).float()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.conv_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_150": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.conv_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_215": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_281": {
                "variable": {
                    "value": "self.upconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_331": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classify(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.conv_fcn(x)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.attention(x) + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_fcn(x)",
                            "Call"
                        ],
                        [
                            "x[inds]",
                            "Subscript"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.upconv5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.upconv5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_345": {
                "variable": {
                    "value": "self.upconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_381": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classify(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.conv_fcn(x)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.attention(x) + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_fcn(x)",
                            "Call"
                        ],
                        [
                            "x[inds]",
                            "Subscript"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.upconv5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.upconv5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_inner",
                            "variable"
                        ],
                        [
                            "dim_inner",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes * cfg.MRCNN.RESOLUTION ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_inner",
                            "variable"
                        ],
                        [
                            "dim_inner",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes if cfg.MRCNN.CLS_SPECIFIC_MASK else 1",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classify(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.conv_fcn(x)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.attention(x) + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_fcn(x)",
                            "Call"
                        ],
                        [
                            "x[inds]",
                            "Subscript"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.upconv5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.roi_xform(x, rpn_ret, blob_rois='mask_rois', method=cfg.MRCNN.ROI_XFORM_METHOD, resolution=cfg.MRCNN.ROI_XFORM_RESOLUTION, spatial_scale=self.spatial_scale, sampling_ratio=cfg.MRCNN.ROI_XFORM_SAMPLING_RATIO)",
                            "Call"
                        ],
                        [
                            "self.res5(x)",
                            "Call"
                        ],
                        [
                            "self.upconv5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_188": {
                "input": {
                    "value": "self.upconv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_260": {
                "input": {
                    "value": "self.upconv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "masks_int32.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_inner",
                            "variable"
                        ],
                        [
                            "dim_inner",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1 * dilation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DILATION",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_inner",
                            "variable"
                        ],
                        [
                            "dim_inner",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1 * dilation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_208": {
                "num_groups": {
                    "value": "net_utils.get_group_gn(dim_inner)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ],
                        [
                            "cfg.MRCNN.DIM_REDUCED",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "cfg.GROUP_NORM.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_316": {
                "ndarray": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.nonzero(roi_has_mask_int32 > 0)[0]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.from_numpy(inds)).cuda(x.get_device())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/modeling/model_builder.py": {
        "torch": {
            "cat_296": {
                "variable": {
                    "value": "xform_shuffled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_50": {
                "input": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "sb[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_143": {
                "mode": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_319": {
                "variable": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIPoolFunction(resolution, resolution, spatial_scale)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(blobs_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "xform_shuffled[restore_bl]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, spatial_scale, sampling_ratio)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoIPoolFunction(resolution, resolution, sc)(bl_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(bl_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, sc, sampling_ratio)(bl_in, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_284": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "ndarray": {
                    "value": "restore_bl.astype('int64', copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_310": {
                "ndarray": {
                    "value": "rpn_ret[blob_rois]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_pool2d_288": {
                "variable": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIPoolFunction(resolution, resolution, spatial_scale)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(blobs_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "xform_shuffled[restore_bl]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, spatial_scale, sampling_ratio)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoIPoolFunction(resolution, resolution, sc)(bl_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(bl_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, sc, sampling_ratio)(bl_in, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "ndarray": {
                    "value": "rpn_ret[bl_rois]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/roi_xfrom/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "lib/modeling/roi_xfrom/roi_align/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/roi_xfrom/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "lib/modeling/roi_xfrom/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale, self.sampling_ratio)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale, self.sampling_ratio)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale, self.sampling_ratio)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale, self.sampling_ratio)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modeling/rpn_heads.py": {
        "torch": {
            "Conv2d_50": {
                "variable": {
                    "value": "self.RPN_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "rpn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.RPN_conv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_148": {
                "variable": {
                    "value": "loss_rpn_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_logits.view(B, 2, C // 2, H, W).permute(0, 2, 3, 4, 1).contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.RPN_cls_score(rpn_conv)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_labels_int32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_labels_int32_wide[:, :, :h, :w]",
                            "Subscript"
                        ],
                        [
                            "rpn_labels_int32.contiguous().view(-1).long()",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_152": {
                "variable": {
                    "value": "loss_rpn_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_logits.view(B, 2, C // 2, H, W).permute(0, 2, 3, 4, 1).contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.RPN_cls_score(rpn_conv)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_labels_int32.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rpn_labels_int32 >= 0).float()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "rpn_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_logits.view(B, 2, C // 2, H, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "rpn_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_cls_logits.view(B, 2, C // 2, H, W).permute(0, 2, 3, 4, 1).contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.RPN_cls_score(rpn_conv)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/nn/init.py": {
        "torch": {}
    },
    "lib/nn/modules/affine.py": {
        "torch": {
            "Parameter_10": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/modules/attention.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim, 3, 1, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim, 3, 1, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim, 3, 1, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim, 3, 1, padding=2, dilation=2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/modules/normalization.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/modules/upsample.py": {
        "torch": {
            "ConvTranspose2d_44": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up_scale * 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.up_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/nn/parallel/_functions.py": {
        "torch": {
            "broadcast_coalesced_17": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_74": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "ctx.chunk_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "src": {
                    "value": "ctx.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Stream_101": {
                "variable": {
                    "value": "_streams[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_55": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "ctx.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "ctx.target_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_79": {
                "variable": {
                    "value": "main_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_78": {
                "type": {
                    "value": "ctx.target_gpus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/parallel/data_parallel.py": {
        "torch": {
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_101": {
                "tensor": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(split_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/parallel/parallel_apply.py": {
        "torch": {
            "device_41": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/nn/parallel/replicate.py": {
        "torch": {
            "broadcast_coalesced_19": {
                "variable": {
                    "value": "buffer_copies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "buffers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(network._all_buffers())",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(devices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/nn/parallel/scatter_gather.py": {
        "torch": {
            "is_tensor_21": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "np.concatenate(outputs, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/roi_data/loader.py": {
        "torch": {}
    },
    "lib/utils/detectron_weight_helper.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "src_t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/misc.py": {
        "torch": {
            "is_tensor_108": {
                "obj": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.type_as(param.data)",
                            "Call"
                        ],
                        [
                            "value.cuda(param.get_device()) if param.is_cuda else value.cpu()",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/net.py": {
        "torch": {
            "abs_24": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_130": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "{'epoch': args.epoch, 'step': args.step, 'iters_per_epoch': args.iters_per_epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_{}_{}.pth'.format(args.epoch, args.step))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_26": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "state_dict[w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_dict[w][:4, :], state_dict[w][4:, :].repeat(int(model.state_dict()[w].shape[0] / 4) - 1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "state_dict[w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_dict[w][:4], state_dict[w][4:].repeat(int(model.state_dict()[w].shape[0] / 4) - 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/resnet_weights_helper.py": {
        "torch": {
            "load_29": {
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.ROOT_DIR, cfg.RESNETS.IMAGENET_PRETRAINED_WEIGHTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/subprocess.py": {
        "torch": {
            "device_count_55": {
                "variable": {
                    "value": "NUM_GPUS",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_ss/ss_dataloader/ss_Transformer.py": {
        "torch": {}
    },
    "lib_ss/ss_dataloader/ss_loader.py": {
        "torch": {
            "from_numpy_119": {
                "variable": {
                    "value": "inputs[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "inputs[img_PIL]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['img_PIL']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "inputs[gt_PIL]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['gt_PIL']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib_ss/ss_modeling/IDA.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.upsampleModules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.lateralModules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(i_dim, o_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Conv2d(i_dim, o_dim, kernel_size=3, dilation=2, padding=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "i_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dims[idx + 1]",
                            "Subscript"
                        ],
                        [
                            "in_dims[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ],
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_48": {
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ],
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "UpsamplingBilinear2d_49": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "i_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dims[idx + 1]",
                            "Subscript"
                        ],
                        [
                            "in_dims[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ],
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_57": {
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ],
                        [
                            "out_dims[idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib_ss/ss_modeling/IDA_ss_head.py": {
        "torch": {
            "cat_35": {
                "variable": {
                    "value": "cat_blob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "same_scale_blobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "i_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.IDA.LEVEL0_out_dims[-1] + config.IDA.LEVEL1_out_dims[-1] + config.IDA.LEVEL2_out_dims[-1] + config.IDA.LEVEL3_out_dims[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.class_num",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_33": {
                "input": {
                    "value": "blobs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1.0 / self.scales[idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib_ss/ss_modeling/generic_ss_loss.py": {
        "torch": {
            "CrossEntropyLoss_5": {
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib_ss/ss_modeling/generic_ss_metric.py": {
        "torch": {
            "eq_11": {
                "variable": {
                    "value": "out_cmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_12": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_cmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(y_pred, y_gt)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_14": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(list(y_pred.shape)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_gt < y_pred.shape[1] - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_17": {
                "input": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_cmp, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.Tensor(list(y_pred.shape)).cuda())",
                            "Call"
                        ],
                        [
                            "torch.sum(y_gt < y_pred.shape[1] - 1, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib_ss/ss_modeling/generic_ss_prediction.py": {
        "torch": {
            "argmax_8": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(y_pred, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib_ss/ss_modeling/model_builder.py": {
        "torch": {}
    },
    "lib_ss/tools/train_net.py": {
        "torch": {
            "save_183": {
                "obj": {
                    "value": "{'step': step, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemanticSegmentationDataset(txtfile, mode, use_data_augmentation, assertNum=None, gtMapper=gt_mapper, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "SemanticSegmentationDataset(txtfile, mode, use_data_augmentation, assertNum=None, gtMapper=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemanticSegmentationDataset(txtfile, mode, use_data_augmentation, assertNum=None, gtMapper=gt_mapper, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "SemanticSegmentationDataset(txtfile, mode, use_data_augmentation, assertNum=None, gtMapper=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_247": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_253": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ],
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_351": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_359": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ],
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_353": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/generate_proposal_file.py": {
        "torch": {
            "load_125": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/get_cls_mapper.py": {
        "torch": {
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_139": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/infer_davis_sequential.py": {
        "torch": {
            "load_126": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/infer_simple.py": {
        "torch": {
            "load_134": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/predict_davis.py": {
        "torch": {
            "load_130": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/train.py": {
        "torch": {
            "device_count_187": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoiDataLoader(roidb, cfg.MODEL.NUM_CLASSES, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batchSampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler=MinibatchSampler(ratio_list, ratio_index), batch_size=args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_THREADS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_minibatch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "{'step': step, 'train_size': train_size, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_322": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_330": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/train_coco.py": {
        "torch": {
            "device_count_187": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoiDataLoader(roidb, cfg.MODEL.NUM_CLASSES, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batchSampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler=MinibatchSampler(ratio_list, ratio_index), batch_size=args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_THREADS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_minibatch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "{'step': step, 'train_size': train_size, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_322": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_330": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/train_davis_dynamic_simple.py": {
        "torch": {
            "DataLoader_171": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoiDataLoader(merged_roidb, cfg.MODEL.NUM_CLASSES, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batchSampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler=MinibatchSampler(seq_num, seq_start_end, batch_size=batch_size), batch_size=batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_THREADS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_minibatch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_221": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "{'step': step, 'train_size': train_size, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_348": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_342": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_489": {
                "data": {
                    "value": "np.expand_dims(np.squeeze(np.array(input_data[key], dtype=np.float32)), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input_data['data'][0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/train_davis_online.py": {
        "torch": {
            "load_176": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_count_274": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "{'step': step, 'train_size': train_size, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_225": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_470": {
                "data": {
                    "value": "np.expand_dims(np.squeeze(np.array(input_data[key], dtype=np.float32)), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input_data['data'][0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/train_davis_static.py": {
        "torch": {
            "device_count_199": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_275": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoiDataLoader(roidb, cfg.MODEL.NUM_CLASSES, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batchSampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler=MinibatchSampler(ratio_list, ratio_index), batch_size=args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_THREADS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_minibatch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "{'step': step, 'train_size': train_size, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_332": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_340": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/tools/vos_test.py": {
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "inputs[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "inputs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "inputs['data_flow']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "ndarray": {
                    "value": "inputs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "inputs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/vos_model/flow_align/_ext/flow_align/__init__.py": {
        "torch": {}
    },
    "lib_vos/vos_model/flow_align/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/vos_model/flow_align/functions/flow_align.py": {
        "torch": {}
    },
    "lib_vos/vos_model/flow_align/modules/flow_align.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "conv_flow_downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_scale",
                            "variable"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_scale",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conv_flow_downsample.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "conv_flow_downsample.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(conv_flow_downsample.weight.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib_vos/vos_model/flow_align/test/testflowalign.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "conv_flow_downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_scale",
                            "variable"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_scale",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conv_flow_downsample.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "conv_flow_downsample.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(conv_flow_downsample.weight.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "tensor_in",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "readflo(inPath)",
                            "Call"
                        ],
                        [
                            "flow_in.transpose([2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(flow_in, axis=0)",
                            "Call"
                        ],
                        [
                            "readflo(inFlowPath)",
                            "Call"
                        ],
                        [
                            "flow_in.astype(np.float32)[g_h:g_h + sz, g_w:g_w + sz, :]",
                            "Subscript"
                        ],
                        [
                            "flow_in.transpose([2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(flow_in, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "tensor_in_flo",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "readflo(inPath)",
                            "Call"
                        ],
                        [
                            "flow_in.transpose([2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(flow_in, axis=0)",
                            "Call"
                        ],
                        [
                            "readflo(inFlowPath)",
                            "Call"
                        ],
                        [
                            "flow_in.astype(np.float32)[g_h:g_h + sz, g_w:g_w + sz, :]",
                            "Subscript"
                        ],
                        [
                            "flow_in.transpose([2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(flow_in, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "tensor_in_im",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "npImg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(inImgPath))",
                            "Call"
                        ],
                        [
                            "npImg[g_h:g_h + sz, g_w:g_w + sz, :]",
                            "Subscript"
                        ],
                        [
                            "np.array(Image.fromarray(npImg).resize((npImg.shape[1] // 2, npImg.shape[0] // 2), Image.ANTIALIAS), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "npImg.transpose([2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(npImg, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradcheck_105": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/vos_modeling/FAN.py": {
        "torch": {}
    },
    "lib_vos/vos_modeling/generalized_rcnn_predictor_with_boxes.py": {
        "torch": {
            "cat_275": {
                "variable": {
                    "value": "xform_shuffled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_52": {
                "input": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "sb[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_148": {
                "mode": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_294": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_298": {
                "variable": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIPoolFunction(resolution, resolution, spatial_scale)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(blobs_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "xform_shuffled[restore_bl]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, spatial_scale, sampling_ratio)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoIPoolFunction(resolution, resolution, sc)(bl_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(bl_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, sc, sampling_ratio)(bl_in, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_281": {
                "ndarray": {
                    "value": "restore_bl.astype('int64', copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "ndarray": {
                    "value": "rpn_ret[blob_rois]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_pool2d_267": {
                "variable": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIPoolFunction(resolution, resolution, spatial_scale)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(blobs_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "xform_shuffled[restore_bl]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, spatial_scale, sampling_ratio)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoIPoolFunction(resolution, resolution, sc)(bl_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(bl_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, sc, sampling_ratio)(bl_in, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "rpn_ret[bl_rois]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/vos_modeling/vos_model_builder.py": {
        "torch": {
            "ModuleList_91": {
                "variable": {
                    "value": "self.ConvGRUs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.hidden_states[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[ref_blob.shape[0], h_c, ref_blob.shape[2], ref_blob.shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "ref_blob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.Conv_Delta_Flows_Features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.FlowAligns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "data_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "im_data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "im_data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "im_data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "xform_shuffled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_52": {
                "input": {
                    "value": "va",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "sb[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0] * (cfg.MODEL.NUM_CLASSES - 1) + [0.0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_286": {
                "mode": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_324": {
                "variable": {
                    "value": "delta_flow_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_flow_lvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "delta_flow_feature - self.flow_features[i]",
                            "BinOp"
                        ],
                        [
                            "nn.functional.upsample(delta_flow_lvl, scale_factor=1.0 / self.fpn_scales[i], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "delta_flow_lvl / self.fpn_scales[i]",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1.0 / self.fpn_scales[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_512": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "nn.Conv2d(fpn_dims[i], 2, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_516": {
                "variable": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIPoolFunction(resolution, resolution, spatial_scale)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(blobs_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "xform_shuffled[restore_bl]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, spatial_scale, sampling_ratio)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoIPoolFunction(resolution, resolution, sc)(bl_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(bl_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, sc, sampling_ratio)(bl_in, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "fpn_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_343": {
                "input": {
                    "value": "blob_conv[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_481": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_499": {
                "ndarray": {
                    "value": "restore_bl.astype('int64', copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_507": {
                "ndarray": {
                    "value": "rpn_ret[blob_rois]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_pool2d_485": {
                "variable": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xform_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIPoolFunction(resolution, resolution, spatial_scale)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(blobs_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "xform_shuffled[restore_bl]",
                            "Subscript"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, spatial_scale, sampling_ratio)(blobs_in, rois)",
                            "Call"
                        ],
                        [
                            "RoIPoolFunction(resolution, resolution, sc)(bl_in, rois)",
                            "Call"
                        ],
                        [
                            "RoICropFunction()(bl_in, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xform_out, 2, 2)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(resolution, resolution, sc, sampling_ratio)(bl_in, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_473": {
                "ndarray": {
                    "value": "rpn_ret[bl_rois]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib_vos/vos_nn/convgrucell.py": {
        "torch": {
            "Conv2d_36": {
                "variable": {
                    "value": "self.Wz_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.Wz_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "i_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.Wr_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.Wr_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "i_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.Wh_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.Wh_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "i_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_46": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.bz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(h_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.br",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(h_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(h_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_53": {
                "variable": {
                    "value": "self.bz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "GN_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_54": {
                "variable": {
                    "value": "self.br",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "GN_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_55": {
                "variable": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "GN_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "h_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_92": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.sigmoid(self.Wz_h(_hidden_state) + self.Wz_x(_input) + self.bz)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.bz(self.Wz_h(_hidden_state) + self.Wz_x(_input)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.tanh(self.Wh_h(torch.mul(_hidden_state, r)) + self.Wh_x(_input) + self.bh)",
                            "Call"
                        ],
                        [
                            "self.tanh(self.bh(self.Wh_h(torch.mul(_hidden_state, r)) + self.Wh_x(_input)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_86": {
                "input": {
                    "value": "_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigmoid(self.Wr_h(_hidden_state) + self.Wr_x(_input) + self.br)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.br(self.Wr_h(_hidden_state) + self.Wr_x(_input)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_90": {
                "input": {
                    "value": "_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigmoid(self.Wr_h(_hidden_state) + self.Wr_x(_input) + self.br)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.br(self.Wr_h(_hidden_state) + self.Wr_x(_input)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib_vos/vos_roi_data/vos_loader.py": {
        "torch": {}
    },
    "llib/initialization.py": {
        "torch": {}
    },
    "tools/infer_simple.py": {
        "torch": {
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_net.py": {
        "torch": {
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "device_count_170": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoiDataLoader(roidb, cfg.MODEL.NUM_CLASSES, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MinibatchSampler(ratio_list, ratio_index)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_THREADS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_minibatch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_246": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': cfg.SOLVER.BASE_LR, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': cfg.SOLVER.BASE_LR * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_254": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_248": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': cfg.SOLVER.BASE_LR, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': cfg.SOLVER.BASE_LR * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net_step.py": {
        "torch": {
            "device_count_171": {
                "variable": {
                    "value": "cfg.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_247": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoiDataLoader(roidb, cfg.MODEL.NUM_CLASSES, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batchSampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchSampler(sampler=MinibatchSampler(ratio_list, ratio_index), batch_size=args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_THREADS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_minibatch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "{'step': step, 'train_size': train_size, 'batch_size': args.batch_size, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_step{}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_304": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_312": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load_ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_306": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': nonbias_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}, {'params': bias_params, 'lr': 0 * (cfg.SOLVER.BIAS_DOUBLE_LR + 1), 'weight_decay': cfg.SOLVER.WEIGHT_DECAY if cfg.SOLVER.BIAS_WEIGHT_DECAY else 0}, {'params': gn_params, 'lr': 0, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY_GN}]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}