{
    "global_local_classifier_tf.py": {
        "tensorflow": {
            "TensorArray_39": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(T, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(T, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.shape(mask)[1]",
                            "Subscript"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "function_11": {
                "input_signature": {
                    "value": "[tf.TensorSpec(shape=(None, 2), dtype=tf.int64), tf.TensorSpec(shape=(), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(T, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(T, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.shape(mask)[1]",
                            "Subscript"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_58": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_73": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda i, *args: tf.less(i, tf.shape(indices)[0])",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, prev, j, idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_83": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scatter_nd_93": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(dense_indices, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.reshape(dense_indices, (-1, 1)), indices, shape=(B * T, 2))",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B * T, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_97": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.reshape(dense_indices, (-1, 1)), indices, shape=(B * T, 2))",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(tensor, indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, T, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "dense_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(mask, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_101": {
                "variable": {
                    "value": "dense_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "dense_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(dense)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_68": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(val, p)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.add(j, 1)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "false",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.cast(0, tf.int64)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "build_tensor_info_279": {
                "variable": {
                    "value": "predict_tensors[model.lengths_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.lengths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "build_tensor_info_286": {
                "variable": {
                    "value": "predict_tensors[model.mask_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.sess.graph.get_tensor_by_name(f'{model.mask_name}:0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_60": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(tf.shape(indices)[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(0, tf.int32)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "dense_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_idx_graph(indices, T)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_103": {
                "x": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(selected, (B, T, -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.cast(dense_mask, dense.dtype), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_129": {
                "values": {
                    "value": "[global_view, local_view]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.reshape(dense_indices, (-1, 1)), indices, shape=(B * T, 2))",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorSpec_11": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_65": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(0, tf.int64)",
                            "Call"
                        ],
                        [
                            "j + 1",
                            "BinOp"
                        ],
                        [
                            "tf.cast(0, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(0, tf.int64)",
                            "Call"
                        ],
                        [
                            "j",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_68": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[i, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_71": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(tf.shape(indices)[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(0, tf.int32)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(selected, (B, T, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_103": {
                "input": {
                    "value": "tf.cast(dense_mask, dense.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "executing_eagerly_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "build_tensor_info_283": {
                "variable": {
                    "value": "predict_tensors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.reshape(dense_indices, (-1, 1)), indices, shape=(B * T, 2))",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.reshape(dense_indices, (-1, 1)), indices, shape=(B * T, 2))",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_60": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(tf.reshape(dense_indices, (-1, 1)), indices, shape=(B * T, 2))",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_103": {
                "x": {
                    "value": "dense_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(dense_lengths, tf.shape(dense)[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dense.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi-input-version/multi_input_pyt.py": {
        "torch": {
            "unsqueeze_115": {
                "variable": {
                    "value": "data[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[global_view, local_view]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}