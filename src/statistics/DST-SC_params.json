{
    "model/DecoderRNN.py": {
        "torch": {
            "GRU_15": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "model/Embedding.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.encoder",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.word2index)",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args.embedding_size",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "self.encoder.weight.data[index]",
                    "possible_values": []
                }
            }
        }
    },
    "model/EncoderRNN.py": {
        "torch": {
            "GRU_11": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_20": {
                "variable": {
                    "value": "x_embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "lengths": {
                    "value": "x_length",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_22": {
                "variable": {
                    "value": "(output, _)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "possible_values": [
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "model/model.py": {
        "torch": {
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.dropout",
                    "possible_values": []
                }
            },
            "Embedding_48": {
                "variable": {
                    "value": "self.domain_slot_embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.domain_slot_w2i)",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args.embedding_size",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.slot_gate",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_gates",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.attn_w_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.hidden_size",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.attn_e_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.vocab_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.vocab)",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.gen_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size * 2 + self.args.embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.rel_attn_w_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size + self.args.embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.hidden_size",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.rel_attn_e_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.copy_rel_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "all_domain_slot_emb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_domain_slot_emb",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_domain_slot_emb, 0).squeeze(1).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "self.get_domain_slot_embedding()",
                            "Call"
                        ],
                        [
                            "self.get_domain_slot_embedding()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "all_domain_slot_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "sorted_padded_x",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "padded_y",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "all_decoder_output",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.domain_slots)",
                    "possible_values": []
                },
                "out": {
                    "value": "all_turns_num",
                    "possible_values": [
                        [
                            "pad_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_decode_length",
                    "possible_values": [
                        [
                            "pad_y.size(2)",
                            "Call"
                        ],
                        [
                            "self.args.max_decode_length",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "len(self.vocab)",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "all_gate_output",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.domain_slots)",
                    "possible_values": []
                },
                "out": {
                    "value": "all_turns_num",
                    "possible_values": [
                        [
                            "pad_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_gates",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "all_gate_output",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.domain_slots)",
                    "possible_values": []
                },
                "out": {
                    "value": "all_turns_num",
                    "possible_values": [
                        [
                            "pad_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_gates",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "all_decoded_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.domain_slots)",
                    "possible_values": []
                },
                "out": {
                    "value": "all_turns_num",
                    "possible_values": [
                        [
                            "pad_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_decode_length",
                    "possible_values": [
                        [
                            "pad_y.size(2)",
                            "Call"
                        ],
                        [
                            "self.args.max_decode_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_166": {
                "variable": {
                    "value": "mask_rel_last_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.domain_slots)",
                    "possible_values": []
                },
                "out": {
                    "value": "all_turns_num",
                    "possible_values": [
                        [
                            "pad_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "self.attn_e_linear(torch.tanh(self.attn_w_linear(torch.cat((encoder_all_h, decoder_output.unsqueeze(1).expand_as(encoder_all_h)), dim=-1))))",
                            "Call"
                        ],
                        [
                            "scores.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_e_linear(torch.tanh(self.attn_w_linear(torch.cat((turn_encoder_all_h, decoder_output.unsqueeze(1).expand_as(turn_encoder_all_h)), dim=-1))))",
                            "Call"
                        ],
                        [
                            "scores.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "gen_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_linear(torch.cat((decoder_output, context), dim=-1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_190": {
                "variable": {
                    "value": "gen_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gen_linear(torch.cat((decoder_output, context, decoder_input.squeeze(1)), -1))",
                    "possible_values": []
                }
            },
            "argmax_214": {
                "variable": {
                    "value": "top_idx",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "possible_values": [
                        [
                            "(1 - copy_rel_prob) * gen_prob * gen_dist",
                            "BinOp"
                        ],
                        [
                            "(1 - copy_rel_prob) * gen_prob * gen_dist",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_263": {
                "variable": {
                    "value": "mask_rel_last_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.domain_slots)",
                    "possible_values": []
                },
                "out": {
                    "value": "all_turns_num",
                    "possible_values": [
                        [
                            "pad_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_201": {
                "variable": {
                    "value": "copy_rel_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.copy_rel_linear(context)",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "self.attn_e_linear(torch.tanh(self.attn_w_linear(torch.cat((encoder_all_h, decoder_output.unsqueeze(1).expand_as(encoder_all_h)), dim=-1))))",
                            "Call"
                        ],
                        [
                            "scores.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_e_linear(torch.tanh(self.attn_w_linear(torch.cat((turn_encoder_all_h, decoder_output.unsqueeze(1).expand_as(turn_encoder_all_h)), dim=-1))))",
                            "Call"
                        ],
                        [
                            "scores.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "variable": {
                    "value": "gen_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_linear(torch.cat((decoder_output, context), dim=-1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_287": {
                "variable": {
                    "value": "gen_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gen_linear(torch.cat((decoder_output, context, decoder_input.squeeze(1)), -1))",
                    "possible_values": []
                }
            },
            "argmax_317": {
                "variable": {
                    "value": "top_idx",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "possible_values": [
                        [
                            "(1 - copy_rel_prob) * gen_prob * gen_dist",
                            "BinOp"
                        ],
                        [
                            "(1 - copy_rel_prob) * gen_prob * gen_dist",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_176": {
                "input": {
                    "value": "self.attn_w_linear(torch.cat((encoder_all_h, decoder_output.unsqueeze(1).expand_as(encoder_all_h)), dim=-1))",
                    "possible_values": []
                }
            },
            "sigmoid_298": {
                "variable": {
                    "value": "copy_rel_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.copy_rel_linear(context)",
                    "possible_values": []
                }
            },
            "argmax_303": {
                "variable": {
                    "value": "gate",
                    "possible_values": []
                },
                "input": {
                    "value": "gate_output.squeeze(0)",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "(decoder_output, context)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "(decoder_output, context, decoder_input.squeeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tanh_194": {
                "input": {
                    "value": "self.rel_attn_w_linear(torch.cat((all_domain_slot_emb.unsqueeze(0).repeat(all_turns_num, 1, 1), decoder_output.unsqueeze(1).repeat(1, len(self.domain_slots), 1)), dim=-1))",
                    "possible_values": []
                }
            },
            "tanh_273": {
                "input": {
                    "value": "self.attn_w_linear(torch.cat((turn_encoder_all_h, decoder_output.unsqueeze(1).expand_as(turn_encoder_all_h)), dim=-1))",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(encoder_all_h, decoder_output.unsqueeze(1).expand_as(encoder_all_h))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "(decoder_output, context)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_287": {
                "tensors": {
                    "value": "(decoder_output, context, decoder_input.squeeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tanh_291": {
                "input": {
                    "value": "self.rel_attn_w_linear(torch.cat((all_domain_slot_emb.unsqueeze(0), decoder_output.unsqueeze(1).repeat(1, len(self.domain_slots), 1)), dim=-1))",
                    "possible_values": []
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "(all_domain_slot_emb.unsqueeze(0).repeat(all_turns_num, 1, 1), decoder_output.unsqueeze(1).repeat(1, len(self.domain_slots), 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "(turn_encoder_all_h, decoder_output.unsqueeze(1).expand_as(turn_encoder_all_h))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "(all_domain_slot_emb.unsqueeze(0), decoder_output.unsqueeze(1).repeat(1, len(self.domain_slots), 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_85": {
                "variable": {
                    "value": "self.args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.mdl.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_104": {
                "variable": {
                    "value": "self.scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_106": {
                "variable": {
                    "value": "self.cross_entropy",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "self.is_early_stop",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "WOZDataSet(file_name, self.args, is_training, data_type, shuffle)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_wrapper",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "self.args.seed",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "self.best_parameter",
                    "possible_values": []
                },
                "f": {
                    "value": "dir_name + '/params.pkl'",
                    "possible_values": []
                }
            },
            "broadcast_297": {
                "tensor": {
                    "value": "self.joint_accuracy",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "broadcast_298": {
                "tensor": {
                    "value": "self.is_early_stop",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "load_317": {
                "f": {
                    "value": "param",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "set_device_81": {
                "device": {
                    "value": "self.args.gpus[rank]",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "self.args.seed",
                    "possible_values": []
                }
            },
            "clip_grad_norm__270": {
                "parameters": {
                    "value": "self.mdl.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10.0",
                    "possible_values": []
                }
            },
            "current_device_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "util/Dataset.py": {
        "torch": {}
    },
    "util/util.py": {
        "torch": {
            "clamp_29": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[one[0] for one in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-15.0",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "possible_values": []
                }
            },
            "exp_30": {
                "variable": {
                    "value": "e_x",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x, dim=axis, keepdim=True)[0]",
                    "possible_values": []
                }
            },
            "log_161": {
                "variable": {
                    "value": "flat_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_logits + 1e-10",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "mask_",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_)",
                            "Call"
                        ],
                        [
                            "mask_.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "query.unsqueeze(1).expand_as(seq).mul(seq).sum(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_174": {
                "variable": {
                    "value": "seq_range",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "loss.size(2)",
                            "Call"
                        ],
                        [
                            "max(lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_163": {
                "input": {
                    "value": "flat_logits",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "torch.log(flat_logits + 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "flat_targets",
                    "possible_values": [
                        [
                            "targets.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_33": {
                "input": {
                    "value": "e_x",
                    "possible_values": [
                        [
                            "torch.exp(x - torch.max(x, dim=axis, keepdim=True)[0])",
                            "Call"
                        ],
                        [
                            "e_x * m",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_30": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[one[0] for one in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    }
}