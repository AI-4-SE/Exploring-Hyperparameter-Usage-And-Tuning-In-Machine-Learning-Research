{
    "AEutils.py": {
        "sklearn": {
            "normalize_72": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "U[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "U.dot(S)",
                            "Call"
                        ],
                        [
                            "normalize(U, norm='l2', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SpectralClustering_78": {
                "variable": {
                    "value": "spectral",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "eigen_solver": {
                    "value": "arpack",
                    "type": "str",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "assign_labels": {
                    "value": "discretize",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_87": {
                "variable": {
                    "value": "NMI",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "gt_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "c_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "best_map(gt_s, s)",
                            "Call"
                        ]
                    ]
                }
            },
            "TSNE_142": {
                "variable": {
                    "value": "Z_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_185": {
                "variable": {
                    "value": "Z_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_213": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neigh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_233": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "np.unique(Label).shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MinMaxScaler_246": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "[0, 255]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TSNE_161": {
                "variable": {
                    "value": "Z_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "reduce_sum_255": {
                "variable": {
                    "value": "dot1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(x1, x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_256": {
                "variable": {
                    "value": "dot2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(x1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_257": {
                "variable": {
                    "value": "dot3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(x2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_255": {
                "x": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_256": {
                "input_tensor": {
                    "value": "tf.square(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "input_tensor": {
                    "value": "tf.square(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_287": {
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_288": {
                "x": {
                    "value": "tf.maximum(1 - d, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_289": {
                "input_tensor": {
                    "value": "tmp + tmp2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_256": {
                "x": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_257": {
                "x": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_288": {
                "x": {
                    "value": "1 - d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DSC-Net-L2-MNIST-fullfc.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input[0] * n_input[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 10, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 10, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_51": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 10, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "dense_91": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, z)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_92": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_93": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "d4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_96": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_97": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_98": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_99": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "d4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "variable": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "self.reconst_cost_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r2, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x_flattten2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_123": {
                "variable": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "a": {
                    "value": "tf.transpose(x_flattten)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(D, C)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_141": {
                "a": {
                    "value": "tf.transpose(x_flattten)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(D, C)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "tf.transpose(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(D, C)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_147": {
                "variable": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_156": {
                "variable": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(pslb, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_160": {
                "variable": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_max(pslb, axis=1) > 0.8",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "onesl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(batch_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerosl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_161": {
                "variable": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_164": {
                "variable": {
                    "value": "self.labelloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cluster_assignment, ds)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reduce_max(pslb, axis=1) > 0.8, onesl, zerosl)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_179": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_180": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_183": {
                "variable": {
                    "value": "self.optimizer_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_186": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.trainable_variables() if not v.name.startswith('Coef')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FileWriter_190": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./logs'",
                            "Constant"
                        ],
                        [
                            "'./logs'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1e-05 * tf.ones([self.batch_size, self.batch_size], dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_199": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_202": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_233": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_237": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_245": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_247": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_58": {
                "variable": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ss_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "variable": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_60": {
                "variable": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(cluster_assignment, tf.transpose(cluster_assignment))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_104": {
                "name": {
                    "value": "recons_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_111": {
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_constant1 * self.reg_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_115": {
                "name": {
                    "value": "selfexpress_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "re_constant2 * self.selfexpress_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_132": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1.0 / tf.reduce_sum(C, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_133": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "D.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_137": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.reduce_sum(C, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_207": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_214": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_221": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_228": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_253": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_256": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_274": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_277": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_102": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_103": {
                "x": {
                    "value": "tf.subtract(self.x_r2, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(z_c, z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(XZ, x_flattten))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_125": {
                "num_rows": {
                    "value": "Coef.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "tf.square(XX)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "input_tensor": {
                    "value": "tf.square(regass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_245": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_60": {
                "x": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(cluster_assignment)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_102": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_103": {
                "x": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_107": {
                "*args": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_109": {
                "*args": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_113": {
                "x": {
                    "value": "tf.subtract(z_c, z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_120": {
                "x": {
                    "value": "tf.subtract(XZ, x_flattten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "a": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(Coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(1.0 / tf.reduce_sum(C, axis=1))",
                            "Call"
                        ],
                        [
                            "I",
                            "Name"
                        ],
                        [
                            "tf.diag(tf.reduce_sum(C, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "a": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_141": {
                "a": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_142": {
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "square_145": {
                "x": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_flattten - x_flattten2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_145": {
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_160": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_166": {
                "x": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reduce_sum(pslb, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_197": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_254": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_274": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_60": {
                "a": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_107": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_109": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_113": {
                "x": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, z)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "subtract_120": {
                "x": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, x_flattten)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_166": {
                "features": {
                    "value": "eq * (0.001 - C)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_274": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_275": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DSC-Net-L2-USPS-fullfc.py": {
        "sklearn": {
            "fetch_openml_415": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "USPS",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input[0] * n_input[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_47": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 10, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 10, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 10, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "dense_93": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, z)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_96": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "d4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_98": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_99": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_100": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_101": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "d4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "self.reconst_cost_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r2, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x_flattten2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_125": {
                "variable": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "tf.transpose(x_flattten)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(D, C)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "a": {
                    "value": "tf.transpose(x_flattten)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(D, C)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "a": {
                    "value": "tf.transpose(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(D, C)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_148": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_149": {
                "variable": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_160": {
                "variable": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(pslb, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_164": {
                "variable": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_max(pslb, axis=1) > 0.8",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "onesl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(batch_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerosl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_165": {
                "variable": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_168": {
                "variable": {
                    "value": "self.labelloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cluster_assignment, ds)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reduce_max(pslb, axis=1) > 0.8, onesl, zerosl)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_175": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_176": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_179": {
                "variable": {
                    "value": "self.optimizer_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_181": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_182": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_184": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.trainable_variables() if not v.name.startswith('Coef')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FileWriter_186": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./logs'",
                            "Constant"
                        ],
                        [
                            "'./logs'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_191": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1e-05 * tf.ones([self.batch_size, self.batch_size], dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_195": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_241": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_76": {
                "variable": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ss_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_77": {
                "variable": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_78": {
                "variable": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(cluster_assignment, tf.transpose(cluster_assignment))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "recons_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_113": {
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_constant1 * self.reg_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_117": {
                "name": {
                    "value": "selfexpress_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "re_constant2 * self.selfexpress_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_134": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1.0 / tf.reduce_sum(C, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_135": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "D.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_139": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.reduce_sum(C, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_203": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_210": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_217": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_224": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_249": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_252": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_270": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_273": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_104": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_105": {
                "x": {
                    "value": "tf.subtract(self.x_r2, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(z_c, z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(XZ, x_flattten))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_127": {
                "num_rows": {
                    "value": "Coef.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "tf.square(XX)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "tf.square(regass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_241": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_78": {
                "x": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(cluster_assignment)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_104": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_105": {
                "x": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_109": {
                "*args": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_111": {
                "*args": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "tf.subtract(z_c, z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_122": {
                "x": {
                    "value": "tf.subtract(XZ, x_flattten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(Coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_136": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(1.0 / tf.reduce_sum(C, axis=1))",
                            "Call"
                        ],
                        [
                            "I",
                            "Name"
                        ],
                        [
                            "tf.diag(tf.reduce_sum(C, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "a": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_143": {
                "a": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_144": {
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "square_147": {
                "x": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_flattten - x_flattten2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_147": {
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_164": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_170": {
                "x": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reduce_sum(pslb, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_193": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_250": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_270": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_78": {
                "a": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_109": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_111": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_115": {
                "x": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, z)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "subtract_122": {
                "x": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, x_flattten)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_170": {
                "features": {
                    "value": "eq * (0.001 - C)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_270": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_271": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DSC-Net-L2-rcv-fullfc.py": {
        "sklearn": {
            "fetch_rcv1_419": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input[0] * n_input[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_47": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 4, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 4, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x_input, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 2000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(latent, 4, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "dense_86": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, z)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_88": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_89": {
                "variable": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "d4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_91": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_92": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_93": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "d4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "self.reconst_cost_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r2, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "x_flattten2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_118": {
                "variable": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_122": {
                "variable": {
                    "value": "DD",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.sqrt(1.0 / tf.reduce_sum(C, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "DD",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(tf.sqrt(1.0 / tf.reduce_sum(C, axis=1)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "DD",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(tf.sqrt(1.0 / tf.reduce_sum(C, axis=1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_138": {
                "a": {
                    "value": "tf.transpose(x_flattten)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(tf.matmul(D, C), D)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_141": {
                "a": {
                    "value": "tf.transpose(XX)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(tf.sqrt(1.0 / tf.reduce_sum(C, axis=1)))",
                            "Call"
                        ],
                        [
                            "I",
                            "Name"
                        ],
                        [
                            "tf.diag(tf.reduce_sum(C, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_142": {
                "variable": {
                    "value": "self.tracelossx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "XXDXX + 2.0 * XLX2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_144": {
                "variable": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_153": {
                "variable": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(pslb, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_157": {
                "variable": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_max(pslb, axis=1) > 0.8",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "onesl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(batch_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerosl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_158": {
                "variable": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_161": {
                "variable": {
                    "value": "self.labelloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cluster_assignment, ds)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reduce_max(pslb, axis=1) > 0.8, onesl, zerosl)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_170": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_174": {
                "variable": {
                    "value": "self.optimizer_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_176": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_177": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_179": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.trainable_variables() if not v.name.startswith('Coef')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FileWriter_181": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./logs'",
                            "Constant"
                        ],
                        [
                            "'./logs'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_186": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1e-05 * tf.ones([self.batch_size, self.batch_size], dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_190": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_193": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_224": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_228": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_236": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_238": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_77": {
                "variable": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ss_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_78": {
                "variable": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_79": {
                "variable": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(cluster_assignment, tf.transpose(cluster_assignment))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_99": {
                "name": {
                    "value": "recons_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_constant1 * self.reg_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_110": {
                "name": {
                    "value": "selfexpress_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "re_constant2 * self.selfexpress_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_129": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.sqrt(1.0 / tf.reduce_sum(C, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_130": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "D.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_134": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.reduce_sum(C, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_205": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_212": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_219": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_244": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_247": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_265": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_268": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_97": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "tf.subtract(self.x_r2, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(z_c, z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(XZ, x_flattten))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_121": {
                "num_rows": {
                    "value": "Coef.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_122": {
                "x": {
                    "value": "1.0 / tf.reduce_sum(C, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "tf.square(regass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_236": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_79": {
                "x": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(cluster_assignment)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_97": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_98": {
                "x": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_102": {
                "*args": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_104": {
                "*args": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_108": {
                "x": {
                    "value": "tf.subtract(z_c, z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "tf.subtract(XZ, x_flattten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "a": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(Coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_129": {
                "x": {
                    "value": "1.0 / tf.reduce_sum(C, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(tf.sqrt(1.0 / tf.reduce_sum(C, axis=1)))",
                            "Call"
                        ],
                        [
                            "I",
                            "Name"
                        ],
                        [
                            "tf.diag(tf.reduce_sum(C, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "a": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_141": {
                "a": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_flattten - x_flattten2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_157": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_163": {
                "x": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reduce_sum(pslb, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_188": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_245": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_265": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_79": {
                "a": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_102": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_104": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_108": {
                "x": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, z)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "latent",
                            "Name"
                        ]
                    ]
                }
            },
            "subtract_115": {
                "x": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, x_flattten)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_163": {
                "features": {
                    "value": "eq * (0.001 - C)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_265": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(DD, C)",
                            "Call"
                        ],
                        [
                            "tf.matmul(C, DD)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_266": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AEnet_13.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input[0], n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[t_bs, hid_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "z_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "ze",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "latent_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z_ce",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(latent)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "self.reconst_cost_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(self.x_r2, self.x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "tf.add(self.x, tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[t_bs, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "x_flattten2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[t_bs, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [t_bs, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_82": {
                "variable": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights['Coef']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "a": {
                    "value": "tf.transpose(x_flattten)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "I - tf.matmul(tf.matmul(D, C), D)",
                            "BinOp"
                        ],
                        [
                            "D - C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_111": {
                "variable": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_112": {
                "variable": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(pslb, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_117": {
                "variable": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_max(pslb, axis=1) > 0.8",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "onesl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(batch_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zerosl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_118": {
                "variable": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_120": {
                "variable": {
                    "value": "self.labelloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "cluster_assignment1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cluster_assignment, ds)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weight_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reduce_max(pslb, axis=1) > 0.8, onesl, zerosl)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_132": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_133": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "self.optimizer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_138": {
                "variable": {
                    "value": "self.optimizer_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_140": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_141": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_143": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.trainable_variables() if not (v.name.startswith('Coef') or v.name.startswith('ss'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "FileWriter_145": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./logs'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1e-05 * tf.ones([self.batch_size, self.batch_size], dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_192": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_200": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_29": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(latent, [t_bs, hid_dim])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ss_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_43": {
                "variable": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(cluster_assignment, tf.transpose(cluster_assignment))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "recons_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconst_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_69": {
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_constant1 * self.reg_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_73": {
                "name": {
                    "value": "selfexpress_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "re_constant2 * self.selfexpress_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_94": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.sqrt(1.0 / tf.reduce_sum(C, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_95": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "D.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_99": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.reduce_sum(C, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_169": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_176": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_183": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_208": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_211": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_229": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_232": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_22": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_61": {
                "x": {
                    "value": "tf.subtract(self.x_r2, self.x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(z_ce, ze))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(XZ, x_flattten))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_85": {
                "num_rows": {
                    "value": "Coef.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_87": {
                "num_rows": {
                    "value": "Coef.shape[0].value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "tf.square(XX)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "tf.square(regass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_200": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_43": {
                "x": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(cluster_assignment)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_60": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_61": {
                "x": {
                    "value": "self.x_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_65": {
                "*args": {
                    "value": "tf.square(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_67": {
                "*args": {
                    "value": "tf.abs(self.Coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_71": {
                "x": {
                    "value": "tf.subtract(z_ce, ze)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_78": {
                "x": {
                    "value": "tf.subtract(XZ, x_flattten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_83": {
                "a": {
                    "value": "absC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(Coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_94": {
                "x": {
                    "value": "1.0 / tf.reduce_sum(C, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag(tf.sqrt(1.0 / tf.reduce_sum(C, axis=1)))",
                            "Call"
                        ],
                        [
                            "I",
                            "Name"
                        ],
                        [
                            "tf.diag(tf.reduce_sum(C, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "a": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [t_bs, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_107": {
                "x": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_flattten - x_flattten2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_107": {
                "*args": {
                    "value": "XLX2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.transpose(x_flattten), L), x_flattten2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_117": {
                "input_tensor": {
                    "value": "pslb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ds, kernel_initializer=tf.random_normal_initializer(), activation=tf.nn.softmax, name='ss_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_123": {
                "x": {
                    "value": "regass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reduce_sum(pslb, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_152": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_209": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_229": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_43": {
                "a": {
                    "value": "cluster_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pslb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_65": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_67": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_71": {
                "x": {
                    "value": "z_ce",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, ze)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ze",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ]
                    ]
                }
            },
            "subtract_78": {
                "x": {
                    "value": "XZ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Coef, x_flattten)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_flattten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [t_bs, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_123": {
                "features": {
                    "value": "eq * (0.001 - C)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_229": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_29": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(absC + tf.transpose(absC)) * 0.5",
                            "BinOp"
                        ],
                        [
                            "C + tf.eye(Coef.shape[0].value)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_230": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DSC-Net-L2-COIL40.py": {
        "tensorflow": {
            "reset_default_graph_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DSC-Net-L2-MNIST.py": {
        "tensorflow": {}
    },
    "DSC-Net-L2-ORL.py": {
        "tensorflow": {
            "reset_default_graph_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DSC-Net-L2-UMIST.py": {
        "tensorflow": {
            "reset_default_graph_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pre-Train-Conv-AE-COIL20.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input[0], self.n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_64": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_70": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_75": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_76": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_78": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models_face'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "all_weights[dec_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "all_weights[dec_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_99": {
                "variable": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer1)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(z, weights['dec_w0'], tf.stack([tf.shape(self.x)[0], shape_de1[1], shape_de1[2], shape_de1[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_108": {
                "variable": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(z, weights['dec_w0'], tf.stack([tf.shape(self.x)[0], shape_de1[1], shape_de1[2], shape_de1[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer1)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(z, weights['dec_w0'], tf.stack([tf.shape(self.x)[0], shape_de1[1], shape_de1[2], shape_de1[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_56": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.x_r, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_99": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_108": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['dec_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de1[1], shape_de1[2], shape_de1[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_67": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_108": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de1[1], shape_de1[2], shape_de1[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_67": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_109": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pre-Train-Conv-AE-COIL40.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input[0], self.n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_64": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_70": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_75": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_76": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_78": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models_face'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_129": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_56": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_106": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_137": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_155": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.x_r, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_129": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_67": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_100": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_155": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_67": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_155": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pre-Train-Conv-AE-MNIST.py": {
        "tensorflow": {
            "placeholder_50": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input[0], self.n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_65": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_71": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_75": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_76": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_77": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_79": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models_face'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0 * tf.ones([self.batch_size, self.batch_size], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_120": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_57": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_69": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_127": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_146": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.x_r, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_68": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_84": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_127": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_146": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_68": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_146": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pre-Train-Conv-AE-ORL.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input[0], self.n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_64": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_70": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_75": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_76": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_78": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models_face'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0 * tf.ones([self.batch_size, self.batch_size], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_119": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_56": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_126": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_145": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.x_r, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_67": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_83": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_126": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_67": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_145": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pre-Train-Conv-AE-UMIST.py": {
        "tensorflow": {
            "placeholder_46": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input[0], self.n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_61": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_67": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_71": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_72": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_73": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_75": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models_face'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "all_weights[Coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0 * tf.ones([self.batch_size, self.batch_size], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_116": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_53": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_65": {
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_123": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_142": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.x_r, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_64": {
                "x": {
                    "value": "tf.subtract(self.x_r, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "input": {
                    "value": "layeri",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_142": {
                "input": {
                    "value": "layer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layeri",
                            "Name"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_64": {
                "x": {
                    "value": "self.x_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_142": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}