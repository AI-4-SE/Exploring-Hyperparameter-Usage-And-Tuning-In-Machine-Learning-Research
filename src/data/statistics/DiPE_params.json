{
    "datasets/mono_dataset.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "inputs[K, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K0.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "inputs[inv_K, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inv_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.pinv(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "inputs[depth_gt, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['depth_gt', 0].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "inputs[object_mask, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs['object_mask', 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "inputs[stereo_T]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stereo_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(4, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "inputs[pose_gt, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose_gt.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_cityscapes.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if opt.no_cuda else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "encoder_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "depth_encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'encoder.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CityScapesDataset(opt.data_path, filenames, encoder_dict['height'], encoder_dict['width'], [0], 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "depth_decoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'depth.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_color, torch.flip(input_color, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_92": {
                "input": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['color', 0, 0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_color, torch.flip(input_color, [3])), 0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_kitti.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if opt.no_cuda else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_287": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if opt.no_cuda else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_307": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets_dict[opt.eval_split](opt.data_path, filenames, encoder_dict['height'], encoder_dict['width'], [0], 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ],
                        [
                            "datasets_dict[opt.eval_split](opt.data_path, filenames, opt.height, opt.width, opt.frame_ids, 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "encoder_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "depth_encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'encoder.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets_dict[opt.eval_split](opt.data_path, filenames, encoder_dict['height'], encoder_dict['width'], [0], 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ],
                        [
                            "datasets_dict[opt.eval_split](opt.data_path, filenames, opt.height, opt.width, opt.frame_ids, 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "val_sel_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_sel_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets_dict[opt.eval_split](opt.data_path, val_sel_filenames, encoder_dict['height'], encoder_dict['width'], [0], 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_314": {
                "f": {
                    "value": "pose_encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'pose_encoder.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_317": {
                "f": {
                    "value": "pose_decoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'pose.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "all_color_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['color_aug', i, 0] for i in opt.frame_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "depth_decoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'depth.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "all_color_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_color_aug, torch.flip(all_color_aug, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_color, torch.flip(input_color, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_color, torch.flip(input_color, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_338": {
                "input": {
                    "value": "all_color_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([inputs['color_aug', i, 0] for i in opt.frame_ids], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_color_aug, torch.flip(all_color_aug, [3])), 0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_104": {
                "input": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['color', 0, 0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_color, torch.flip(input_color, [3])), 0)",
                            "Call"
                        ],
                        [
                            "data['color', 0, 0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_color, torch.flip(input_color, [3])), 0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_136": {
                "input": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['color', 0, 0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_color, torch.flip(input_color, [3])), 0)",
                            "Call"
                        ],
                        [
                            "data['color', 0, 0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_color, torch.flip(input_color, [3])), 0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_kitti_eigen_moving_objects.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if opt.no_cuda else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "encoder_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "depth_encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'encoder.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets_dict[opt.eval_split](opt.data_path, filenames, encoder_dict['height'], encoder_dict['width'], [0], 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "depth_decoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.load_weights_folder, 'depth.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_color, torch.flip(input_color, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_92": {
                "input": {
                    "value": "input_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['color', 0, 0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_color, torch.flip(input_color, [3])), 0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "inversed_poses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "poses.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "poses.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "translation_vector.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_83": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_86": {
                "variable": {
                    "value": "ca",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_87": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vec.shape[0], 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "rot[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * xC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "rot[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC - zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "rot[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC + ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_109": {
                "variable": {
                    "value": "rot[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC + zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "variable": {
                    "value": "rot[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y * yC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "rot[:, 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC - xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "rot[:, 2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC - ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "rot[:, 2, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC + xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "variable": {
                    "value": "rot[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "z * zC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_221": {
                "variable": {
                    "value": "grad_disp_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :, :-1] - disp[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_222": {
                "variable": {
                    "value": "grad_disp_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :-1, :] - disp[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_224": {
                "variable": {
                    "value": "grad_img_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :, :-1] - img[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_225": {
                "variable": {
                    "value": "grad_img_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :-1, :] - img[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_236": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_3D_dynamic_flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_236": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_237": {
                "variable": {
                    "value": "grad__3D_dynamic_flow_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_3D_dynamic_flow[:, :, :, :-1] - _3D_dynamic_flow[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_238": {
                "variable": {
                    "value": "grad__3D_dynamic_flow_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_3D_dynamic_flow[:, :, :-1, :] - _3D_dynamic_flow[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_246": {
                "variable": {
                    "value": "max_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reproj_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_288": {
                "variable": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt / pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_294": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmse.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_297": {
                "variable": {
                    "value": "rmse_log",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmse_log.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_299": {
                "variable": {
                    "value": "abs_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(gt - pred) / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_301": {
                "variable": {
                    "value": "sq_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt - pred) ** 2 / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_307": {
                "variable": {
                    "value": "cam_to_world",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_319": {
                "variable": {
                    "value": "local_xyzs_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dump_xyz(gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_320": {
                "variable": {
                    "value": "local_xyzs_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dump_xyz(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_329": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum(alignment_error ** 2, dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ELU_129": {
                "variable": {
                    "value": "self.nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.ones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.batch_size, 1, self.height * self.width)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([self.id_coords[0].view(-1), self.id_coords[1].view(-1)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([self.pix_coords, self.ones], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "cam_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "cam_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cam_points, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "variable": {
                    "value": "cam_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, T)[:, :3, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis[..., 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.refl(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_227": {
                "input": {
                    "value": "-grad_img_x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_228": {
                "input": {
                    "value": "-grad_img_y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_257": {
                "variable": {
                    "value": "self.mu_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_258": {
                "variable": {
                    "value": "self.mu_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_259": {
                "variable": {
                    "value": "self.sig_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_260": {
                "variable": {
                    "value": "self.sig_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_261": {
                "variable": {
                    "value": "self.sig_xy_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_263": {
                "variable": {
                    "value": "self.refl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "cam_to_world",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_to_target_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_to_target_transformations",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "cam_to_world",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(4).repeat(source_to_target_transformations[0].shape[0], 1, 1).to(source_to_target_transformations[0].device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(source_to_target_transformation, cam_to_world)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_58": {
                "input": {
                    "value": "poses[..., 0:3, 0:3].transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "poses[..., 0:3, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_144": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_146": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_224": {
                "input": {
                    "value": "img[:, :, :, :-1] - img[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_225": {
                "input": {
                    "value": "img[:, :, :-1, :] - img[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_249": {
                "input": {
                    "value": "anisotropic_difference * occlusion_mask_from_boundary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_282": {
                "input": {
                    "value": "(1 - SSIM_n / SSIM_d) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_325": {
                "input": {
                    "value": "local_xyzs_gt * local_xyzs_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_326": {
                "input": {
                    "value": "local_xyzs_pred ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_329": {
                "input": {
                    "value": "torch.sum(alignment_error ** 2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height * self.width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_173": {
                "tensors": {
                    "value": "[self.id_coords[0].view(-1), self.id_coords[1].view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "[self.pix_coords, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_248": {
                "input": {
                    "value": "-diff_depth",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_296": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_299": {
                "input": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_329": {
                "input": {
                    "value": "alignment_error ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks/depth_decoder.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(self.convs.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_50": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_features[-1]",
                            "Subscript"
                        ],
                        [
                            "self.convs['upconv', i, 0](x)",
                            "Call"
                        ],
                        [
                            "[upsample(x)]",
                            "List"
                        ],
                        [
                            "x + [input_features[i - 1]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.convs['upconv', i, 1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/pose_decoder.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.convs[squeeze]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_ch_enc[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.convs[pose, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.convs[pose, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.convs[pose, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6 * num_poses_to_predict_for",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(self.convs.values())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet_encoder.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_images * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[loaded['conv1.weight']] * num_input_images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_54": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.opt.no_cuda else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "self.model_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters_to_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_92": {
                "variable": {
                    "value": "self.model_lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.model_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.opt.scheduler_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.opt.learning_rate_step_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset(self.opt.data_path, train_filenames, self.opt.height, self.opt.width, self.opt.frame_ids, 4, is_train=True, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset(self.opt.data_path, val_filenames, self.opt.height, self.opt.width, self.opt.frame_ids, 4, is_train=False, img_ext=img_ext)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_376": {
                "variable": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_495": {
                "variable": {
                    "value": "depth_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.interpolate(depth_pred, self.dataset.default_full_res_shape, mode='bilinear', align_corners=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "self.dataset.min_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.dataset.max_depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_503": {
                "variable": {
                    "value": "crop_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_gt > 0",
                            "Compare"
                        ],
                        [
                            "mask * crop_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_512": {
                "variable": {
                    "value": "depth_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['depth', 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(F.interpolate(depth_pred, self.dataset.default_full_res_shape, mode='bilinear', align_corners=False), self.dataset.min_depth, self.dataset.max_depth)",
                            "Call"
                        ],
                        [
                            "depth_pred.detach()",
                            "Call"
                        ],
                        [
                            "depth_pred[mask]",
                            "Subscript"
                        ],
                        [
                            "depth_pred * (torch.median(depth_gt) / torch.median(depth_pred))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(depth_pred, min=self.dataset.min_depth, max=self.dataset.max_depth)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.dataset.min_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.dataset.max_depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "pose_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['color_aug', i, 0] for i in self.opt.frame_ids if i != 's']",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_658": {
                "obj": {
                    "value": "self.model_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, '{}.pth'.format(model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, '{}.pth'.format('adam'))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_683": {
                "variable": {
                    "value": "optimizer_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.opt.load_weights_folder, 'adam.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_342": {
                "variable": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['disp', 0, scale]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(disp, [self.opt.height, self.opt.width], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "outputs['disp', 0, scale]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.opt.height, self.opt.width]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_360": {
                "variable": {
                    "value": "outputs[color, frame_id, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['color', frame_id, source_scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "outputs['sample', frame_id, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_495": {
                "input": {
                    "value": "depth_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['depth', 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(F.interpolate(depth_pred, self.dataset.default_full_res_shape, mode='bilinear', align_corners=False), self.dataset.min_depth, self.dataset.max_depth)",
                            "Call"
                        ],
                        [
                            "depth_pred.detach()",
                            "Call"
                        ],
                        [
                            "depth_pred[mask]",
                            "Subscript"
                        ],
                        [
                            "depth_pred * (torch.median(depth_gt) / torch.median(depth_pred))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(depth_pred, min=self.dataset.min_depth, max=self.dataset.max_depth)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.dataset.default_full_res_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "median_510": {
                "input": {
                    "value": "depth_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['depth', 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(F.interpolate(depth_pred, self.dataset.default_full_res_shape, mode='bilinear', align_corners=False), self.dataset.min_depth, self.dataset.max_depth)",
                            "Call"
                        ],
                        [
                            "depth_pred.detach()",
                            "Call"
                        ],
                        [
                            "depth_pred[mask]",
                            "Subscript"
                        ],
                        [
                            "depth_pred * (torch.median(depth_gt) / torch.median(depth_pred))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(depth_pred, min=self.dataset.min_depth, max=self.dataset.max_depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_655": {
                "obj": {
                    "value": "to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.__dict__.copy()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, '{}.pth'.format(model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, '{}.pth'.format('adam'))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_674": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.opt.load_weights_folder, '{}.pth'.format(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_414": {
                "variable": {
                    "value": "outputs[mask, frame_id, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs['reprojection_losses', frame_id, scale].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "outputs['reprojection_losses', frame_id, scale].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_450": {
                "variable": {
                    "value": "outputs[mean_reprojection_losses, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs['reprojection_losses', frame_id, scale] for frame_id in self.opt.frame_ids[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_450": {
                "variable": {
                    "value": "outputs[mean_reprojection_losses, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_454": {
                "variable": {
                    "value": "outputs[std_reprojection_losses, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs['reprojection_losses', frame_id, scale] for frame_id in self.opt.frame_ids[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_454": {
                "variable": {
                    "value": "outputs[std_reprojection_losses, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_547": {
                "input": {
                    "value": "inverse_poses(pose_gt[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pose_gt[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_548": {
                "input": {
                    "value": "inverse_poses(pose_pred[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pose_pred[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_538": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "pose_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([inputs['color_aug', i, 0] for i in self.opt.frame_ids if i != 's'], 1)",
                            "Call"
                        ],
                        [
                            "[inputs['color_aug', 0, 0], inputs['color_aug', frame_id, 0]]",
                            "List"
                        ],
                        [
                            "[inputs['color_aug', frame_id, 0], inputs['color_aug', 0, 0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_423": {
                "tensors": {
                    "value": "[outputs['reprojection_losses', frame_id, scale] for frame_id in self.opt.frame_ids[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_423": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}