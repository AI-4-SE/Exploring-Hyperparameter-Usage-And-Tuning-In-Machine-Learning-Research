{
    "transformers/transformers/data/metrics/__init__.py": {
        "sklearn": {
            "f1_score_42": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_63": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/examples/benchmarks.py": {
        "tensorflow": {
            "set_experimental_options_263": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "stack_382": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(tf.constant(tokenized_sequence[:slice_size])[None, :])] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_382": {
                "input": {
                    "value": "tf.constant(tokenized_sequence[:slice_size])[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_382": {
                "value": {
                    "value": "tokenized_sequence[:slice_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_sequence[:slice_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if gpu and torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_338": {
                "variable": {
                    "value": "inference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ],
                        [
                            "TFAutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_tf_glue.py": {
        "tensorflow": {
            "Adam_49": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_60": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_experimental_options_26": {
                "options": {
                    "value": "{'auto_mixed_precision': USE_AMP}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "LossScaleOptimizer_52": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MeanSquaredError_56": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/templates/adding_a_new_model/modeling_tf_xxx.py": {
        "tensorflow": {
            "cast_141": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_384": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_385": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_435": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_436": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_488": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_498": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_499": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_500": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_124": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_126": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_124": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_126": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/templates/adding_a_new_model/modeling_xxx.py": {
        "tensorflow": {
            "list_variables_67": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_72": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_394": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_462": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_534": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_535": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_619": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_314": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_416": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_556": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_652": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_487": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_490": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/templates/adding_a_new_model/tests/modeling_tf_xxx_test.py": {
        "tensorflow": {}
    },
    "transformers/transformers/convert_bert_pytorch_checkpoint_to_original_tf.py": {
        "tensorflow": {
            "as_dtype_73": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "tf_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_91": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_75": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_118": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/convert_pytorch_checkpoint_to_tf2.py": {
        "tensorflow": {
            "constant_114": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_121": {
                "variable": {
                    "value": "pt_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "pytorch_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(aws_model_maps[pytorch_checkpoint_path], force_download=not use_cached_models)",
                            "Call"
                        ],
                        [
                            "pytorch_checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/data/processors/glue.py": {
        "tensorflow": {
            "TensorShape_149": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_146": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_147": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_148": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "transformers/transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_68": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_73": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_117": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_280": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_327": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_367": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_398": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_412": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_458": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_998": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_999": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1073": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1074": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1148": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1149": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1234": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_170": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_658": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_660": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_662": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_795": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_879": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_887": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_951": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1103": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1170": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1267": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_127": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_236": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_675": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1023": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1026": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_287": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_59": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_64": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_95": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_191": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_223": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_225": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.extra_embedding_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.extra_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_361": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_362": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_363": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_364": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_365": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_546": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_651": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prefix_input, inputs_embeds]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_414": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_573": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_676": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_683": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_100": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_111": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_156": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_132": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_111": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_bert.py": {
        "tensorflow": {
            "Activation_81": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_83": {
                "activation": {
                    "value": "swish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_84": {
                "activation": {
                    "value": "gelu_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu_new",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_96": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_100": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_107": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_198": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_201": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_204": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_227": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_228": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_259": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_262": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_295": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_312": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_315": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_316": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_382": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_398": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_405": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_451": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_529": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_864": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_865": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_916": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_917": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_961": {
                "variable": {
                    "value": "reshaped_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_choices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_1001": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_1002": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1054": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_1064": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1065": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1066": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_148": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "fill_156": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.shape(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_159": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_181": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_212": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_512": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.shape(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_514": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.shape(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "erf_61": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_73": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_175": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_176": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_217": {
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.intermediate_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_229": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_948": {
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_949": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 1)",
                            "Call"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_950": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_951": {
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(seq_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_150": {
                "input": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.word_embeddings, input_ids)",
                            "Call"
                        ],
                        [
                            "inputs[5] if len(inputs) > 5 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "inputs[5] if len(inputs) > 5 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_154": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_228": {
                "input": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_942": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_943": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_945": {
                "input": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.word_embeddings, input_ids)",
                            "Call"
                        ],
                        [
                            "inputs[5] if len(inputs) > 5 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "inputs[5] if len(inputs) > 5 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_946": {
                "input": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.word_embeddings, input_ids)",
                            "Call"
                        ],
                        [
                            "inputs[5] if len(inputs) > 5 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "inputs[5] if len(inputs) > 5 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_74": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_ctrl.py": {
        "tensorflow": {
            "cast_49": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.concatenate([sines, cosines], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(k, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_key, k), dim=-2)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_value, v), dim=-2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Wq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Wk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Wv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_114": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "original_size_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output[0], perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(dff, activation='relu', name='0'), tf.keras.layers.Dense(d_model_size, name='2')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_143": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_144": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_185": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_193": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_292": {
                "variable": {
                    "value": "pos_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pos_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_315": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_108": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_246": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[input_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_290": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "dff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dff",
                            "Method Argument"
                        ],
                        [
                            "dff",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_129": {
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_280": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_288": {
                "input": {
                    "value": "tf.ones((seq_len, seq_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_290": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_245": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_280": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_288": {
                "shape": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_304": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_distilbert.py": {
        "tensorflow": {
            "Embedding_78": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_85": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_183": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_186": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_189": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_192": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.k_lin(key))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bs, 1, 1, k_length]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_252": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_265": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_268": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_289": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_296": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "sa_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_299": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_442": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.ones(input_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_628": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_631": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNormalization_632": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_684": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_688": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_691": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_740": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_744": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_752": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_753": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_754": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_148": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_441": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_52": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_64": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_164": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_229": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_272": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_140": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_142": {
                "input": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.word_embeddings, input_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_145": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_65": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_gpt2.py": {
        "tensorflow": {
            "Dropout_73": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_136": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[key, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_177": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_179": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_215": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_220": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_624": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_629": {
                "variable": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.ln_2(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(m, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_95": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_130": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_141": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_key, key]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_value, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_85": {},
            "matmul_115": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_614": {
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_615": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_616": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_617": {
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_96": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_272": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_347": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_324": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_54": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_openai.py": {
        "tensorflow": {
            "Activation_59": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_61": {
                "activation": {
                    "value": "swish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_142": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_179": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_181": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_210": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "positions_embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_295": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_586": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_591": {
                "variable": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_94": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.mlp(n, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_101": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_136": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_279": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_91": {},
            "matmul_121": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_576": {
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_577": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_578": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_579": {
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_263": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_314": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_51": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_pytorch_utils.py": {
        "tensorflow": {},
        "torch": {
            "load_80": {
                "variable": {
                    "value": "pt_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(pytorch_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "new_pt_params_dict[pt_weight_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "loaded_pt_weights_data_ptr[pt_weight.data_ptr()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_roberta.py": {
        "tensorflow": {
            "Dense_221": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_224": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_225": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_309": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_313": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_314": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_407": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_408": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_59": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "einsum_50": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_67": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.drop_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_72": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNormalization_77": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_118": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "qkv_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_125": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_130": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_143": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "r_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[1] + 1, x_size[0], x_size[2], x_size[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "w_head_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "w_head_q[-qlen:]",
                            "Subscript"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_q, (qlen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(qlen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "w_head_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "w_head_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "r_head_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rlen, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_203": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rw_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_head_q + self.r_w_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_206": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rr_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_head_q + self.r_r_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score * (1 - attn_mask_t) - 1e+30 * attn_mask_t",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_227": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropatt(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, w_head_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_vec, (attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_367": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_517": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_518": {
                "variable": {
                    "value": "mask_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "band_part_519": {
                "variable": {
                    "value": "mask_dia",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_520": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_521": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_182": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_191": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_328": {
                "variable": {
                    "value": "inp_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(inp_flat)[0], self.d_proj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([shape_list(inp_flat)[0], self.d_proj])",
                            "Call"
                        ],
                        [
                            "emb_flat + tf.scatter_nd(mask_idx, emb_i, tf.cast(tf.shape(emb_flat), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "embed_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(inp) + [self.d_proj]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_461": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "band_part_523": {
                "variable": {
                    "value": "mask_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_524": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dec_attn_mask[:, :qlen] + mask_l - mask_dia, dec_attn_mask[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_54": {
                "input": {
                    "value": "pos_emb[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_337": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "id,de->ie",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_339": {
                "variable": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(mask_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mem_len, bsz, self.d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_462": {
                "input": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, w], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([mems[i], hids[i]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_488": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_545": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_567": {
                "a": {
                    "value": "core_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_norm(inp)",
                            "Call"
                        ],
                        [
                            "self.layer_1(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_1(inp)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.drop(word_emb, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(core_out, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sin_51": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_51": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_340": {
                "indices": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(mask_i), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.cast(tf.shape(emb_flat), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_47": {},
            "Embedding_310": {
                "input_dim": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "self.d_embed // self.div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'emb_layers_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_335": {
                "tensor": {
                    "value": "inp_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_339": {
                "condition": {
                    "value": "mask_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_340": {
                "x": {
                    "value": "tf.shape(emb_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_571": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_575": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_340": {
                "input": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([shape_list(inp_flat)[0], self.d_proj])",
                            "Call"
                        ],
                        [
                            "emb_flat + tf.scatter_nd(mask_idx, emb_i, tf.cast(tf.shape(emb_flat), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_transfo_xl_utilities.py": {
        "tensorflow": {
            "shape_108": {
                "variable": {
                    "value": "lp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_109": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, target]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibd,ed->ibe",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_111": {
                "params": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprob",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([r, target], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_token]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_121": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "hidden_sizes[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.log_softmax(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_104": {
                "equation": {
                    "value": "ibd,nd->ibn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(hidden_sizes[:2], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tf.scatter_nd(mask_idx, -cur_logprob, tf.cast(tf.shape(loss), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_130": {
                "variable": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_141": {
                "variable": {
                    "value": "cur_W",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_W, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "cur_b",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_b, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_152": {
                "variable": {
                    "value": "tail_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tail_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "boolean_mask_148": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_157": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_158": {
                "variable": {
                    "value": "cur_tail_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(tail_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scatter_nd_162": {
                "indices": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-cur_logprob",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.cast(tf.shape(loss), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_131": {
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_162": {
                "x": {
                    "value": "tf.shape(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_162": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(hidden_sizes[:2], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tf.scatter_nd(mask_idx, -cur_logprob, tf.cast(tf.shape(loss), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_utils.py": {
        "tensorflow": {
            "constant_54": {
                "variable": {
                    "value": "dummy_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_491": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bz, sl, self.nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_381": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_382": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TruncatedNormal_501": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_370": {
                "params": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_384": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "first_dims + [self.vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_418": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_428": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_432": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_457": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_469": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "inputs.get('cls_index', None)",
                            "Call"
                        ],
                        [
                            "tf.fill(hidden_shape[:-2], hidden_shape[-2] - 1)",
                            "Call"
                        ],
                        [
                            "cls_index[..., tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_470": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states[:, -1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.first_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.mean(hidden_states, axis=1)",
                            "Call"
                        ],
                        [
                            "self.summary(output)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "self.last_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.gather(hidden_states, cls_index, batch_dims=len(hidden_shape) - 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=len(hidden_shape) - 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_461": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "hidden_shape[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_xlm.py": {
        "tensorflow": {
            "constant_52": {
                "variable": {
                    "value": "out[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.sin(position_enc[:, 0::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "out[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.cos(position_enc[:, 1::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mask",
                            "variable"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "get_masks(slen, lengths, self.causal, padding_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_92": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1)), alen[tf.newaxis, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "tf.cast(attn_mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "get_masks(slen, lengths, self.causal, padding_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_77": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(slen)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_equal_81": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alen[tf.newaxis, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assert_equal_88": {
                "x": {
                    "value": "shape_list(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_109": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_110": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_111": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_112": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.k_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k_lin(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mask",
                            "variable"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "get_masks(slen, lengths, self.causal, padding_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bs, 1, qlen, klen) if len(shape_list(mask)) == 3 else (bs, 1, 1, klen)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_189": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_190": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_192": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_237": {
                "variable": {
                    "value": "self.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_239": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_252": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_457": {
                "variable": {
                    "value": "inputs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_458": {
                "variable": {
                    "value": "attns_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_754": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_764": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_765": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_766": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_247": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lang_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_339": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(lengths)[0]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_354": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_460": {
                "variable": {
                    "value": "langs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_63": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_81": {
                "input": {
                    "value": "alen[tf.newaxis, tf.newaxis, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(bs, slen, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_191": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_332": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_334": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_357": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_363": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNormalization_265": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm1_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_270": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm2_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_354": {},
            "sqrt_63": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_332": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_332": {
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_tf_xlnet.py": {
        "tensorflow": {
            "Activation_57": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_59": {
                "activation": {
                    "value": "swish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNormalization_78": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[1], x_size[0], x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_134": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_137": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_166": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_178": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask], training=training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_288": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_289": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_292": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_295": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_317": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_372": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_408": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_411": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_412": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_432": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "inv_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 10000 ** (freq_seq / self.d_model)",
                            "BinOp"
                        ],
                        [
                            "inv_freq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_433": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_443": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_926": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_981": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_991": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lm_loss(hidden_state)",
                            "Call"
                        ],
                        [
                            "self.logits_proj(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_992": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_993": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_144": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_145": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.einsum('ibnd,snd->ibns', q_head + self.r_s_bias, self.seg_embed)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbs,ibns->ijbn', seg_mat, ef)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_201": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_226": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_261": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_262": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_263": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_266": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_415": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_428": {
                "input": {
                    "value": "new_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_out[-self.mem_len:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([prev_mem, curr_out], 0)[-self.mem_len:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_437": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "self.positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "self.relative_positional_encoding(qlen, klen, bsz=bsz, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "self.dropout(pos_emb, training=training)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, self.d_model, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(freq_seq, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_458": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_459": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_478": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_480": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_568": {
                "variable": {
                    "value": "mems_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(data_mask)[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_570": {
                "variable": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_577": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_581": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([qlen, mlen], dtype=dtype_float), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_582": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask + non_tgt_mask[:, :, None, None] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tile_593": {
                "variable": {
                    "value": "word_emb_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(target_mapping)[0], bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_604": {
                "variable": {
                    "value": "mem_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_605": {
                "variable": {
                    "value": "cat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_608": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_611": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tanh_48": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_196": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_230": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "tf.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_238": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_256": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_462": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_463": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_466": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_467": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_482": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_484": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_523": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_531": {
                "a": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[5] if len(inputs) > 5 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(token_type_ids, perm=(1, 0)) if token_type_ids is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_532": {
                "a": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[6] if len(inputs) > 6 else input_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('input_mask', input_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(input_mask, perm=(1, 0)) if input_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "1.0 - attention_mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_533": {
                "a": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_534": {
                "a": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else perm_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('perm_mask', perm_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(perm_mask, perm=(1, 2, 0)) if perm_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_535": {
                "a": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_661": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_norm(attn_out)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "self.layer_1(output)",
                            "Call"
                        ],
                        [
                            "self.activation_function(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + inp)",
                            "Call"
                        ],
                        [
                            "self.dropout(output_g if output_g is not None else output_h, training=training)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_426": {
                "values": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_433": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_433": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_526": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[8] if len(inputs) > 8 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_580": {
                "num_rows": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qlen",
                            "Method Argument"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "logical_not_609": {
                "x": {
                    "value": "tf.equal(token_type_ids[:, None], cat_ids[None, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_581": {
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_609": {
                "x": {
                    "value": "token_type_ids[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_ids[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_673": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_568": {
                "input": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mask[None] + perm_mask",
                            "BinOp"
                        ],
                        [
                            "input_mask[None]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([mems_mask, data_mask], axis=1)",
                            "Call"
                        ],
                        [
                            "perm_mask",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "shape_593": {
                "input": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_668": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_670": {
                "a": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_49": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_134": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_138": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ger_186": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_211": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_251": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_310": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_313": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_347": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_410": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_605": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_620": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_289": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_298": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_617": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_618": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_755": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_839": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_206": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_208": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_321": {
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_428": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_445": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_669": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.size(1)",
                            "Call"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_689": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_695": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_413": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_749": {
                "input": {
                    "value": "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_182": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_416": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_421": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_422": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_746": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_747": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_896": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_logits(self.transformer.word_emb, self.out_layer.bias, labels, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_865": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_870": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_126": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_130": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Parameter_209": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_261": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_289": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnij,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_299": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bnij,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "attn_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_407": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_429": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_611": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_612": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_613": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_614": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_646": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_647": {
                "variable": {
                    "value": "mask_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_649": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_671": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_672": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_682": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_937": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1015": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1115": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1200": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_185": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_268": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_321": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_324": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_327": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_331": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_345": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_378": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_379": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_380": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_383": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_651": {
                "variable": {
                    "value": "mask_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_652": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_695": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_696": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_711": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_819": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_962": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1143": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1237": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1347": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1366": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.split(1, dim=-1)",
                            "Call"
                        ],
                        [
                            "start_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1368": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1370": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1376": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.split(1, dim=-1)",
                            "Call"
                        ],
                        [
                            "end_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1378": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1382": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_180": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_235": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_249": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_349": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_356": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_373": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_683": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_775": {
                "variable": {
                    "value": "mems_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_776": {
                "variable": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_788": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_812": {
                "variable": {
                    "value": "mem_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_813": {
                "variable": {
                    "value": "cat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_1040": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1043": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1355": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_286": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * self.n_layer",
                            "BinOp"
                        ],
                        [
                            "head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "head_mask.expand(self.n_layer, -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "head_mask.to(dtype=next(self.parameters()).dtype)",
                            "Call"
                        ],
                        [
                            "head_mask.unsqueeze(1).unsqueeze(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_292": {
                "equation": {
                    "value": "bnij->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_665": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_672": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_672": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_786": {
                "n": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs_embeds.shape[0]",
                            "Subscript"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_276": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_278": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_788": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_180": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_bert_test.py": {
        "tensorflow": {
            "tile_218": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_219": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_220": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_220": {
                "input": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_common_test.py": {
        "tensorflow": {
            "constant_449": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype if dtype is not None else tf.int32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Input_159": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "clipnorm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_161": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_162": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_181": {
                "variable": {
                    "value": "extended_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_178": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_412": {
                "x": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs_dict, training=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs_dict, training=False)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_429": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "pt_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'pt_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "key.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "key.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_ctrl_test.py": {
        "tensorflow": {}
    },
    "transformers/transformers/tests/modeling_tf_distilbert_test.py": {
        "tensorflow": {}
    },
    "transformers/transformers/tests/modeling_tf_gpt2_test.py": {
        "tensorflow": {
            "tile_174": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_175": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_176": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "input": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_openai_gpt_test.py": {
        "tensorflow": {
            "tile_173": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_174": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_175": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "input": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_roberta_test.py": {
        "tensorflow": {
            "constant_210": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_218": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_231": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_234": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_247": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_254": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.9469, 0.3913, 0.5118]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_transfo_xl_test.py": {
        "tensorflow": {
            "set_seed_112": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_tf_xlm_test.py": {
        "tensorflow": {}
    },
    "transformers/transformers/tests/modeling_tf_xlnet_test.py": {
        "tensorflow": {
            "zeros_105": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "variable": {
                    "value": "perm_mask_last",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "variable": {
                    "value": "target_mapping_last",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_seed_143": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tokenization_utils.py": {
        "tensorflow": {
            "constant_861": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[sequence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_862": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[token_type_ids]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_864": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sequence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_865": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_type_ids]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/bpe2text.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "roberta",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "roberta.base",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/dataset2bpe.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "roberta",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "roberta.base",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/paraphrase_splits.py": {
        "torch": {
            "load_19": {
                "variable": {
                    "value": "roberta",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "roberta.base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demo_paraphraser.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/eval_lm.py": {
        "torch": {
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/examples/roberta/commonsense_qa/commonsense_qa_task.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "src_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/examples/roberta/wsc/wsc_criterion.py": {
        "torch": {
            "log_softmax_49": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src_tokens=self.get_masked_input(tokens, mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_57": {
                "input": {
                    "value": "torch.cat([query_lprobs, cand_lprobs]).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "query_lprobs.new([0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[query_lprobs, cand_lprobs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/examples/roberta/wsc/wsc_task.py": {
        "torch": {
            "zeros_like_98": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.binarize(prefix + leading_space + txt + trailing_space + suffix, append_eos=True)",
                            "Call"
                        ],
                        [
                            "self.binarize_with_mask(cand_span.text, prefix, suffix, leading_space, trailing_space)",
                            "Call"
                        ],
                        [
                            "full_cand[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_235": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src_tokens=get_masked_input(tokens, mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/examples/speech_recognition/criterions/cross_entropy_acc.py": {
        "torch": {
            "nll_loss_40": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ],
                        [
                            "self.compute_loss(model, net_output, target, reduction, log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "model.get_targets(sample, net_output)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction",
                            "Method Argument"
                        ],
                        [
                            "'sum'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_48": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.argmax(1).masked_select(mask) == target.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target != self.padding_idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_63": {
                "input": {
                    "value": "sample['net_input']['src_lengths']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/examples/speech_recognition/data/collaters.py": {
        "torch": {
            "index_select_105": {
                "variable": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames_lengths.sort(descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s['data'][self.feature_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "fairseq_data_utils.collate_tokens([s['target'] for s in samples], self.pad_index, self.eos_index, left_pad=False, move_eos_to_beginning=False)",
                            "Call"
                        ],
                        [
                            "target.index_select(0, sort_order)",
                            "Call"
                        ],
                        [
                            "s['data'][self.label_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/examples/speech_recognition/data/data_utils.py": {
        "torch": {
            "max_42": {
                "variable": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_44": {
                "start": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/examples/speech_recognition/infer.py": {
        "torch": {
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/examples/speech_recognition/models/vggtransformer.py": {
        "torch": {
            "Embedding_714": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_722": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_739": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_384": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_518": {
                "variable": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(src_lengths.float() / subsampling_factor).ceil().long()",
                            "Call"
                        ],
                        [
                            "input_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_519": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_579": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_598": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_735": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.LayerNorm(embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_693": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_697": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_595": {
                "normalized_shape": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/examples/speech_recognition/tasks/speech_recognition.py": {
        "torch": {
            "cat_64": {
                "tensors": {
                    "value": "[t, torch.LongTensor([tgt_dict.eos()])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/bleu.py": {
        "torch": {}
    },
    "fairseq/fairseq/checkpoint_utils.py": {
        "torch": {
            "load_135": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, l: default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_tensor_215": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': args, 'model': model_state_dict if model_state_dict else {}, 'optimizer_history': optim_history + [{'criterion_name': criterion.__class__.__name__, 'optimizer_name': optimizer.__class__.__name__, 'lr_scheduler_state': lr_scheduler.state_dict(), 'num_updates': num_updates}], 'extra_state': extra_state}",
                            "Dict"
                        ],
                        [
                            "state_dict",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/criterions/adaptive_loss.py": {
        "torch": {
            "cross_entropy_58": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/binary_cross_entropy.py": {
        "torch": {
            "binary_cross_entropy_with_logits_40": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(net_output).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, net_output, expand_steps=False).float()",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_35": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_target_weights(target, net_output)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/criterions/composite_loss.py": {
        "torch": {}
    },
    "fairseq/fairseq/criterions/cross_entropy.py": {
        "torch": {
            "nll_loss_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, net_output).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/fairseq_criterion.py": {
        "torch": {}
    },
    "fairseq/fairseq/criterions/legacy_masked_lm.py": {
        "torch": {
            "nll_loss_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, -1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_25": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/lm_probe_frozen.py": {
        "torch": {
            "sum_66": {
                "variable": {
                    "value": "num_target_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_targets != self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nll_loss_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(lm_logits.view(-1, lm_logits.size(-1)), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "lm_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['net_input']['src_tokens'][:, 1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[style_vector_expanded, content_vectors, pos_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[style_vector_expanded, pos_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_69": {
                "input": {
                    "value": "lm_logits.view(-1, lm_logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[content_vectors, pos_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/masked_lm.py": {
        "torch": {
            "nll_loss_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/nat_loss.py": {
        "torch": {
            "log_softmax_51": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[masks]",
                            "Subscript"
                        ],
                        [
                            "model(src_tokens, src_lengths, prev_output_tokens, tgt_tokens)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_53": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[masks]",
                            "Subscript"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_56": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[masks]",
                            "Subscript"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/sent_order_masked_lm.py": {
        "torch": {
            "zeros_61": {
                "variable": {
                    "value": "relevant_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample['target']['order_target'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "shifted_relevant_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relevant_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sample['target']['order_target'].shape[0], 8).cuda()",
                            "Call"
                        ],
                        [
                            "relevant_scores[:, 2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_79": {
                "variable": {
                    "value": "order_sample_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_sentences - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_88": {
                "variable": {
                    "value": "mlm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsigmoid_76": {
                "input": {
                    "value": "shifted_relevant_scores - relevant_scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_89": {
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_18": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/criterions/sentence_prediction.py": {
        "torch": {
            "nll_loss_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name='sentence_classification_head')",
                            "Call"
                        ],
                        [
                            "logits.squeeze().float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name='sentence_classification_head')",
                            "Call"
                        ],
                        [
                            "logits.squeeze().float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/sentence_prediction_cnn.py": {
        "torch": {
            "nll_loss_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classification_heads['sequence_classification_head_cnn_probe'](features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/sentence_prediction_frozen.py": {
        "torch": {
            "nll_loss_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name='sentence_classification_head_probe')",
                            "Call"
                        ],
                        [
                            "logits.squeeze().float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_51": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name='sentence_classification_head_probe')",
                            "Call"
                        ],
                        [
                            "logits.squeeze().float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/sentence_ranking.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_59": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/criterions/style_separation.py": {
        "torch": {
            "nll_loss_102": {
                "variable": {
                    "value": "style_from_style_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(style_from_style_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "author_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [style_from_style_logits]).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[style_vector_expanded, content_agg_vectors_expanded, pos_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_targets != self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nll_loss_115": {
                "variable": {
                    "value": "lm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(lm_feats.view(-1, lm_feats.size(-1)), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "lm_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['net_input']['src_tokens'][:, 1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_130": {
                "variable": {
                    "value": "style_from_content_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "style_from_content_logits.view(-1, style_from_content_logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_137": {
                "variable": {
                    "value": "style_from_content_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "style_from_content_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(style_from_content_logits.view(-1, style_from_content_logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "author_targets_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "author_targets.unsqueeze(-1).expand(style_from_content_logits.shape[:2]).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_103": {
                "input": {
                    "value": "style_from_style_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classification_heads['style_from_style_classification_head'](features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_116": {
                "input": {
                    "value": "lm_feats.view(-1, lm_feats.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/audio/raw_audio_dataset.py": {
        "torch": {
            "from_numpy_154": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(fname)",
                            "Call"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_47": {
                "input": {
                    "value": "x.view(1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_rate / curr_sample_rate",
                            "BinOp"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/backtranslation_dataset.py": {
        "torch": {
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/base_wrapper_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/colorize_dataset.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "base_collate[net_input][colors]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "list((self.color_getter(self.dataset, s['id']) for s in samples))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/concat_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/concat_sentences_dataset.py": {
        "torch": {
            "cat_20": {
                "tensors": {
                    "value": "[ds[index] for ds in self.datasets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/dictionary.py": {
        "torch": {
            "Tensor_243": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_68": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/fairseq_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/id_dataset.py": {
        "torch": {
            "tensor_20": {
                "data": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/indexed_dataset.py": {
        "torch": {
            "from_numpy_157": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(n, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.cache[ptx:ptx + size]",
                            "Subscript"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(n, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.cache[ptx:ptx + size]",
                            "Subscript"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_479": {
                "ndarray": {
                    "value": "np_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(self._bin_buffer, dtype=self._index.dtype, count=size, offset=ptr)",
                            "Call"
                        ],
                        [
                            "np_array.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(tensor.numpy(), dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/iterators.py": {
        "torch": {
            "DataLoader_256": {
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batches[offset:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.frozen_batches",
                            "Attribute"
                        ],
                        [
                            "shuffle_batches(list(batches), self.seed + epoch)",
                            "Call"
                        ],
                        [
                            "list(ShardedIterator(batches, self.num_shards, self.shard_id, fill_value=[]))",
                            "Call"
                        ],
                        [
                            "shuffle_batches(list(self.frozen_batches), self.seed + epoch)",
                            "Call"
                        ],
                        [
                            "self.frozen_batches",
                            "Attribute"
                        ],
                        [
                            "shuffle_batches(batches, self.seed + epoch + self.shard_id)",
                            "Call"
                        ],
                        [
                            "list(ShardedIterator(batches, self.num_shards, self.shard_id, fill_value=[]))",
                            "Call"
                        ],
                        [
                            "batches",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/language_pair_dataset.py": {
        "torch": {
            "unique_43": {
                "variable": {
                    "value": "(_, align_tgt_i, align_tgt_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "align_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alignments[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_60": {
                "variable": {
                    "value": "tgt_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_lengths.sort(descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sort_order), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[alignment + offset for (align_idx, offset, src_len, tgt_len) in zip(sort_order, offsets, src_lengths, tgt_lengths) for alignment in [samples[align_idx]['alignment'].view(-1, 2)] if check_alignment(alignment, src_len, tgt_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(alignments, dim=0)",
                            "Call"
                        ],
                        [
                            "alignments",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "len(sort_order)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "tgt_item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.tgt[index], torch.LongTensor([eos])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/legacy/block_pair_dataset.py": {
        "torch": {
            "cat_285": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[idx] for idx in range(start_ds_idx, end_ds_idx + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/legacy/masked_lm_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/lm_context_window_dataset.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "sample[net_input][src_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bsz, tsz + self.context_window], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "sample[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full([bsz, tsz + self.context_window], pad, dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/mask_tokens_dataset.py": {
        "torch": {
            "from_numpy_172": {
                "ndarray": {
                    "value": "new_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "new_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/mask_tokens_order_dataset.py": {
        "torch": {
            "from_numpy_174": {
                "ndarray": {
                    "value": "new_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "new_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "order_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/monolingual_dataset.py": {
        "torch": {
            "cat_134": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source.new([self.vocab.bos()]), source]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, source.new([self.vocab.eos()])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target.new([self.tgt_vocab.bos()]), target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "future_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[future_target, future_target.new([self.vocab.pad()])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_target.new([self.vocab.pad()]), past_target[1:], source[-2, None]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/nested_dictionary_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/noising.py": {
        "torch": {
            "t_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_293": {
                "variable": {
                    "value": "src_tokens_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_dataset[index]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_300": {
                "variable": {
                    "value": "noisy_src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy_src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_shuffle.noising(x=x, lengths=lengths, max_shuffle_distance=self.max_word_shuffle_distance)",
                            "Call"
                        ],
                        [
                            "self.word_dropout.noising(x=noisy_src_tokens, lengths=noisy_src_lengths, dropout_prob=self.word_dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.word_dropout.noising(x=noisy_src_tokens, lengths=noisy_src_lengths, dropout_prob=self.word_blanking_prob, blank_idx=self.dictionary.unk())",
                            "Call"
                        ],
                        [
                            "self.noiser.noising(src_tokens_t, src_lengths)",
                            "Call"
                        ],
                        [
                            "torch.t(noisy_src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.argsort()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/numel_dataset.py": {
        "torch": {
            "is_tensor_20": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numel_21": {
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "data": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/prepend_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/prepend_token_dataset.py": {
        "torch": {
            "cat_25": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.token]), item]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/raw_label_dataset.py": {
        "torch": {
            "tensor_24": {
                "data": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/data/sentence_order_label_dataset.py": {
        "torch": {}
    },
    "fairseq/fairseq/data/token_block_dataset.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[idx] for idx in range(start_ds_idx, end_ds_idx + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.eos]), buffer[0:e - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.pad, self.eos]), buffer[0:e - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.eos]), buffer[0:e - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/data/transform_eos_dataset.py": {
        "torch": {
            "cat_82": {
                "variable": {
                    "value": "item[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item['source'], self.eos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "item[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item['target'], self.eos]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/distributed_utils.py": {
        "torch": {
            "is_initialized_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/file_utils.py": {
        "torch": {}
    },
    "fairseq/fairseq/hub_utils.py": {
        "torch": {
            "ModuleList_74": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_utils.load_model_ensemble_and_task([os.path.join(model_path, cpt) for cpt in checkpoint_file.split(':')], arg_overrides=kwargs)",
                            "Call"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_182": {
                "obj": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/iterative_refinement_generator.py": {
        "torch": {
            "arange_57": {
                "variable": {
                    "value": "sent_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "src_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, x.new_zeros(b, l_x - l_y).fill_(self.pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, s.new_zeros(b, l_x - l_y)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, a.new_zeros(b, l_x - l_y, a.size(2))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y.new_zeros(b, l_y - l_x).fill_(self.pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/legacy_distributed_data_parallel.py": {
        "torch": {
            "zeros_like_152": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module.parameters()",
                            "Call"
                        ],
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/models/cmlm_transformer.py": {
        "torch": {
            "arange_24": {
                "start": {
                    "value": "output_masks.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "output_masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/distributed_fairseq_model.py": {
        "torch": {}
    },
    "fairseq/fairseq/models/fairseq_decoder.py": {
        "torch": {}
    },
    "fairseq/fairseq/models/fairseq_encoder.py": {
        "torch": {}
    },
    "fairseq/fairseq/models/fairseq_model.py": {
        "torch": {
            "ModuleDict_276": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{key: FairseqModel(encoders[key], decoders[key]) for key in self.keys}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "is_tensor_430": {
                "obj": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src_tokens, src_lengths=src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_tokens, src_lengths=src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.models[key].encoder(src_tokens, src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "net_output['encoder_out']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_45": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output",
                            "Method Argument"
                        ],
                        [
                            "net_output",
                            "Method Argument"
                        ],
                        [
                            "net_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_weight_norm_107": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_433": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_435": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/fconv.py": {
        "torch": {
            "Embedding_562": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_577": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_312": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(sz[0] * sz[1], sz[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_434": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_580": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_589": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_599": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glu_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_455": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glu_457": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_485": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, padding_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_507": {
                "variable": {
                    "value": "self.convolutions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.projections, self.convolutions, self.residuals)",
                            "Call"
                        ],
                        [
                            "zip(self.projections, self.convolutions, self.attention, self.residuals)",
                            "Call"
                        ],
                        [
                            "conv in enumerate(self.convolutions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remove_weight_norm_506": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.projections, self.convolutions, self.residuals)",
                            "Call"
                        ],
                        [
                            "zip(self.projections, self.convolutions, self.attention, self.residuals)",
                            "Call"
                        ],
                        [
                            "conv in enumerate(self.convolutions)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_502": {}
        }
    },
    "fairseq/fairseq/models/fconv_self_att.py": {
        "torch": {
            "Embedding_492": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.attproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_315": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_316": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_317": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.selfattention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.attproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_392": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_433": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, padding_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "glu_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "self.gate1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "self.gate2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "self.joining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_408": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glu_410": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.pretrained_outputs['out']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gated_x1, gated_x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/insertion_transformer.py": {
        "torch": {
            "arange_105": {
                "variable": {
                    "value": "in_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "in_tokens.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "out_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_tokens, word_ins_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_113": {
                "variable": {
                    "value": "out_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(in_coords[:, 1:] - 0.5).masked_fill(word_ins_pred.eq(padding_idx), float('inf'))",
                            "Call"
                        ],
                        [
                            "torch.cat([in_coords, out_coords], 1).sort(-1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_scores, word_ins_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_114": {
                "variable": {
                    "value": "out_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(in_coords[:, 1:] - 0.5).masked_fill(word_ins_pred.eq(padding_idx), float('inf'))",
                            "Call"
                        ],
                        [
                            "torch.cat([in_coords, out_coords], 1).sort(-1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_179": {
                "variable": {
                    "value": "word_ins_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_word_ins(prev_output_tokens, encoder_out=encoder_out)",
                            "Call"
                        ],
                        [
                            "self.decoder.forward_word_ins(output_tokens, encoder_out=encoder_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_of_65": {
                "obj": {
                    "value": "in_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_90": {
                "data": {
                    "value": "list(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[in_coords, out_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_112": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/iterative_nonautoregressive_transformer.py": {
        "torch": {
            "randint_14": {
                "variable": {
                    "value": "rand_words",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "word_ins_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_tgts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "word_ins_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_110": {
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_output_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/levenshtein_transformer.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "masked_tgt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_tgt_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(masked_tgt_masks, device=out_tokens.device).bool()",
                            "Call"
                        ],
                        [
                            "_get_ins_targets(prev_output_tokens, tgt_tokens, self.pad, self.unk)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "mask_ins_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_ins_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_input[1:-1] + [0 for _ in range(in_seq_len - 1 - len(mask_input[1:-1]))] for mask_input in mask_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask_ins_targets, device=in_tokens.device)",
                            "Call"
                        ],
                        [
                            "[mask_input[1:-1] + [0 for _ in range(in_seq_len - 1 - len(mask_input[1:-1]))] for mask_input in mask_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask_ins_targets, device=in_tokens.device)",
                            "Call"
                        ],
                        [
                            "_get_ins_targets(prev_output_tokens, tgt_tokens, self.pad, self.unk)",
                            "Call"
                        ],
                        [
                            "mask_ins_targets.clamp(min=0, max=255)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "word_del_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "word_del_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b[-1] for b in full_labels]",
                            "ListComp"
                        ],
                        [
                            "[labels + [0 for _ in range(out_seq_len - len(labels))] for labels in word_del_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_del_targets, device=out_tokens.device)",
                            "Call"
                        ],
                        [
                            "[b[-1] for b in full_labels]",
                            "ListComp"
                        ],
                        [
                            "[labels + [0 for _ in range(out_seq_len - len(labels))] for labels in word_del_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_del_targets, device=out_tokens.device)",
                            "Call"
                        ],
                        [
                            "_get_del_targets(word_predictions, tgt_tokens, self.pad)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "mask_ins_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_ins_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask_input[1:-1] + [0 for _ in range(in_seq_len - 1 - len(mask_input[1:-1]))] for mask_input in mask_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask_ins_targets, device=in_tokens.device)",
                            "Call"
                        ],
                        [
                            "[mask_input[1:-1] + [0 for _ in range(in_seq_len - 1 - len(mask_input[1:-1]))] for mask_input in mask_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask_ins_targets, device=in_tokens.device)",
                            "Call"
                        ],
                        [
                            "_get_ins_targets(prev_output_tokens, tgt_tokens, self.pad, self.unk)",
                            "Call"
                        ],
                        [
                            "mask_ins_targets.clamp(min=0, max=255)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "word_del_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "word_del_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b[-1] for b in full_labels]",
                            "ListComp"
                        ],
                        [
                            "[labels + [0 for _ in range(out_seq_len - len(labels))] for labels in word_del_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_del_targets, device=out_tokens.device)",
                            "Call"
                        ],
                        [
                            "[b[-1] for b in full_labels]",
                            "ListComp"
                        ],
                        [
                            "[labels + [0 for _ in range(out_seq_len - len(labels))] for labels in word_del_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_del_targets, device=out_tokens.device)",
                            "Call"
                        ],
                        [
                            "_get_del_targets(word_predictions, tgt_tokens, self.pad)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_478": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, self_attn_mask=None, self_attn_padding_mask=decoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "features_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "features_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_541": {
                "variable": {
                    "value": "f_word_del",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[1])",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[2])",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[0])",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_word_del.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_542": {
                "variable": {
                    "value": "f_mask_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features[:, :-1, :], features[:, 1:, :]], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[:, :-1, :], features[:, 1:, :]], 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_mask_ins.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_of_30": {
                "obj": {
                    "value": "in_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_of_79": {
                "obj": {
                    "value": "in_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_of_112": {
                "obj": {
                    "value": "in_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_208": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_344": {
                "variable": {
                    "value": "word_del_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_del_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_word_del(word_predictions, encoder_out)",
                            "Call"
                        ],
                        [
                            "self.decoder.forward_word_del(_skip(output_tokens, can_del_word), _skip(encoder_out, can_del_word))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_366": {
                "variable": {
                    "value": "mask_ins_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_mask_ins(prev_output_tokens, encoder_out=encoder_out)",
                            "Call"
                        ],
                        [
                            "self.decoder.forward_mask_ins(_skip(output_tokens, can_ins_mask), _skip(encoder_out, can_ins_mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_370": {
                "variable": {
                    "value": "mask_ins_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ins_score.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.min(mask_ins_pred, max_lens[can_ins_mask, None].expand_as(mask_ins_pred))",
                            "Call"
                        ],
                        [
                            "mask_ins_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_391": {
                "variable": {
                    "value": "word_ins_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_word_ins(masked_tgt_tokens, encoder_out=encoder_out)",
                            "Call"
                        ],
                        [
                            "self.decoder.forward_word_ins(_skip(output_tokens, can_ins_word), _skip(encoder_out, can_ins_word))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_159": {
                "start": {
                    "value": "out_max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_lengths.max()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_293": {
                "input": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_word_ins(masked_tgt_tokens, encoder_out=encoder_out)",
                            "Call"
                        ],
                        [
                            "self.decoder.forward_word_ins(_skip(output_tokens, can_ins_word), _skip(encoder_out, can_ins_word))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_293": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_520": {
                "input": {
                    "value": "features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features[:, :-1, :], features[:, 1:, :]], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[:, :-1, :], features[:, 1:, :]], 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_mask_ins.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_532": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[1])",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[2])",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[0])",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_word_del.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_208": {
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/lightconv.py": {
        "torch": {
            "Embedding_651": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "embed_tokens.padding_idx",
                            "Attribute"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_658": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_313": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_378": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_469": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(self.embed_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_483": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_491": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_497": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_498": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_500": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_592": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_598": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_627": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_628": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_630": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_423": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_425": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GLU_445": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_533": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_621": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_335": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_408": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_410": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.input_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/lstm.py": {
        "torch": {
            "Embedding_472": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_479": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_487": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_496": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_228": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_lengths.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_240": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(packed_x, (h0, c0))",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "self.padding_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_299": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_hids * x.unsqueeze(0)).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "attn_scores.float().masked_fill_(encoder_padding_mask, float('-inf')).type_as(attn_scores)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "x.new_zeros(srclen, seqlen, bsz)",
                            "Call"
                        ],
                        [
                            "attn_scores.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_304": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_proj(torch.cat((x, input), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LSTMCell(input_size=hidden_size + embed_dim if layer == 0 else hidden_size, hidden_size=hidden_size) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_372": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[j, :, :], input_feed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_412": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs.view(self.num_layers, 2, bsz, -1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.attention(hidden, encoder_outs, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "F.dropout(out, p=self.dropout_out, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_401": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(input, (prev_hiddens[i], prev_cells[i]))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_442": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_304": {
                "tensors": {
                    "value": "(x, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/masked_lm.py": {
        "torch": {
            "Linear_166": {
                "variable": {
                    "value": "self.masked_lm_pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.lm_head_transform_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.lm_output_learned_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_states[-1].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(self.activation_fn(self.lm_head_transform_weight(x)))",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.sentence_encoder.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.embed_out(x)",
                            "Call"
                        ],
                        [
                            "x + self.lm_output_learned_bias",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sentence_encoder.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.sentence_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.sentence_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/model_utils.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x.new_zeros(*dims).fill_(padding_idx)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/nonautoregressive_transformer.py": {
        "torch": {
            "arange_76": {
                "variable": {
                    "value": "index_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_lens.max()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "trg_lens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_78": {
                "variable": {
                    "value": "index_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_trg_len, device=trg_lens.device).float()",
                            "Call"
                        ],
                        [
                            "steps[:, None] * index_t[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.round(index_t).long().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_182": {
                "variable": {
                    "value": "idx_length",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_tgt.max()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "src_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_433": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_embedding(prev_output_tokens, self.forward_copying_source(src_embd, src_mask, prev_output_tokens.ne(self.padding_idx)))",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, self_attn_mask=None, self_attn_padding_mask=decoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(1, T * B, C).contiguous()",
                            "Call"
                        ],
                        [
                            "self.self_attn.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([residual, residual + x], 2)",
                            "Call"
                        ],
                        [
                            "residual",
                            "variable"
                        ],
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds)",
                            "Call"
                        ],
                        [
                            "x.view(T, B, C)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_443": {
                "variable": {
                    "value": "copied_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_embeds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mapped_inputs.unsqueeze(-1).expand(*mapped_inputs.size(), src_embeds.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_469": {
                "variable": {
                    "value": "length_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_feats.mean(0)",
                            "Call"
                        ],
                        [
                            "(enc_feats / src_masks.sum(0)[None, :, None] * src_masks[:, :, None]).sum(0)",
                            "Call"
                        ],
                        [
                            "encoder_out['encoder_out']",
                            "Subscript"
                        ],
                        [
                            "_mean_pooling(enc_feats, src_masks)",
                            "Call"
                        ],
                        [
                            "enc_feats.detach()",
                            "Call"
                        ],
                        [
                            "enc_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_length.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_579": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_embedding(prev_output_tokens, self.forward_copying_source(src_embd, src_mask, prev_output_tokens.ne(self.padding_idx)))",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, self_attn_mask=None, self_attn_padding_mask=decoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(1, T * B, C).contiguous()",
                            "Call"
                        ],
                        [
                            "self.self_attn.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([residual, residual + x], 2)",
                            "Call"
                        ],
                        [
                            "residual",
                            "variable"
                        ],
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds)",
                            "Call"
                        ],
                        [
                            "x.view(T, B, C)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_581": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_embedding(prev_output_tokens, self.forward_copying_source(src_embd, src_mask, prev_output_tokens.ne(self.padding_idx)))",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, self_attn_mask=None, self_attn_padding_mask=decoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(1, T * B, C).contiguous()",
                            "Call"
                        ],
                        [
                            "self.self_attn.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([residual, residual + x], 2)",
                            "Call"
                        ],
                        [
                            "residual",
                            "variable"
                        ],
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds)",
                            "Call"
                        ],
                        [
                            "x.view(T, B, C)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_370": {
                "variable": {
                    "value": "ngram_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer(ngram_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.unsqueeze(0) for t in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.unsqueeze(0) for s in scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_545": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds, before_softmax=True)",
                            "Call"
                        ],
                        [
                            "attn_weights.repeat(1, N, 1)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(attn_masks, float('-inf'))",
                            "Call"
                        ],
                        [
                            "utils.softmax(attn_weights, dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.self_attn.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.self_attn.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_550": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds, before_softmax=True)",
                            "Call"
                        ],
                        [
                            "attn_weights.repeat(1, N, 1)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(attn_masks, float('-inf'))",
                            "Call"
                        ],
                        [
                            "utils.softmax(attn_weights, dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.self_attn.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds, before_softmax=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_558": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_embedding(prev_output_tokens, self.forward_copying_source(src_embd, src_mask, prev_output_tokens.ne(self.padding_idx)))",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, self_attn_mask=None, self_attn_padding_mask=decoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(1, T * B, C).contiguous()",
                            "Call"
                        ],
                        [
                            "self.self_attn.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([residual, residual + x], 2)",
                            "Call"
                        ],
                        [
                            "residual",
                            "variable"
                        ],
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds)",
                            "Call"
                        ],
                        [
                            "x.view(T, B, C)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[residual, residual + x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "context_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.forward_embedding(max_token).unsqueeze(0), context_embeds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_568": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_embedding(prev_output_tokens, self.forward_copying_source(src_embd, src_mask, prev_output_tokens.ne(self.padding_idx)))",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, self_attn_mask=None, self_attn_padding_mask=decoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(1, T * B, C).contiguous()",
                            "Call"
                        ],
                        [
                            "self.self_attn.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([residual, residual + x], 2)",
                            "Call"
                        ],
                        [
                            "residual",
                            "variable"
                        ],
                        [
                            "self.self_attn(query=x, key=context_embeds, value=context_embeds)",
                            "Call"
                        ],
                        [
                            "x.view(T, B, C)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_256": {
                "input": {
                    "value": "self.output_layer(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_256": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/roberta/alignment_utils.py": {
        "torch": {
            "stack_93": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weighted_features[0]]",
                            "List"
                        ],
                        [
                            "torch.stack(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_94": {
                "input": {
                    "value": "torch.abs(output.sum(dim=0) - features.sum(dim=0)) < 0.0001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "output.sum(dim=0) - features.sum(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/roberta/hub_interface.py": {
        "torch": {
            "log_softmax_108": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.classification_heads[head](features)",
                            "Call"
                        ],
                        [
                            "features[0, masked_index, :].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/roberta/model.py": {
        "torch": {
            "ModuleDict_48": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_275": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_298": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ],
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ],
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_318": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ],
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ],
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_319": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_335": {
                "variable": {
                    "value": "self.conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_337": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ],
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ],
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_342": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[masked_tokens, :]",
                            "Subscript"
                        ],
                        [
                            "inner_states[-1]",
                            "Subscript"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "*size": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_287": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(src_tokens, features_only, return_all_hiddens, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.classification_heads[classification_head_name](x)",
                            "Call"
                        ],
                        [
                            "hub_utils.from_pretrained(model_name_or_path, checkpoint_file, data_name_or_path, archive_map=cls.hub_models(), bpe=bpe, load_checkpoint_heads=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(features)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(features, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=2).values",
                            "Attribute"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(src_tokens, return_all_hiddens)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x, masked_tokens=masked_tokens)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(src_tokens, features_only, return_all_hiddens, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.classification_heads[classification_head_name](x)",
                            "Call"
                        ],
                        [
                            "hub_utils.from_pretrained(model_name_or_path, checkpoint_file, data_name_or_path, archive_map=cls.hub_models(), bpe=bpe, load_checkpoint_heads=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(features)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(features, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=2).values",
                            "Attribute"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(src_tokens, return_all_hiddens)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x, masked_tokens=masked_tokens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/models/transformer.py": {
        "torch": {
            "Embedding_691": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(src_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out, incremental_state, **extra_args)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_state, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state, self_attn_mask=self_attn_mask, self_attn_padding_mask=self_attn_padding_mask, need_attn=idx == alignment_layer, need_head_weights=idx == alignment_layer)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_460": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_572": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.forward_embedding(src_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out, incremental_state, **extra_args)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_state, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state, self_attn_mask=self_attn_mask, self_attn_padding_mask=self_attn_padding_mask, need_attn=idx == alignment_layer, need_head_weights=idx == alignment_layer)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_395": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_655": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_397": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_482": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_635": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_637": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_412": {},
            "Tensor_681": {}
        }
    },
    "fairseq/fairseq/models/wav2vec.py": {
        "torch": {
            "Dropout_162": {
                "variable": {
                    "value": "self.dropout_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_agg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_norm_227": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.float() if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.float() if self.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "layer_norm_238": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.float() if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.float() if self.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_332": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_333": {
                "variable": {
                    "value": "self.residual_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_369": {
                "variable": {
                    "value": "self.project_to_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, prediction_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_370": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_386": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tsz * bsz",
                            "BinOp"
                        ],
                        [
                            "tsz if self.sample_distance is None else min(tsz, self.sample_distance)",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(bsz, self.n_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_416": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.new(bsz * copies * (tsz - self.offset + 1) * steps - (steps + 1) * steps // 2 * copies * bsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_308": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_feats(features)",
                            "Call"
                        ],
                        [
                            "self.feature_aggregator(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_agg(x)",
                            "Call"
                        ],
                        [
                            "self.wav2vec_predictions(x, features)",
                            "Call"
                        ],
                        [
                            "x[self.deconstruct_idx]",
                            "Subscript"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * self.residual_scale",
                            "BinOp"
                        ],
                        [
                            "x.abs()",
                            "Call"
                        ],
                        [
                            "x + 1",
                            "BinOp"
                        ],
                        [
                            "x.log()",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * self.residual_scale",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.project_to_steps(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0).expand(targets.size(0), -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad_left, self.pad_right)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "*args": {
                    "value": "nn.Conv1d(n_in, n_out, k, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_323": {
                "*args": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_389": {
                "tensors": {
                    "value": "[torch.arange(start=1, end=tsz - self.sample_distance, device=neg_idxs.device, dtype=neg_idxs.dtype), torch.arange(start=tsz - self.sample_distance, end=tsz - self.sample_distance * 2 - 1, step=-1, device=neg_idxs.device, dtype=neg_idxs.dtype)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_417": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(predictions)",
                            "Call"
                        ],
                        [
                            "(labels, weights)",
                            "Tuple"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1 / self.n_negatives",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "feature_aggregator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_263": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_264": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReplicationPad1d_321": {
                "padding": {
                    "value": "(ka + kb, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_325": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_326": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_337": {
                "in_channels": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "dim",
                            "variable"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_390": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tsz - self.sample_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "neg_idxs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "neg_idxs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_391": {
                "start": {
                    "value": "tsz - self.sample_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "tsz - self.sample_distance * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "neg_idxs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "neg_idxs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_135": {
                "input_size": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers[-1][0]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "agg_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_aggregator()",
                            "Call"
                        ],
                        [
                            "agg_layers[-1][0]",
                            "Subscript"
                        ],
                        [
                            "args.gru_dim",
                            "Attribute"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/adaptive_input.py": {
        "torch": {
            "ModuleList_36": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(size, dim, padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "num_embeddings": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cutoff[i] - prev",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(initial_dim // factor ** i)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(initial_dim // factor ** i)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/adaptive_softmax.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.class_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_74": {
                "variable": {
                    "value": "self.lsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, input.size(-1))",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, dim)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_21": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, input.size(-1))",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, dim)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.t() if self.transpose else self.weight",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.word_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, emb_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cutoff[0] + len(cutoff) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.input_dim // self.factor ** (i + 1))",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tied_emb.size()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tied_proj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tied_proj.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.input_dim // self.factor ** (i + 1))",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.cutoff[i + 1] - self.cutoff[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/beamable_mm.py": {
        "torch": {
            "mm_39": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input2[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/character_token_embedder.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "257",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.symbol_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, word_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_148": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(char_embs)",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(char_embs)",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_122": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pads.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "word_embs.new_zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_124": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.symbol_embeddings[self.eos_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_126": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "unk.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.symbol_embeddings[self.unk_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_44": {
                "in_channels": {
                    "value": "char_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                }
            },
            "where_107": {
                "variable": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "chars.new_zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab[i].encode()",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.max_char_len)",
                            "Call"
                        ],
                        [
                            "self.word_to_char[flat_words.type_as(self.word_to_char)].type_as(input)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), chars.new_zeros(1), chars)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/modules/conv_tbc.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.kernel_size[0], in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/downsampled_multihead_attention.py": {
        "torch": {
            "Linear_242": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.in_proj_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*k_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.in_proj_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*v_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "bmm_106": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ],
                        [
                            "self.in_proj_q(q)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.view(tgt_len, size, self.head_dim)",
                            "Call"
                        ],
                        [
                            "q.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_139": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "self.in_proj_v(v)",
                            "Call"
                        ],
                        [
                            "v.view(src_len, size, self.head_dim)",
                            "Call"
                        ],
                        [
                            "v.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "scalar_bias(v, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_245": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_250": {
                "*args": {
                    "value": "Linear(in_features, out_features * 4, dropout, bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "full_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_weights, v)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.head_dim)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "full_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_weights, v)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.head_dim)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "full_attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "GLU_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_110": {
                "input": {
                    "value": "attn_weights.data.new([1]).expand(tgt_len, tgt_len).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_114": {
                "input": {
                    "value": "attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/dynamic_convolution.py": {
        "torch": {
            "Linear_34": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_169": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "unfold1d(x, K, padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_215": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, 0, self.input_size).contiguous()",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, 0, self.input_size).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_192": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_204": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_191": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/dynamicconv_layer/dynamicconv_layer.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.weight_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_169": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "unfold1d(x, K, padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_210": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_187": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_186": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/dynamicconv_layer/setup.py": {
        "torch": {}
    },
    "fairseq/fairseq/modules/gelu.py": {
        "torch": {
            "gelu_23": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_18": {
                "input": {
                    "value": "gelu_accurate._a * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_25": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/grad_multiply.py": {
        "torch": {}
    },
    "fairseq/fairseq/modules/highway.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, input_dim * 2) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projection.chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/layer_norm.py": {
        "torch": {
            "LayerNorm_16": {
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/learned_positional_embedding.py": {
        "torch": {}
    },
    "fairseq/fairseq/modules/lightconv_layer/lightconv_layer.py": {
        "torch": {
            "Parameter_53": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(self.weight, -1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight.float(), dim=1).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(self.weight, -1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight.float(), dim=1).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(self.weight, -1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight.float(), dim=1).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/lightconv_layer/setup.py": {
        "torch": {}
    },
    "fairseq/fairseq/modules/lightweight_convolution.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, H, T)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_200": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unfold1d(x, self.kernel_size, self.padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_229": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.weight_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_231": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight_expanded, self.weight_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, self.weight_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/linearized_convolution.py": {
        "torch": {
            "linear_63": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_linearized_weight()",
                            "Call"
                        ],
                        [
                            "self.weight.transpose(2, 1).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/logsumexp_moe.py": {
        "torch": {
            "logsumexp_20": {
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/modules/mean_pool_gating_network.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_experts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_experts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~encoder_padding_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out['encoder_out'].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ],
                        [
                            "encoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(encoder_out, dim=1) / ntokens.type_as(encoder_out)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(encoder_out, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_43": {
                "input": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out['encoder_out'].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ],
                        [
                            "encoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/multihead_attention.py": {
        "torch": {
            "Linear_53": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_244": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_qkv(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_269": {
                "variable": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_float.type_as(attn_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_271": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights_float.type_as(attn_weights), p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_qkv(query)",
                            "Call"
                        ],
                        [
                            "self.in_proj_v(value)",
                            "Call"
                        ],
                        [
                            "self.in_proj_v(key)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "variable"
                        ],
                        [
                            "torch.cat((prev_value, v), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_329": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_186": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, key_padding_mask.new_zeros(key_padding_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros(key_padding_mask.size(0), 1).type_as(key_padding_mask)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_301": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_311": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_321": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_204": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key_padding_mask, key_padding_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_141": {
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "key_padding_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/positional_embedding.py": {
        "torch": {}
    },
    "fairseq/fairseq/modules/scalar_bias.py": {
        "torch": {}
    },
    "fairseq/fairseq/modules/sinusoidal_positional_embedding.py": {
        "torch": {
            "exp_45": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "embedding_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bsz.view(1), seq_len.view(1), torch.LongTensor([-1]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "half_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_47": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_47": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/modules/sparse_multihead_attention.py": {
        "torch": {
            "empty_87": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tgt_len, src_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/sparse_transformer_sentence_encoder.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SparseTransformerSentenceEncoderLayer(embedding_dim=self.embedding_dim, ffn_embedding_dim=ffn_embedding_dim, num_attention_heads=num_attention_heads, dropout=self.dropout, attention_dropout=attention_dropout, activation_dropout=activation_dropout, activation_fn=activation_fn, add_bias_kv=add_bias_kv, add_zero_attn=add_zero_attn, export=export, is_bidirectional=is_bidirectional, stride=stride, expressivity=expressivity) for _ in range(num_encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/transformer_layer.py": {
        "torch": {
            "Linear_307": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_283": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=y, value=y, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=need_attn or (not self.training and self.need_attn), need_head_weights=need_head_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "self_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.new(x.size(0), encoder_out.size(0)).zero_(), self_attn_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "self_attn_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_padding_mask, self_attn_padding_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/transformer_sentence_encoder.py": {
        "torch": {
            "Embedding_107": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerSentenceEncoderLayer(embedding_dim=self.embedding_dim, ffn_embedding_dim=ffn_embedding_dim, num_attention_heads=num_attention_heads, dropout=self.dropout, attention_dropout=attention_dropout, activation_dropout=activation_dropout, activation_fn=activation_fn, add_bias_kv=add_bias_kv, add_zero_attn=add_zero_attn, export=export) for _ in range(num_encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(tokens)",
                            "Call"
                        ],
                        [
                            "x * (1 - padding_mask.unsqueeze(-1).type_as(x))",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, self_attn_padding_mask=padding_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_113": {
                "num_embeddings": {
                    "value": "self.num_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/transformer_sentence_encoder_layer.py": {
        "torch": {
            "Linear_56": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/modules/unfold.py": {
        "torch": {
            "pad_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, kernel_size - 1 - padding_l), value=pad_value)",
                            "Call"
                        ],
                        [
                            "x.as_strided((T, B, C, kernel_size), (B * C, C, 1, B * C))",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, kernel_size - 1 - padding_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/modules/vggblock.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "sample_inchannel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_inchannel",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "per_channel_dim",
                            "variable"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "conv_op",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels if layer == 0 else out_channels",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.conv_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "pool_op",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.pooling_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_102": {
                "normalized_shape": {
                    "value": "per_channel_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[3]",
                            "Subscript"
                        ],
                        [
                            "infer_conv_output_dim(conv_op, input_dim, in_channels if layer == 0 else out_channels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/adadelta.py": {
        "torch": {}
    },
    "fairseq/fairseq/optim/adafactor.py": {
        "torch": {
            "mul_126": {
                "input": {
                    "value": "r_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1).unsqueeze(-1)).rsqrt_().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sq_col.unsqueeze(-2).rsqrt()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_196": {
                "input": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad ** 2 + group['eps'][0]",
                            "BinOp"
                        ],
                        [
                            "exp_avg",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/adagrad.py": {
        "torch": {}
    },
    "fairseq/fairseq/optim/adam.py": {
        "torch": {
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_143": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_302": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_165": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/adamax.py": {
        "torch": {
            "zeros_like_117": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_133": {
                "input": {
                    "value": "exp_inf.mul_(beta2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "exp_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_inf']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/bmuf.py": {
        "torch": {
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_139": {
                "tensor": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "src": {
                    "value": "root_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_173": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/optim/fairseq_optimizer.py": {
        "torch": {
            "clip_grad_norm__92": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_norm",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/fp16_optimizer.py": {
        "torch": {
            "Parameter_73": {
                "variable": {
                    "value": "fp32_params",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fp32_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0].new(0).float().new(total_param_size)",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(fp32_params)",
                            "Call"
                        ],
                        [
                            "cls.build_fp32_params(params)",
                            "Call"
                        ],
                        [
                            "fp32_params",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/lr_scheduler/reduce_lr_on_plateau.py": {
        "torch": {}
    },
    "fairseq/fairseq/optim/nag.py": {
        "torch": {
            "zeros_like_79": {
                "variable": {
                    "value": "param_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/optim/sgd.py": {
        "torch": {}
    },
    "fairseq/fairseq/options.py": {
        "torch": {
            "device_count_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/search.py": {
        "torch": {
            "stack_161": {
                "variable": {
                    "value": "self.scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beams_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_71": {
                "input": {
                    "value": "lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.scores_buf, self.indices_buf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_81": {
                "input": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "lprobs[:, 0, :].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.diversity_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_244": {
                "variable": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_nopad.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_251": {
                "variable": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_nopad.view(bsz * beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_263": {
                "input": {
                    "value": "probs_nopad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sample_topp(lprobs_nopad)",
                            "Call"
                        ],
                        [
                            "lprobs_nopad.exp_()",
                            "Call"
                        ],
                        [
                            "lprobs_nopad.exp_()",
                            "Call"
                        ],
                        [
                            "probs_nopad.expand(bsz, beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.indices_buf.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_273": {
                "variable": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "top_indices.expand(bsz, beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.indices_buf.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_285": {
                "variable": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_142": {
                "variable": {
                    "value": "lprobs_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs[:, g::self.num_groups, :]",
                            "Subscript"
                        ],
                        [
                            "torch.add(lprobs_g, self.diversity_strength, self.diversity_buf.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "lprobs_g.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.diversity_strength",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.diversity_buf.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_288": {
                "input": {
                    "value": "scores[:, :, step - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.beams_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/sequence_generator.py": {
        "torch": {
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_153": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0]",
                            "Subscript"
                        ],
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_181": {
                "variable": {
                    "value": "cand_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "cand_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_525": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_542": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_471": {
                "variable": {
                    "value": "active_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step])",
                            "Call"
                        ],
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores[:, step].view(bsz, beam_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_391": {
                "input": {
                    "value": "cand_bbsz_idx[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "eos_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('eos_bbsz_idx')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_448": {
                "input": {
                    "value": "eos_mask.type_as(cand_offsets) * cand_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cand_offsets[:eos_mask.size(1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_457": {
                "input": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_mask')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(new_blacklist, active_hypos)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_467": {
                "input": {
                    "value": "cand_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ],
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_480": {
                "input": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tokens_buf[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tokens.clone()",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ]
                    ]
                }
            },
            "gather_484": {
                "input": {
                    "value": "cand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step])",
                            "Call"
                        ],
                        [
                            "cand_indices[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tokens_buf.view(bsz, beam_size, -1)[:, :, step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_493": {
                "input": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step])",
                            "Call"
                        ],
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores_buf.view(bsz, beam_size, -1)[:, :, step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logsumexp_571": {
                "input": {
                    "value": "torch.stack(log_probs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_399": {
                "input": {
                    "value": "cand_scores[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "eos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('eos_scores', type_of=scores)",
                            "Call"
                        ],
                        [
                            "eos_scores / (step + 1) ** self.len_penalty",
                            "BinOp"
                        ],
                        [
                            "eos_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_489": {
                "input": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores_buf[:, :step]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "scores.clone()",
                            "Call"
                        ],
                        [
                            "scores_buf.type_as(lprobs)",
                            "Call"
                        ],
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                }
            },
            "index_select_500": {
                "input": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "attn_buf[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attn.clone()",
                            "Call"
                        ],
                        [
                            "attn",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_571": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_289": {
                "start": {
                    "value": "batch_idxs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_180": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0]",
                            "Subscript"
                        ],
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/sequence_scorer.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_84": {
                "obj": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_out[1]",
                            "Subscript"
                        ],
                        [
                            "attn.get('attn', None)",
                            "Call"
                        ],
                        [
                            "attn.data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/fairseq/tasks/fairseq_task.py": {
        "torch": {
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/tasks/language_modeling.py": {
        "torch": {
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/tasks/masked_lm.py": {
        "torch": {}
    },
    "fairseq/fairseq/tasks/multilingual_masked_lm.py": {
        "torch": {}
    },
    "fairseq/fairseq/tasks/multilingual_translation.py": {
        "torch": {
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/tasks/sent_order_masked_lm.py": {
        "torch": {}
    },
    "fairseq/fairseq/tasks/translation_lev.py": {
        "torch": {
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/tasks/translation_moe.py": {
        "torch": {
            "cat_139": {
                "variable": {
                    "value": "lprob_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lprob_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_lprob_y(encoder_out, prev_output_tokens_k)",
                            "Call"
                        ],
                        [
                            "torch.cat(lprob_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "prob_z_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprob_yz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "lprob_y",
                            "variable"
                        ],
                        [
                            "lprob_y + lprob_z.type_as(lprob_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/trainer.py": {
        "torch": {
            "manual_seed_620": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.seed + self.get_num_updates()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_622": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.seed + self.get_num_updates()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_368": {
                "input": {
                    "value": "torch.cuda.DoubleTensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_capability_141": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_capability_149": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq/utils.py": {
        "torch": {
            "remainder_212": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range - num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_214": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range + num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_369": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_370": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_39": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "embed_dict[pieces[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_192": {
                "start": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "buffered_arange.buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_227": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_295": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_297": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_302": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_304": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_180": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq_cli/eval_lm.py": {
        "torch": {
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq_cli/generate.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq_cli/interactive.py": {
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/fairseq_cli/setup.py": {
        "torch": {}
    },
    "fairseq/fairseq_cli/train.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/generate.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/interactive.py": {
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/scripts/average_checkpoints.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, _: torch.serialization.default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "average_checkpoints(args.inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/scripts/wav2vec_featurize.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(labels)",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda(self.gpu)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/setup.py": {
        "torch": {}
    },
    "fairseq/tests/speech_recognition/asr_test_base.py": {
        "torch": {
            "randn_76": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "encoder_out[encoder_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*encoder_out_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_484": {
                "input": {
                    "value": "torch.div(net_output['encoder_out'], 1 - net_output['encoder_out'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_525": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_541": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(low=0, high=K, size=token_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_485": {
                "input": {
                    "value": "net_output['encoder_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - net_output['encoder_out']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_313": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_314": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_381": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_382": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_549": {
                "data": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/speech_recognition/test_collaters.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [pad_idx, pad_idx]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[eos_idx, 3, 2, pad_idx], [eos_idx, 4, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[3, 2, eos_idx, pad_idx], [4, 2, 3, eos_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_average_checkpoints.py": {
        "torch": {
            "Embedding_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.FC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.FC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.FC2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.FC2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_0)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'model': m.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'm1.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm2.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm3.pt')",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_114": {
                "input": {
                    "value": "new_model['model']['embedding.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.embedding.weight + m2.embedding.weight + m3.embedding.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_123": {
                "input": {
                    "value": "new_model['model']['FC1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC1.weight + m2.FC1.weight + m3.FC1.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_132": {
                "input": {
                    "value": "new_model['model']['FC2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC2.weight + m2.FC2.weight + m3.FC2.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_backtranslation_dataset.py": {
        "torch": {
            "is_available_30": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "backtranslation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BacktranslationDataset(tgt_dataset=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), remove_eos_from_src=remove_eos_from_input_src), src_dict=self.tgt_dict, backtranslation_fn=lambda sample: generator.generate([self.model], sample), output_collater=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), append_eos_to_tgt=remove_eos_from_input_src, remove_eos_from_src=remove_eos_from_output_src).collater, cuda=self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "backtranslation_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_binaries.py": {
        "torch": {
            "rand_511": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_512": {
                "input": {
                    "value": "26 * data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_530": {
                "variable": {
                    "value": "src_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_531": {
                "variable": {
                    "value": "tgt_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * tgt_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_530": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_531": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/tests/test_character_token_embedder.py": {
        "torch": {}
    },
    "fairseq/tests/test_concat_dataset.py": {
        "torch": {}
    },
    "fairseq/tests/test_convtbc.py": {
        "torch": {
            "Conv1d_18": {
                "variable": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "input_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "grad_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_tbc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_dictionary.py": {
        "torch": {}
    },
    "fairseq/tests/test_label_smoothing.py": {
        "torch": {
            "unsqueeze_41": {
                "variable": {
                    "value": "self.args.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_memory_efficient_fp16.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_54": {
                "obj": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_44": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_multi_corpus_sampled_dataset.py": {
        "torch": {}
    },
    "fairseq/tests/test_noising.py": {
        "torch": {
            "DataLoader_440": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "language_pair_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LanguagePairDataset(src=noising_dataset, tgt=tgt, src_sizes=None, src_dict=src_dict)",
                            "Call"
                        ],
                        [
                            "TransformEosDataset(language_pair_dataset, src_dict.eos(), append_eos_to_tgt=append_eos_to_tgt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "language_pair_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_454": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_491": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/tests/test_sequence_generator.py": {
        "torch": {
            "log_22": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_354": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_sequence_scorer.py": {
        "torch": {
            "log_97": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_sparse_multihead_attention.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_27": {
                "input": {
                    "value": "torch.eq(bidirectional_attention_sparse_mask, bidirectional_sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_44": {
                "input": {
                    "value": "torch.eq(attention_sparse_mask, sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_27": {
                "input": {
                    "value": "bidirectional_attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional_attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_44": {
                "input": {
                    "value": "attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/tests/test_token_block_dataset.py": {
        "torch": {
            "tensor_24": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tests/test_train.py": {
        "torch": {}
    },
    "fairseq/tests/test_utils.py": {
        "torch": {}
    },
    "fairseq/tests/utils.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda samples: collate(samples, padding_idx, eos_idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rand_220": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bbsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/train.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/validate.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paraphrase_many.py": {
        "torch": {
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/evaluation/scripts/acceptability.py": {
        "torch": {
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_69": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.replace(' .', '.').replace(' ,', ',').replace(' !', '!').replace(' ?', '?').replace(' )', ')').replace('( ', '(')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_69": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/evaluation/scripts/get_paraphrase_similarity.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "roberta",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "roberta.base",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/evaluation/scripts/roberta_classify.py": {
        "torch": {
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.replace(' .', '.').replace(' ,', ',').replace(' !', '!').replace(' ?', '?').replace(' )', ')').replace('( ', '(')",
                            "Call"
                        ],
                        [
                            "x.replace('.', ' .').replace(',', ' ,').replace('!', ' !').replace('?', ' ?').replace(')', ' )').replace('(', '( ')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_90": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/evaluation/scripts/style_transfer.py": {
        "torch": {}
    },
    "style_paraphrase/evaluation/similarity/sim_models.py": {
        "torch": {
            "CosineSimilarity_15": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_20": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.cpu()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np_lens).float().long()",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "np_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_len, max_len), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "np_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_len,), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "np_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_len,), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_21": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "len(i.embeddings)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "style_paraphrase/evaluation/similarity/sim_utils.py": {
        "torch": {
            "mean_58": {
                "variable": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i][0:lengths[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "x[i][0:lengths[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/evaluation/similarity/test_sim.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "style_paraphrase/evaluation/similarity/sim/sim.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/inference_utils.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/training_args.bin'.format(self.model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_53": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "[inst.sentence for inst in instances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[inst.segment for inst in instances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "[inst.gdv for inst in instances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/run_lm_finetuning.py": {
        "torch": {
            "DataLoader_147": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_314": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_338": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpt2_model.gpt2",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_199": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpt2_model.gpt2",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_318": {
                "variable": {
                    "value": "gpt2_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "gpt2_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(gpt2_model)",
                            "Call"
                        ],
                        [
                            "GPT2ParentModule(args=args, gpt2=model)",
                            "Call"
                        ],
                        [
                            "init_gpt2_model(checkpoint_dir=args.output_dir, args=args, model_class=model_class, tokenizer_class=tokenizer_class)",
                            "Call"
                        ],
                        [
                            "init_gpt2_model(checkpoint_dir=checkpoint, args=args, model_class=model_class)",
                            "Call"
                        ],
                        [
                            "gpt2_model",
                            "Method Argument"
                        ],
                        [
                            "gpt2_model",
                            "Method Argument"
                        ],
                        [
                            "gpt2_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_363": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_364": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_367": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_141": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'runs/summary_%s' % args.job_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RandomSampler_146": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_146": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_313": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_313": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_338": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss + curr_loss",
                            "BinOp"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_366": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_143": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/summary_%s' % args.job_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__250": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__252": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_paraphrase/style_dataset.py": {
        "torch": {
            "tensor_98": {
                "data": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[item].sentence",
                            "Attribute"
                        ],
                        [
                            "self.examples[item].sentence",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[item].label",
                            "Attribute"
                        ],
                        [
                            "self.examples[item].label",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "data": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[item].segment",
                            "Attribute"
                        ],
                        [
                            "self.examples[item].segment",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_239": {
                "data": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[item].sentence",
                            "Attribute"
                        ],
                        [
                            "self.examples[item].sentence",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_241": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[item].label",
                            "Attribute"
                        ],
                        [
                            "self.examples[item].label",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "data": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples[item].segment",
                            "Attribute"
                        ],
                        [
                            "self.examples[item].segment",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "style_paraphrase/utils.py": {
        "torch": {
            "sort_189": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred['logits']",
                            "Subscript"
                        ],
                        [
                            "model(input_ids=generated[:, -1:], token_type_ids=segments[:, -1:], past=past)",
                            "Call"
                        ],
                        [
                            "model(input_ids=generated, token_type_ids=segments)",
                            "Call"
                        ],
                        [
                            "model(input_ids=generated, token_type_ids=segments, prefix_input_vectors=style_content_vectors)",
                            "Call"
                        ],
                        [
                            "get_logits(model, i, generated, segments, style_content_vectors, past)",
                            "Call"
                        ],
                        [
                            "model(input_ids=context, token_type_ids=segments)",
                            "Call"
                        ],
                        [
                            "model(input_ids=context, token_type_ids=segments, prefix_input_vectors=style_content_vectors)",
                            "Call"
                        ],
                        [
                            "model(input_ids=latest_input_ids, token_type_ids=tiled_segments, past=past)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_190": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_373": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_374": {
                "variable": {
                    "value": "(top_scores, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits[:, -1, :], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits[:, -1, :], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "tiled_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[segments[:, -1:] for _ in range(beam_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, next_token)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "segments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(segments, segments[:, -1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_347": {
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[beam['sequence'][-1] for element in all_beams for beam in element]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_405": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_406": {
                "variable": {
                    "value": "(top_scores, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits[:, -1, :], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits[:, -1, :], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_190": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(logits, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "probs2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_299": {
                "variable": {
                    "value": "original_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(final_probs) / (temperature if temperature > 0 else 1.0)",
                            "BinOp"
                        ],
                        [
                            "logits[:, -1, :] / (temperature if temperature > 0 else 1.0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_304": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_304": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_306": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_443": {
                "tensors": {
                    "value": "elem[0]['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_443": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_295": {
                "input": {
                    "value": "final_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolation['weight'] * probs2 + (1 - interpolation['weight']) * probs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_306": {
                "input": {
                    "value": "filtered_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_203": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred['logits']",
                            "Subscript"
                        ],
                        [
                            "model(input_ids=generated[:, -1:], token_type_ids=segments[:, -1:], past=past)",
                            "Call"
                        ],
                        [
                            "model(input_ids=generated, token_type_ids=segments)",
                            "Call"
                        ],
                        [
                            "model(input_ids=generated, token_type_ids=segments, prefix_input_vectors=style_content_vectors)",
                            "Call"
                        ],
                        [
                            "get_logits(model, i, generated, segments, style_content_vectors, past)",
                            "Call"
                        ],
                        [
                            "model(input_ids=context, token_type_ids=segments)",
                            "Call"
                        ],
                        [
                            "model(input_ids=context, token_type_ids=segments, prefix_input_vectors=style_content_vectors)",
                            "Call"
                        ],
                        [
                            "model(input_ids=latest_input_ids, token_type_ids=tiled_segments, past=past)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/examples/contrib/run_camembert.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(masked_input, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/contrib/run_openai_gpt.py": {
        "torch": {
            "device_142": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_143": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_189": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_190": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_193": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_194": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/contrib/run_swag.py": {
        "torch": {
            "tensor_288": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_436": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_257": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_273": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_294": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_297": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_306": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_335": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_339": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_578": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_579": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_582": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_259": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_309": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_309": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_435": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_435": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_581": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_635": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_282": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, args.max_seq_length, not evaluate)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__382": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__385": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_412": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/contrib/run_transfo_xl.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/distillation/distiller.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.batch_sequences",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KLDivLoss_115": {
                "variable": {
                    "value": "self.ce_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "self.lm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdamW_134": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in student.named_parameters() if not any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': params.weight_decay}, {'params': [p for (n, p) in student.named_parameters() if any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "params.adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multinomial_203": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prob / x_prob.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(self.mlm_mask_prop * lengths.sum().item())",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_224": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_token_ids_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "masked_select_382": {
                "variable": {
                    "value": "s_logits_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.student(input_ids=input_ids, attention_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "self.student(input_ids=input_ids, attention_mask=None)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_384": {
                "variable": {
                    "value": "t_logits_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.teacher(input_ids=input_ids, attention_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "self.teacher(input_ids=input_ids, attention_mask=None)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_64": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_66": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchSampler_72": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_118": {
                "variable": {
                    "value": "self.mse_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CosineEmbeddingLoss_120": {
                "variable": {
                    "value": "self.cosine_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_171": {
                "variable": {
                    "value": "self.tensorboard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.dump_path, 'log', 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "padding_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 * (bs1 // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, padding_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_412": {
                "variable": {
                    "value": "s_hidden_states_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_414": {
                "variable": {
                    "value": "t_hidden_states_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_541": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mdl_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.dump_path, checkpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_159": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_163": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_196": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_256": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_290": {
                "n": {
                    "value": "bs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_388": {
                "input": {
                    "value": "s_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_389": {
                "input": {
                    "value": "t_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__464": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__466": {
                "parameters": {
                    "value": "self.student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_217": {
                "input": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs * max_seq_len, dtype=torch.bool, device=token_ids.device)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/examples/distillation/grouped_batch_sampler.py": {
        "torch": {}
    },
    "transformers/examples/distillation/lm_seqs_dataset.py": {
        "torch": {
            "tensor_149": {
                "variable": {
                    "value": "tk_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tk_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[list(t.astype(int)) + [pad_idx] * (max_seq_len_ - len(t)) for t in token_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "lg_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t[1] for t in batch]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/examples/distillation/run_squad_w_distillation.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_338": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_85": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_318": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_344": {
                "variable": {
                    "value": "all_example_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_345": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_350": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_484": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_485": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_488": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_88": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_88": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_237": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_237": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_487": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_562": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_167": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_332": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__184": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__187": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "input": {
                    "value": "start_logits_stu / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "input": {
                    "value": "start_logits_tea / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_170": {
                "input": {
                    "value": "end_logits_stu / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "input": {
                    "value": "end_logits_tea / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/distillation/scripts/extract.py": {
        "torch": {
            "save_89": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/distillation/scripts/extract_distilbert.py": {
        "torch": {
            "save_82": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/distillation/train.py": {
        "torch": {
            "from_numpy_229": {
                "variable": {
                    "value": "token_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "token_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.maximum(counts, 1) ** (-args.mlm_smoothing)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(token_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/distillation/utils.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_129": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_bertology.py": {
        "torch": {
            "zeros_73": {
                "variable": {
                    "value": "head_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.config.num_hidden_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.config.num_attention_heads",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "attn_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.config.num_hidden_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.config.num_attention_heads",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "head_ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_132": {
                "variable": {
                    "value": "head_ranks[head_importance.view(-1).sort(descending=True)[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "variable": {
                    "value": "new_head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False)",
                            "Call"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False, head_mask=new_head_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_342": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data) if args.local_rank == -1 else DistributedSampler(eval_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.config.num_hidden_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.bert.config.num_attention_heads",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_116": {
                "input": {
                    "value": "head_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False)",
                            "Call"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False, head_mask=new_head_mask)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "device_275": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_276": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_279": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_327": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_334": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'run_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_340": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(min(args.data_subset, len(eval_data))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_278": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_331": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_341": {
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_341": {
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_116": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_generation.py": {
        "torch": {
            "tensor_112": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(context, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "context.unsqueeze(0).repeat(num_samples, 1)",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_180": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_181": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_95": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_96": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, next_token)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(logits, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, torch.zeros((1, 1), dtype=torch.long, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, input_ids.shape[1], input_ids.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, input_ids.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_132": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, torch.full((1, 1), xlm_mask_token, dtype=torch.long, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "inputs[langs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[xlm_lang] * inputs['input_ids'].shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_148": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_150": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_91": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_150": {
                "input": {
                    "value": "filtered_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_132": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "xlm_mask_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.mask_token_id",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/examples/run_glue.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_326": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_84": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_113": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_117": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_293": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_433": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_434": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_437": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_229": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_436": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_525": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_224": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_224": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_312": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__163": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__165": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_lm_finetuning.py": {
        "torch": {
            "full_147": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "args.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_150": {
                "variable": {
                    "value": "masked_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, args.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_159": {
                "variable": {
                    "value": "random_words",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_327": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_169": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_202": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_305": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_454": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_455": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_458": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "self.examples[item]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_111": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_154": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_172": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_172": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_300": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_300": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_327": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_457": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_525": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_158": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_154": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__245": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__247": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_158": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_multiple_choice.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_339": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_85": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=not test, test=test)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_307": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(cached_mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_438": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_439": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_442": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_88": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_88": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_234": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_441": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_512": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_229": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=not test, test=test)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_229": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=not test, test=test)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_328": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args.max_seq_length, tokenizer, pad_on_left=bool(args.model_type in ['xlnet']), pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(cached_mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__159": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__162": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_ner.py": {
        "torch": {
            "DataLoader_69": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_299": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_303": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_95": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_99": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_199": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_272": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_406": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_407": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_410": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_59": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_68": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_68": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_194": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_194": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_409": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_475": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_292": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, labels, args.max_seq_length, tokenizer, cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args.model_type in ['roberta']), pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0, pad_token_label_id=pad_token_label_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__149": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_squad.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_84": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_113": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_117": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_222": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_306": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_336": {
                "variable": {
                    "value": "all_example_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_337": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_342": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_464": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_465": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_468": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_217": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_217": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_467": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_537": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_324": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, pad_token_segment_id=3 if args.model_type in ['xlnet'] else 0, cls_token_at_end=True if args.model_type in ['xlnet'] else False, sequence_a_is_doc=True if args.model_type in ['xlnet'] else False)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__167": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__169": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/run_summarization_finetuning.py": {
        "torch": {
            "tensor_83": {
                "variable": {
                    "value": "stories",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[story for (story, summary) in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[summary for (story, summary) in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RandomSampler_169": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "model_collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functools.partial(collate, tokenizer=tokenizer, block_size=512)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_273": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_313": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_280": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model2Model.from_pretrained(args.model_name_or_path, decoder_model=decoder_model)",
                            "Call"
                        ],
                        [
                            "PreTrainedEncoderDecoder.from_pretrained(encoder_checkpoint, decoder_checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_423": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_426": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_427": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_313": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_472": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_arguments.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['encoder']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'encoder': 0.002, 'decoder': 0.2}",
                            "Dict"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_129": {
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['decoder']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'encoder': 0.002, 'decoder': 0.2}",
                            "Dict"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__247": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/examples/utils_summarization.py": {
        "torch": {
            "ones_like_130": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "data": {
                    "value": "batch_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/examples/utils_summarization_test.py": {
        "torch": {
            "tensor_92": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, 23, 23, 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8, 2, 3, 4, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4, 5, 6], [1, 2, 3, 101, 5, 6], [1, 101, 3, 4, 101, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/templates/adding_a_new_example_script/run_xxx.py": {
        "torch": {
            "DataLoader_86": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_82": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_296": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_322": {
                "variable": {
                    "value": "all_example_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_323": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_328": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_450": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_451": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_454": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_85": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_85": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_215": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_215": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_453": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_523": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_310": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__165": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__167": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/templates/adding_a_new_model/convert_xxx_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/convert_bert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/convert_gpt2_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/convert_openai_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/convert_roberta_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_70": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_144": {
                "variable": {
                    "value": "max_absolute_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(our_output - their_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_146": {
                "variable": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_144": {
                "input": {
                    "value": "our_output - their_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/convert_transfo_xl_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_60": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/convert_xlm_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xlm_checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_58": {
                "obj": {
                    "value": "two_levels_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/convert_xlnet_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_69": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/modeling_beam_search.py": {
        "torch": {
            "arange_63": {
                "variable": {
                    "value": "self.batch_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_64": {
                "variable": {
                    "value": "self.beam_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * self.beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_67": {
                "variable": {
                    "value": "self.growing_beam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size * self.beam_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "self.topk_log_probabilities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (self.beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "self.growing_beam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.growing_beam.index_select(0, surviving_beams_rows), topk_token_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_207": {
                "variable": {
                    "value": "self.growing_beam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size * self.beam_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_213": {
                "variable": {
                    "value": "log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_ctrl.py": {
        "torch": {
            "sin_52": {
                "variable": {
                    "value": "sines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_53": {
                "variable": {
                    "value": "cosines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sines, cosines]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / np.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(scaled_attention_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((past_value, v), dim=-2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_116": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "*args": {
                    "value": "torch.nn.Linear(d_model_size, dff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_144": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_145": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_286": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_288": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_289": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config.n_embd, config.n_head, config.dff, config.resid_pdrop, config.output_attentions) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_294": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_376": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(seq_len, seq_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_43": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2 * (i // 2) / d_model_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_49": {
                "start": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dff",
                            "Method Argument"
                        ],
                        [
                            "dff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "dff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dff",
                            "Method Argument"
                        ],
                        [
                            "dff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_329": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_496": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_376": {
                "*size": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/modeling_distilbert.py": {
        "torch": {
            "Embedding_67": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_74": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_90": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_123": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_228": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_231": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_523": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_524": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_529": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_593": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_595": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_668": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_670": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_746": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_747": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_457": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_699": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_766": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_51": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_182": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_614": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_617": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_encoder_decoder.py": {
        "torch": {
            "LSTM_308": {
                "variable": {
                    "value": "kwargs[decoder_model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "kwargs.pop('decoder_config')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_openai.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(names, init_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_229": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_242": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_244": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_360": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_361": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_362": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_363": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_500": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_394": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_524": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_615": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_622": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_118": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_134": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_179": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_156": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_roberta.py": {
        "torch": {
            "Embedding_49": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_433": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_505": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_506": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_546": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_547": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_548": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_554": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_65": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_253": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_457": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_527": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_269": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_342": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_345": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "cat_314": {
                "variable": {
                    "value": "all_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_53": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_83": {
                "variable": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_273": {
                "variable": {
                    "value": "log_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_214": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_325": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_327": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_179": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_252": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_utils.py": {
        "torch": {
            "Linear_804": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_196": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "new_num_tokens",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_embeddings.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_481": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_483": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_484": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_488": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_521": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_522": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_523": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_524": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_564": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_565": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_566": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_738": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_746": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_750": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_754": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_391": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_668": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_687": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_689": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_691": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_697": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_699": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_703": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_744": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_748": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_752": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_756": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_484": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_546": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_597": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_676": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_773": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/modeling_xlm.py": {
        "torch": {
            "arange_76": {
                "variable": {
                    "value": "alen",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_120": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_186": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_379": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_384": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_385": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_388": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_389": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_506": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_784": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_383": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_460": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_521": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_570": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_819": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_69": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_586": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.n_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_724": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_727": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_398": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_403": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/optimization.py": {
        "torch": {
            "LambdaLR_30": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_42": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_54": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_68": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_84": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_135": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_common_test.py": {
        "torch": {
            "tensor_773": {
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_789": {
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_235": {
                "variable": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.model_tester.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_tester.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_193": {
                "variable": {
                    "value": "traced_gpt2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(tmpdirname)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.lm_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.double_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class.from_pretrained(model_name, cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_loading_info=True)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_199": {
                "variable": {
                    "value": "loaded_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "traced_model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trace_188": {
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(tmpdirname)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.lm_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.double_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class.from_pretrained(model_name, cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_loading_info=True)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_194": {
                "obj": {
                    "value": "traced_gpt2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "traced_model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_475": {
                "num_embeddings": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "torch.isnan(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_256": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attentions",
                            "variable"
                        ]
                    ]
                }
            },
            "isnan_255": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attentions",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_roberta_test.py": {
        "torch": {
            "tensor_214": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_222": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_238": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_258": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_228": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_244": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_260": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-0.9469, 0.3913, 0.5118]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_transfo_xl_test.py": {
        "torch": {
            "manual_seed_110": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/modeling_xlnet_test.py": {
        "torch": {
            "zeros_102": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seq_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_136": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformers/tests/optimization_test.py": {
        "torch": {
            "tensor_69": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_71": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_55": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformers/transformers/tests/tokenization_transfo_xl_test.py": {
        "torch": {}
    },
    "transformers/transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_475": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_555": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_100": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_152": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vocab_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_203": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_480": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_482": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_484": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_577": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "web-demo/demo_service.py": {
        "torch": {
            "device_28": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_123": {
                "type": {
                    "value": "style_mapping[data['target_style']]['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}