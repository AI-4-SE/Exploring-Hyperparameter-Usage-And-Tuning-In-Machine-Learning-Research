{
    "c2/lib/utils/metric.py": {
        "sklearn": {
            "roc_auc_score_39": {
                "variable": {
                    "value": "mean_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets[:, ~np.all(targets == 0, axis=0)]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts[:, ~np.all(targets == 0, axis=0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_46": {
                "variable": {
                    "value": "aps",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets[:, ~np.all(targets == 0, axis=0)]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts[:, ~np.all(targets == 0, axis=0)]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "pt/tests/test_models.py": {
        "torch": {
            "rand_7": {
                "variable": {
                    "value": "test_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "test_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "test_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/common/log.py": {
        "torch": {
            "SummaryWriter_238": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "save_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/common/sampler.py": {
        "torch": {
            "Generator_33": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(idxs).tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(idxs)",
                            "Call"
                        ],
                        [
                            "idxs[perm].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(idxs).tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(idxs)",
                            "Call"
                        ],
                        [
                            "idxs[perm].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_119": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(idxs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_36": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_82": {
                "start": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(c)",
                            "Call"
                        ],
                        [
                            "len(c)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_114": {
                "n": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(c)",
                            "Call"
                        ],
                        [
                            "len(c)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pt/vmz/common/scheduler.py": {
        "torch": {}
    },
    "pt/vmz/common/transforms.py": {
        "torch": {
            "as_tensor_118": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean, dtype=clip.dtype, device=clip.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "clip.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "clip.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_119": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(std, dtype=clip.dtype, device=clip.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "clip.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "clip.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_54": {
                "input": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "crop(clip, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "resize(clip, size, interpolation_mode)",
                            "Call"
                        ],
                        [
                            "clip.clone()",
                            "Call"
                        ],
                        [
                            "hflip(clip)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "target_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "interpolation_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_21": {
                "obj": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "crop(clip, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "resize(clip, size, interpolation_mode)",
                            "Call"
                        ],
                        [
                            "clip.clone()",
                            "Call"
                        ],
                        [
                            "hflip(clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_258": {
                "start": {
                    "value": "self.num_frames",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_249": {
                "start": {
                    "value": "self.num_frames",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/common/utils.py": {
        "torch": {
            "set_device_99": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/datasets/data.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.val_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.train_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/func/feats.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_dataset(args, transform_test, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "available_models[args.model](pretraining=args.pretrained)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_113": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_from_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_57": {
                "obj": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "sp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'features.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_85": {
                "variable": {
                    "value": "metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.val_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/func/test.py": {
        "torch": {
            "stack_26": {
                "variable": {
                    "value": "output_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mean(torch.stack(softmaxes[sms]), 0, keepdim=False) for sms in softmaxes.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "output_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels[video_id] for video_id in softmaxes.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_dataset(args, transform_test, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "UniformClipSampler(dataset_test.video_clips, args.val_clips_per_video)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "available_models[args.model](pretraining=args.pretrained)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_153": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_22": {
                "obj": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "/private/home/bkorbar/torch_projects/VMZ/pt/LABELs.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_23": {
                "obj": {
                    "value": "softmaxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "/private/home/bkorbar/torch_projects/VMZ/pt/SM.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.val_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_from_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "torch.stack(softmaxes[sms])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "softmaxes[sms]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/func/train.py": {
        "torch": {
            "device_112": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_dataset(args, transform_test, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "UniformClipSampler(dataset_test.video_clips, args.val_clips_per_video)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(test_sampler)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_174": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_210": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.stem.parameters(), 'lr': 0}, {'params': model.layer1.parameters(), 'lr': args.l1_lr * args.world_size}, {'params': model.layer2.parameters(), 'lr': args.l2_lr * args.world_size}, {'params': model.layer3.parameters(), 'lr': args.l3_lr * args.world_size}, {'params': model.layer4.parameters(), 'lr': args.l4_lr * args.world_size}, {'params': model.fc.parameters(), 'lr': args.fc_lr * args.world_size}]",
                            "List"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.lr * args.world_size",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_dataset(args, transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomClipSampler(dataset.video_clips, args.train_bs_multiplier)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_sampler)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_from_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_finetune_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_245": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "available_models[args.model](pretraining=args.pretrained)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pt/vmz/models/csn.py": {
        "torch": {}
    },
    "pt/vmz/models/r2plus1d.py": {
        "torch": {}
    },
    "pt/vmz/models/utils.py": {
        "torch": {
            "Conv3d_48": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_56": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_58": {
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_76": {
                "num_features": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "in_channels": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_86": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_88": {
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_116": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_117": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_134": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "midplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_142": {
                "num_features": {
                    "value": "midplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_144": {
                "in_channels": {
                    "value": "midplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/model_conversion/conversion_models.py": {
        "torch": {
            "Conv3d_15": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_23": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_25": {
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_56": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_57": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_74": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "midplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "num_features": {
                    "value": "midplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_84": {
                "in_channels": {
                    "value": "midplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/model_conversion/convert_models.py": {
        "torch": {
            "rand_280": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.frames",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.inputsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.inputsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_281": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out.with_suffix('.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_285": {
                "f": {
                    "value": "args.out.with_suffix('.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_238": {
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_240": {
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_241": {
                "input": {
                    "value": "m.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_242": {
                "input": {
                    "value": "m.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_243": {
                "input": {
                    "value": "m.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_245": {
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_246": {
                "input": {
                    "value": "m.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}