{
    "transnet.py": {
        "tensorflow": {
            "Saver_77": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.params.INPUT_HEIGHT, self.params.INPUT_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.inputs, dtype=tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(net, shape=shape, name='flatten_3d')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(self.params.D, activation=tf.nn.relu)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool3D(pool_size=(1, 2, 2))(net)",
                            "Call"
                        ],
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv1, conv2, conv3, conv4], axis=4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.shape(net)[0], tf.shape(net)[1], np.prod(net.get_shape().as_list()[2:])]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "flatten_3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "TransNet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "units": {
                    "value": "self.params.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_33": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** idx_l * self.params.F",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(dilation_rate, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv3D_{:d}'.format(dilation_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "'SDDCNN_{:d}'.format(idx_l + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.inputs, dtype=tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(net, shape=shape, name='flatten_3d')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(self.params.D, activation=tf.nn.relu)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool3D(pool_size=(1, 2, 2))(net)",
                            "Call"
                        ],
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv1, conv2, conv3, conv4], axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_49": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.inputs, dtype=tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(net, shape=shape, name='flatten_3d')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(self.params.D, activation=tf.nn.relu)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool3D(pool_size=(1, 2, 2))(net)",
                            "Call"
                        ],
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv1, conv2, conv3, conv4], axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_54": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv1, conv2, conv3, conv4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3D_57": {
                "pool_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "'DDCNN_{:d}'.format(idx_s + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}