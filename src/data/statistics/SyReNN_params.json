{
    "scripts/keras_to_syrenn.py": {
        "tensorflow": {}
    },
    "scripts/keras_to_syrenn_example.py": {
        "tensorflow": {
            "Sequential_9": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.Dense(2, activation='relu', name='layer1'), keras.layers.Dense(3, activation=None, name='layer2'), keras.layers.Dense(4, name='layer3')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_11": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_12": {
                "units": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_13": {
                "units": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/eran_bmc/experiment.py": {
        "tensorflow": {}
    },
    "third_party/eran_preconditions/experiment.py": {
        "tensorflow": {}
    },
    "pysyrenn/frontend/argmax_layer.py": {
        "torch": {
            "max_17": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/averagepool_layer.py": {
        "torch": {
            "avg_pool2d_35": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.window_data.window_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.window_data.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.window_data.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/concat_layer.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "computed_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[layer.compute(inputs).reshape((-1, layer.window_data.out_channels)) for layer in self.input_layers]",
                            "ListComp"
                        ],
                        [
                            "[layer.compute(inputs) for layer in self.input_layers]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/conv2d_layer.py": {
        "torch": {
            "tensor_16": {
                "variable": {
                    "value": "self.filter_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "filter_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.biases",
                            "Attribute"
                        ],
                        [
                            "torch.zeros_like(biases)",
                            "Call"
                        ],
                        [
                            "self.biases.numpy()",
                            "Call"
                        ],
                        [
                            "np.array(serialized.conv2d_data.biases)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter_weights.permute((3, 2, 0, 1))",
                            "Call"
                        ],
                        [
                            "self.filter_weights.numpy()",
                            "Call"
                        ],
                        [
                            "np.array(serialized.conv2d_data.filters)",
                            "Call"
                        ],
                        [
                            "filters.reshape(window_data.window_shape + (window_data.input_shape[2], window_data.out_channels))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.biases",
                            "Attribute"
                        ],
                        [
                            "torch.zeros_like(biases)",
                            "Call"
                        ],
                        [
                            "self.biases.numpy()",
                            "Call"
                        ],
                        [
                            "np.array(serialized.conv2d_data.biases)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.window_data.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.window_data.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.biases",
                            "Attribute"
                        ],
                        [
                            "torch.zeros_like(biases)",
                            "Call"
                        ],
                        [
                            "self.biases.numpy()",
                            "Call"
                        ],
                        [
                            "np.array(serialized.conv2d_data.biases)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pysyrenn/frontend/fullyconnected_layer.py": {
        "torch": {
            "mm_29": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(serialized.fullyconnected_data.weights)",
                            "Call"
                        ],
                        [
                            "weights.reshape((-1, len(biases)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(serialized.fullyconnected_data.biases)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/hard_tanh_layer.py": {
        "torch": {
            "hardtanh_17": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/maxpool_layer.py": {
        "torch": {
            "max_pool2d_34": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.window_data.window_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.window_data.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.window_data.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "return_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_71": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_72": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.flatten(indices, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.window_data.unflatten_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/network.py": {
        "torch": {
            "tensor_77": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "node.input",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.compute(input_tensor)[:, label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/normalize_layer.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(serialized.normalize_data.means)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.standard_deviations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "standard_deviations",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "inputs.reshape((-1, len(self.means)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/relu_layer.py": {
        "torch": {
            "relu_17": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pysyrenn/frontend/tests/argmax_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/averagepool_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/concat_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/conv2d_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/fullyconnected_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/hard_tanh_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/maxpool_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/network.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/normalize_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/relu_layer.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/strided_window_data.py": {
        "torch": {}
    },
    "pysyrenn/frontend/tests/transformer_client.py": {
        "torch": {}
    },
    "pysyrenn/helpers/tests/classify_lines.py": {
        "torch": {}
    },
    "pysyrenn/helpers/tests/classify_planes.py": {
        "torch": {}
    },
    "pysyrenn/helpers/tests/integrated_gradients.py": {
        "torch": {}
    }
}