{
    "soft_intro_vae_3d/metrics/jsd.py": {
        "sklearn": {
            "NearestNeighbors_117": {
                "variable": {
                    "value": "nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "style_soft_intro_vae/dataset_preparation/dataset_tool.py": {
        "tensorflow": {
            "parse_single_example_34": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.python_io.tf_record_iterator(tfr_file, tfr_opt)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'shape': tf.FixedLenFeature([3], tf.int64), 'data': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_37": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_42": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_38": {
                "tensor": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "ex.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ],
                        [
                            "pickle.load(file, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(file, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(file, encoding='latin1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TFRecordOptions_90": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self._tf_minibatch_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "shape": {
                    "value": "[minibatch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_207": {
                "variable": {
                    "value": "self._tf_minibatch_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.int32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_208": {
                "variable": {
                    "value": "self._tf_lod_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.int32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lod_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_217": {
                "x": {
                    "value": "self._tf_lod_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "shape": {
                    "value": "[minibatch] + shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "shape": {
                    "value": "[minibatch, self.label_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_315": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_325": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tf_record_iterator_91": {
                "path": {
                    "value": "tfr_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tfr_files",
                            "Name"
                        ],
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ],
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "Dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_128": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordDataset_135": {
                "variable": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfr_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tfr_files",
                            "Name"
                        ],
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_mb << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_206": {
                "name": {
                    "value": "Dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_216": {
                "name": {
                    "value": "SyntheticDataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "SyntheticDataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_35": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_36": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_175": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_176": {
                "params": {
                    "value": "self._tf_labels_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.random_uniform([minibatch_size], 0, self._np_labels.shape[0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_318": {
                "path": {
                    "value": "tfr_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tfr_files",
                            "Name"
                        ],
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ],
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_325": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_326": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=quant.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_327": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[quant.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_326": {
                "value": {
                    "value": "quant.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_327": {
                "value": {
                    "value": "[quant.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/dataset_preparation/prepare_celeba_hq_tfrecords.py": {
        "tensorflow": {
            "TFRecordOptions_141": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_144": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path % (lod, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_151": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_151": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_152": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=img.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_153": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_154": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[img.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_152": {
                "value": {
                    "value": "img.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_153": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_154": {
                "value": {
                    "value": "[img.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_157": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.asarray(img, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_158": {
                "variable": {
                    "value": "image_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(np.asarray(img, dtype=np.float32)).view(1, 3, img.shape[1], img.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/dataset_preparation/split_tfrecords_ffhq.py": {
        "tensorflow": {
            "TFRecordDataset_106": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_path % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_116": {
                "path": {
                    "value": "part_path",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (i, part_num)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (i, part_num - cfg.DATASET.PART_COUNT)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TFRecordWriter_122": {
                "path": {
                    "value": "part_path",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (i, part_num)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (i, part_num - cfg.DATASET.PART_COUNT)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "soft_intro_vae/dataset.py": {
        "torch": {}
    },
    "soft_intro_vae/main.py": {
        "torch": {
            "device_45": {
                "type": {
                    "value": "'cuda:' + str(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae/metrics/fid_score.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_95": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ],
                        [
                            "model_s.sample(noise_batch)",
                            "Call"
                        ],
                        [
                            "images.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.clip(images * 255, 0, 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "images / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_157": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_214": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_246": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, model_s.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ],
                        [
                            "model_s.sample(noise_batch)",
                            "Call"
                        ],
                        [
                            "images.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.clip(images * 255, 0, 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "images / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_329": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_355": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_381": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_490": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_497": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, model.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_146": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_196": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(res, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae/metrics/inception.py": {
        "torch": {
            "ModuleList_80": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_227": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_256": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_290": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_326": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_101": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_125": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae/train_soft_intro_vae.py": {
        "torch": {
            "exp_263": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_264": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_312": {
                "variable": {
                    "value": "image_to_show",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[x for x in os.listdir(data_root) if is_image_file(x)]",
                            "ListComp"
                        ],
                        [
                            "[x for x in os.listdir(data_root) if is_image_file(x)]",
                            "ListComp"
                        ],
                        [
                            "[x for x in os.listdir(data_root) if is_image_file(x)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_317": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "mu.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_450": {
                "variable": {
                    "value": "optimizer_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_451": {
                "variable": {
                    "value": "optimizer_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_453": {
                "variable": {
                    "value": "e_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.encoder.parameters(), lr=lr_e)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "(350,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_454": {
                "variable": {
                    "value": "d_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.decoder.parameters(), lr=lr_d)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "(350,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_458": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CIFAR10(root='./cifar10_ds', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "ImageDatasetFromFile(train_list, data_root, input_height=None, crop_height=None, output_height=output_height, is_mirror=True)",
                            "Call"
                        ],
                        [
                            "ImageDatasetFromFile(train_list, data_root, input_height=None, crop_height=None, output_height=output_height, is_mirror=True)",
                            "Call"
                        ],
                        [
                            "ImageDatasetFromFile(train_list, data_root, input_height=None, crop_height=None, output_height=output_height, is_mirror=True)",
                            "Call"
                        ],
                        [
                            "DigitalMonstersDataset(root_path=data_root, output_height=image_size)",
                            "Call"
                        ],
                        [
                            "SVHN(root='./svhn', split='train', transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(root='./fmnist_ds', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "MNIST(root='./mnist_ds', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_720": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "midc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outc * scale)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "midc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outc * scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_59": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "midc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outc * scale)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_63": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cdim, cc, 5, 1, 2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_208": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "mu_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mu_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(mu_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "logvar_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logvar_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logvar_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_248": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-0.5 * (1 + logvar - logvar_o - logvar.exp() / torch.exp(logvar_o) - (mu - mu_o).pow(2) / torch.exp(logvar_o)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_282": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(recon_x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_out_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./saves/' + prefix + 'model_epoch_{}_iter_{}.pth'.format(epoch, iteration)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_341": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_fc_features + self.cond_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * zdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_fc_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.zeros(self.conv_output_size).view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "cc * 4 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.conv_input_size).view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * zdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, o_cond]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(zdim + self.cond_dim, num_fc_features)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(zdim, num_fc_features)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, y_cond]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_207": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_250": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-0.5 * (1 + logvar - logvar_o - logvar.exp() / torch.exp(logvar_o) - (mu - mu_o).pow(2) / torch.exp(logvar_o)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_289": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(recon_x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_370": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_371": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "current_device_719": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_74": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(output, identity_data))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "identity_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_expand(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "cdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "channels[0]",
                            "Subscript"
                        ],
                        [
                            "channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "cc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "channels[0]",
                            "Subscript"
                        ],
                        [
                            "channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LeakyReLU_91": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "cc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "channels[0]",
                            "Subscript"
                        ],
                        [
                            "channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_291": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(recon_x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_547": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b_size, z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_679": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b_size, z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_720": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_98": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "self.conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "zdim + self.cond_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_fc_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.zeros(self.conv_output_size).view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "cc * 4 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.conv_input_size).view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "zdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_fc_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.zeros(self.conv_output_size).view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "cc * 4 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.conv_input_size).view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_155": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "self.conv_input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_625": {
                "input": {
                    "value": "lossE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lossE_real + lossE_fake",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_245": {
                "input": {
                    "value": "logvar_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logvar_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_683": {
                "tensors": {
                    "value": "[real_batch[:max_imgs], rec_det[:max_imgs], fake[:max_imgs]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_539": {
                "tensors": {
                    "value": "[real_batch, rec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_645": {
                "tensors": {
                    "value": "[real_batch[:max_imgs], rec_det[:max_imgs], fake[:max_imgs]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_2d/main.py": {
        "torch": {
            "device_41": {
                "type": {
                    "value": "'cuda:' + str(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_2d/train_soft_intro_vae_2d.py": {
        "torch": {
            "randn_125": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_194": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_195": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_200": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_218": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-range_lim",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "range_lim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_pts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_219": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx.flatten(), yy.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "p_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zzk",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zzk + [zzk_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_327": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1024, model.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "elbos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elbos",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(elbos, dim=0)",
                            "Call"
                        ],
                        [
                            "elbos / normalizing_factor",
                            "BinOp"
                        ],
                        [
                            "elbos + [1.0 * (beta_kl * kl + beta_recon * recon_error)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "normalizing_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elbos_grid, elbos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "normalizing_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "real_hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "real_hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(real_hist).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_386": {
                "variable": {
                    "value": "fake_hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fake_hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(fake_hist).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_507": {
                "variable": {
                    "value": "optimizer_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_508": {
                "variable": {
                    "value": "optimizer_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_511": {
                "variable": {
                    "value": "e_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.encoder.parameters(), lr=lr_e)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(10000, 15000)",
                            "Tuple"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_512": {
                "variable": {
                    "value": "d_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.decoder.parameters(), lr=lr_d)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(10000, 15000)",
                            "Tuple"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_738": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(scale * x, scale * y) for (x, y) in centers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_out_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./saves/' + prefix + 'model_epoch_{}_iter_{}.pth'.format(epoch, iteration)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_217": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_233": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_275": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 3",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([circ4_x, circ3_x, circ2_x, circ1_x]), torch.cat([circ4_y, circ3_y, circ2_y, circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "range(-2, 3)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "calc_kl(logvar=logvar, mu=mu, reduce='none')",
                            "Call"
                        ],
                        [
                            "-0.5 * (1 + logvar - mu.pow(2) - logvar.exp() + 2 * mu * mu_o - mu_o.pow(2)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * (1 + logvar - mu.pow(2) - logvar.exp()).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ],
                        [
                            "calc_kl(logvar=logvar, mu=mu, reduce='none')",
                            "Call"
                        ],
                        [
                            "calc_kl(logvar=logvar, mu=mu, reduce='none')",
                            "Call"
                        ],
                        [
                            "F.kl_div(torch.log(fake_hist + 1e-14), real_hist, reduction='batchmean')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_346": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "elbos_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zzk",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zzk + [zzk_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_376": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_388": {
                "variable": {
                    "value": "kl_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(real_hist + 1e-14)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "0.5 * (fake_hist + real_hist)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_389": {
                "variable": {
                    "value": "kl_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(fake_hist + 1e-14)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "0.5 * (fake_hist + real_hist)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_393": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(fake_hist + 1e-14)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "real_hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(real_hist).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_432": {
                "variable": {
                    "value": "self.loggamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_474": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_489": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_282": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 3",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([circ4_x, circ3_x, circ2_x, circ1_x]), torch.cat([circ4_y, circ3_y, circ2_y, circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "range(-2, 3)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_307": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "calc_kl(logvar=logvar, mu=mu, reduce='none')",
                            "Call"
                        ],
                        [
                            "-0.5 * (1 + logvar - mu.pow(2) - logvar.exp() + 2 * mu * mu_o - mu_o.pow(2)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * (1 + logvar - mu.pow(2) - logvar.exp()).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ],
                        [
                            "calc_kl(logvar=logvar, mu=mu, reduce='none')",
                            "Call"
                        ],
                        [
                            "calc_kl(logvar=logvar, mu=mu, reduce='none')",
                            "Call"
                        ],
                        [
                            "F.kl_div(torch.log(fake_hist + 1e-14), real_hist, reduction='batchmean')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_473": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_493": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "92",
                            "Constant"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_494": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "92",
                            "Constant"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_557": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b_size, z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_666": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1024, z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_284": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 3",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([circ4_x, circ3_x, circ2_x, circ1_x]), torch.cat([circ4_y, circ3_y, circ2_y, circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "range(-2, 3)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_337": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_388": {
                "input": {
                    "value": "real_hist + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_389": {
                "input": {
                    "value": "fake_hist + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_393": {
                "input": {
                    "value": "fake_hist + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "in_features": {
                    "value": "x_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_412": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_416": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "zdim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_432": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "in_features": {
                    "value": "zdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_436": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_711": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_158": {
                "variable": {
                    "value": "circ4_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linspace4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples4 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_159": {
                "variable": {
                    "value": "circ4_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linspace4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples4 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_414": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_415": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_438": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_439": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_656": {
                "input": {
                    "value": "lossD",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta_rec * loss_rec + 0.5 * beta_kl * (fake_kl + rec_kl) + gamma_r * 0.5 * beta_rec * (loss_rec_rec + loss_rec_fake)",
                            "BinOp"
                        ],
                        [
                            "dim_scale * lossD",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randint_132": {
                "low": {
                    "value": "len(centers)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_136": {
                "*size": {
                    "value": "n_samples // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_137": {
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.rand(n_samples // 2)) * 540 * (2 * np.pi) / 360",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_137": {
                "*size": {
                    "value": "n_samples // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_144": {
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_135": {
                "input": {
                    "value": "torch.rand(n_samples // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_136": {
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.rand(n_samples // 2)) * 540 * (2 * np.pi) / 360",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "[d1x, d1y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_139": {
                "tensors": {
                    "value": "[-d1x, -d1y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_143": {
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_144": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_153": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_154": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_155": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_156": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_samples1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_160": {
                "input": {
                    "value": "linspace4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples4 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_161": {
                "input": {
                    "value": "linspace3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples3 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_162": {
                "input": {
                    "value": "linspace2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples2 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_163": {
                "input": {
                    "value": "linspace2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples2 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_164": {
                "input": {
                    "value": "linspace1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples1 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_165": {
                "input": {
                    "value": "linspace1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, n_samples1 + 1)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "[torch.cat([circ4_x, circ3_x, circ2_x, circ1_x]), torch.cat([circ4_y, circ3_y, circ2_y, circ1_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_171": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_174": {
                "mean": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.08 * torch.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_693": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_135": {
                "*size": {
                    "value": "n_samples // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[circ4_x, circ3_x, circ2_x, circ1_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[circ4_y, circ3_y, circ2_y, circ1_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 3",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([circ4_x, circ3_x, circ2_x, circ1_x]), torch.cat([circ4_y, circ3_y, circ2_y, circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "range(-2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_174": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.stack([d1x, d1y], dim=1), torch.stack([-d1x, -d1y], dim=1)], dim=0) / 3",
                            "BinOp"
                        ],
                        [
                            "torch.stack([torch.cat([circ4_x, circ3_x, circ2_x, circ1_x]), torch.cat([circ4_y, circ3_y, circ2_y, circ1_y])], dim=1) * 3.0",
                            "BinOp"
                        ],
                        [
                            "x[torch.randint(0, n_samples, size=(n_samples,))]",
                            "Subscript"
                        ],
                        [
                            "torch.linspace(-range_lim, range_lim, n_pts)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "range(-2, 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "soft_intro_vae_3d/datasets/modelnet40.py": {
        "torch": {}
    },
    "soft_intro_vae_3d/datasets/shapenet.py": {
        "torch": {}
    },
    "soft_intro_vae_3d/datasets/transforms.py": {
        "torch": {
            "matmul_35": {
                "variable": {
                    "value": "data.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.pos.view(-1, 1) if data.pos.dim() == 1 else data.pos",
                            "IfExp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.matrix.to(pos.dtype).to(pos.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "matrix",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[cos, sin], [-sin, cos]]",
                            "List"
                        ],
                        [
                            "[[1, 0, 0], [0, cos, sin], [0, -sin, cos]]",
                            "List"
                        ],
                        [
                            "[[cos, 0, -sin], [0, 1, 0], [sin, 0, cos]]",
                            "List"
                        ],
                        [
                            "[[cos, sin, 0], [-sin, cos, 0], [0, 0, 1]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "soft_intro_vae_3d/datasets/transforms3d.py": {
        "torch": {
            "unbind_41": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "random_quaternions(n, dtype=dtype, device=device, requires_grad=requires_grad)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cos(half_angles), axis_angle * sin_half_angles_over_angles], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(1 - two_s * (j * j + k * k), two_s * (i * j - k * r), two_s * (i * k + j * r), two_s * (i * j + k * r), 1 - two_s * (i * i + k * k), two_s * (j * k - i * r), two_s * (i * k - j * r), two_s * (j * k + i * r), 1 - two_s * (i * i + j * j))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * _sqrt_positive_part(1 + m00 - m11 - m22)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_84": {
                "variable": {
                    "value": "ret[positive_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[positive_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_122": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_handle_angle_input(angle, dtype, device, 'RotateAxisAngle')",
                            "Call"
                        ],
                        [
                            "angle / 180.0 * math.pi if degrees else angle",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sin_123": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_handle_angle_input(angle, dtype, device, 'RotateAxisAngle')",
                            "Call"
                        ],
                        [
                            "angle / 180.0 * math.pi if degrees else angle",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_like_124": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_handle_angle_input(angle, dtype, device, 'RotateAxisAngle')",
                            "Call"
                        ],
                        [
                            "angle / 180.0 * math.pi if degrees else angle",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_125": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_handle_angle_input(angle, dtype, device, 'RotateAxisAngle')",
                            "Call"
                        ],
                        [
                            "angle / 180.0 * math.pi if degrees else angle",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_256": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "matrix.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unbind_323": {
                "variable": {
                    "value": "(aw, ax, ay, az)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a[None]",
                            "Subscript"
                        ],
                        [
                            "a.expand(len(b), -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_324": {
                "variable": {
                    "value": "(bw, bx, by, bz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b.expand(len(a), -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "point_as_quaternion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_parts, point)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_421": {
                "variable": {
                    "value": "angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "axis_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_like_425": {
                "variable": {
                    "value": "sin_half_angles_over_angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(axis_angle, p=2, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "2 * half_angles",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_434": {
                "variable": {
                    "value": "quaternions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(half_angles), axis_angle * sin_half_angles_over_angles]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_452": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternions[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan2_453": {
                "variable": {
                    "value": "half_angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(quaternions[..., 1:], p=2, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "quaternions[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_like_457": {
                "variable": {
                    "value": "sin_half_angles_over_angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(axis_angle, p=2, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "2 * half_angles",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_484": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_486": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a2 - (b1 * a2).sum(-1, keepdim=True) * b1",
                            "BinOp"
                        ],
                        [
                            "F.normalize(b2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_487": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(a1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a2 - (b1 * a2).sum(-1, keepdim=True) * b1",
                            "BinOp"
                        ],
                        [
                            "F.normalize(b2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1085": {
                "variable": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[_handle_coord(c, dtype, device) for c in [x, y, z]]",
                            "ListComp"
                        ],
                        [
                            "[c.expand(N) for c in xyz]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(xyz, dim=1)",
                            "Call"
                        ],
                        [
                            "_handle_input(x, y, z, dtype, device, 'Translate')",
                            "Call"
                        ],
                        [
                            "_handle_input(x, y, z, dtype, device, 'scale', allow_singleton=True)",
                            "Call"
                        ],
                        [
                            "torch.stack([self._matrix[:, i, i] for i in range(4)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_1142": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "R.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "R.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_1144": {
                "variable": {
                    "value": "orthogonal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R.bmm(R.transpose(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "eye",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.eye(3, dtype=R.dtype, device=R.device)",
                            "Call"
                        ],
                        [
                            "eye.view(1, 3, 3).expand(N, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "tol",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "det_1145": {
                "variable": {
                    "value": "det_R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R[None]",
                            "Subscript"
                        ],
                        [
                            "R.to(dtype=dtype).to(device=device)",
                            "Call"
                        ],
                        [
                            "_axis_angle_rotation(axis, angle).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_1146": {
                "variable": {
                    "value": "no_distortion",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.det(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.ones_like(det_R)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_74": {
                "condition": {
                    "value": "signs_differ",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(a < 0) != (b < 0)",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a[None]",
                            "Subscript"
                        ],
                        [
                            "a.expand(len(b), -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "(o0, o1, o2, o3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_134": {
                "tensors": {
                    "value": "R_flat",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(one, zero, zero, zero, cos, -sin, zero, sin, cos)",
                            "Tuple"
                        ],
                        [
                            "(cos, zero, sin, zero, one, zero, -sin, zero, cos)",
                            "Tuple"
                        ],
                        [
                            "(cos, -sin, zero, sin, cos, zero, zero, zero, one)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "input": {
                    "value": "angle.shape + (3, 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_188": {
                "input": {
                    "value": "data[..., i2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "-data[..., i1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "asin_222": {
                "variable": {
                    "value": "central_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix[..., i0, i2] * (-1.0 if i0 - i2 in [-1, 2] else 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_226": {
                "variable": {
                    "value": "central_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix[..., i0, i0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_237": {
                "tensors": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack((1 - two_s * (j * j + k * k), two_s * (i * j - k * r), two_s * (i * k + j * r), two_s * (i * j + k * r), 1 - two_s * (i * i + k * k), two_s * (j * k - i * r), two_s * (i * k - j * r), two_s * (j * k + i * r), 1 - two_s * (i * i + j * j)), -1)",
                            "Call"
                        ],
                        [
                            "(_angle_from_tan(convention[0], convention[1], matrix[..., i2], False, tait_bryan), central_angle, _angle_from_tan(convention[2], convention[1], matrix[..., i0, :], True, tait_bryan))",
                            "Tuple"
                        ],
                        [
                            "torch.randn((n, 4), dtype=dtype, device=device, requires_grad=requires_grad)",
                            "Call"
                        ],
                        [
                            "o / _copysign(torch.sqrt(s), o[:, 0])[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_310": {
                "condition": {
                    "value": "quaternions[..., 0:1] < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-quaternions",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "quaternions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "random_quaternions(n, dtype=dtype, device=device, requires_grad=requires_grad)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cos(half_angles), axis_angle * sin_half_angles_over_angles], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_329": {
                "tensors": {
                    "value": "(ow, ox, oy, oz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_488": {
                "tensors": {
                    "value": "(b1, b2, b3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_745": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t._matrix for t in transforms]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_775": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "max(sizes)",
                            "Call"
                        ],
                        [
                            "R.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "R.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_776": {
                "variable": {
                    "value": "points_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points_batch, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_898": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "matrix.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_934": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "matrix.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_945": {
                "variable": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._matrix[:, i, i] for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_embed_947": {
                "variable": {
                    "value": "imat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ixyz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / xyz",
                            "BinOp"
                        ]
                    ]
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_971": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "matrix.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_1030": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(c, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "c.view(1)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "matrix.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unbind_156": {
                "input": {
                    "value": "euler_angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_185": {
                "input": {
                    "value": "data[..., i1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "data[..., i2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_187": {
                "input": {
                    "value": "-data[..., i2]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "data[..., i1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_427": {
                "input": {
                    "value": "half_angles[~small_angles]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_459": {
                "input": {
                    "value": "half_angles[~small_angles]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_617": {
                "variable": {
                    "value": "self._matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "matrix.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "inverse_694": {
                "input": {
                    "value": "self._matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_718": {
                "variable": {
                    "value": "tinv._matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_matrix()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_1029": {
                "obj": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(c, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "c.view(1)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Name"
                        ]
                    ]
                }
            },
            "is_tensor_1061": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * _sqrt_positive_part(1 + m00 - m11 - m22)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_1098": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * _sqrt_positive_part(1 + m00 - m11 - m22)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_1146": {
                "input": {
                    "value": "det_R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.det(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_435": {
                "input": {
                    "value": "half_angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * angles",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(norms, quaternions[..., :1])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_875": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_878": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_258": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(o * o).sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_783": {
                "input": {
                    "value": "denom.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1e-06",
                            "Constant"
                        ],
                        [
                            "1e-06",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "soft_intro_vae_3d/evaluation/find_best_epoch_on_validation_soft.py": {
        "torch": {
            "DataLoader_97": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ShapeNetDataset(root_dir=train_config['data_dir'], classes=train_config['classes'], split='valid')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dataset.point_clouds_names_valid)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_104": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "model.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "train_config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "train_config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "join(weights_path, f'{epoch:05}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/evaluation/generate_data_for_metrics.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ShapeNetDataset(root_dir=train_config['data_dir'], classes=train_config['classes'], split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dataset.point_clouds_names_test)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "train_config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_34": {
                "seed": {
                    "value": "train_config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "path_to_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./results/vae/soft_intro_vae_chair/weights/00350_jsd_0.106.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cuda_setup(config['cuda'], config['gpu'])",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_75": {
                "*size": {
                    "value": "3 * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "model.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/generate_for_rendering.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "interpolations",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "interpolations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[data_z[0][None,]]",
                            "List"
                        ],
                        [
                            "torch.cat(interpolations, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prepare_dataset(config, split='train', batch_size=config['batch_size'])",
                            "Call"
                        ],
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ],
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(dataset[60][0]), torch.from_numpy(dataset[6450][0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_57": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_20": {
                "size": {
                    "value": "(num_samples, model.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_59": {
                "f": {
                    "value": "path_to_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./results/vae/soft_intro_vae_chair/weights/01618_jsd_0.0175.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "cuda_setup(config['cuda'], config['gpu'])",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "ndarray": {
                    "value": "dataset[6450][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/losses/chamfer_loss.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_13": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_14": {
                "variable": {
                    "value": "loss_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_15": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_16": {
                "variable": {
                    "value": "loss_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_22": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_23": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_24": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_29": {
                "variable": {
                    "value": "diag_ind_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_30": {
                "variable": {
                    "value": "diag_ind_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/models/vae.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "exp_16": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_17": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=self.z_size, out_features=64, bias=self.use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=3, out_channels=64, kernel_size=1, bias=self.use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.mu_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.std_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=3, out_channels=64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.mu_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.std_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_172": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_216": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_171": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_215": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_59": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_75": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_105": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_110": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_113": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_115": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_118": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_120": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_125": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_128": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/test_model.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ],
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ],
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dataset.point_clouds_names_valid)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_21": {
                "f": {
                    "value": "path_to_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./results/vae/soft_intro_vae_chair/weights/00350_jsd_0.106.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cuda_setup(config['cuda'], config['gpu'])",
                            "Call"
                        ],
                        [
                            "cuda_setup(config['cuda'], config['gpu'])",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_67": {
                "*size": {
                    "value": "3 * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "model.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/train_soft_intro_vae_3d.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ],
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dataset.point_clouds_names_valid)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "points_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'], split=split)",
                            "Call"
                        ],
                        [
                            "ShapeNetDataset(root_dir=config['data_dir'], classes=config['classes'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "config['shuffle']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_188": {
                "variable": {
                    "value": "scheduler_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(optim, config['optimizer']['E']['type'])",
                            "Call"
                        ],
                        [
                            "optimizer_e(model.encoder.parameters(), **config['optimizer']['E']['hyperparams'])",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[350, 450, 550]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_189": {
                "variable": {
                    "value": "scheduler_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(optim, config['optimizer']['D']['type'])",
                            "Call"
                        ],
                        [
                            "optimizer_d(model.decoder.parameters(), **config['optimizer']['D']['hyperparams'])",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[350, 450, 550]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "mu_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mu_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(mu_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "logvar_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logvar_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logvar_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_105": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-0.5 * (1 + logvar - logvar_o - logvar.exp() / torch.exp(logvar_o) - (mu - mu_o).pow(2) / torch.exp(logvar_o)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-0.5 * (1 + logvar - logvar_o - logvar.exp() / torch.exp(logvar_o) - (mu - mu_o).pow(2) / torch.exp(logvar_o)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "3 * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "model.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_192": {
                "f": {
                    "value": "join(weights_path, f'{starting_epoch - 1:05}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_195": {
                "f": {
                    "value": "join(weights_path, f'{starting_epoch - 1:05}_optim_e.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_197": {
                "f": {
                    "value": "join(weights_path, f'{starting_epoch - 1:05}_optim_d.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_445": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_446": {
                "obj": {
                    "value": "optimizer_e.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_optim_e.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_448": {
                "obj": {
                    "value": "optimizer_d.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_optim_d.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_356": {
                "input": {
                    "value": "lossD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scale * (loss_rec * beta_rec + (lossD_rec_kl + lossD_fake_kl) * 0.5 * beta_kl + gamma_r * 0.5 * beta_rec * (loss_rec_rec + loss_fake_rec))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_398": {
                "size": {
                    "value": "(5, model.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_266": {
                "size": {
                    "value": "(config['batch_size'], model.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_442": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_jsd_{jsd:.4f}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_102": {
                "input": {
                    "value": "logvar_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logvar_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_258": {
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_3d/utils/util.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_65": {
                "device": {
                    "value": "gpu_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "soft_intro_vae_bootstrap/dataset.py": {
        "torch": {}
    },
    "soft_intro_vae_bootstrap/main.py": {
        "torch": {
            "device_46": {
                "type": {
                    "value": "'cuda:' + str(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_bootstrap/metrics/fid_score.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_95": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ],
                        [
                            "model_s.sample(noise_batch)",
                            "Call"
                        ],
                        [
                            "images.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.clip(images * 255, 0, 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "images / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_157": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_214": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_246": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, model_s.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ],
                        [
                            "model_s.sample(noise_batch)",
                            "Call"
                        ],
                        [
                            "images.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.clip(images * 255, 0, 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "images / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_329": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_355": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_381": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_490": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_497": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, model.zdim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_146": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_196": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(res, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_bootstrap/metrics/inception.py": {
        "torch": {
            "ModuleList_80": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_227": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_256": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_290": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_326": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_101": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_125": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "soft_intro_vae_bootstrap/train_soft_intro_vae_bootstrap.py": {
        "torch": {
            "exp_286": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_287": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_335": {
                "variable": {
                    "value": "image_to_show",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[x for x in os.listdir(data_root) if is_image_file(x)]",
                            "ListComp"
                        ],
                        [
                            "[x for x in os.listdir(data_root) if is_image_file(x)]",
                            "ListComp"
                        ],
                        [
                            "[x for x in os.listdir(data_root) if is_image_file(x)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_340": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "mu.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_474": {
                "variable": {
                    "value": "optimizer_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_475": {
                "variable": {
                    "value": "optimizer_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_477": {
                "variable": {
                    "value": "e_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.encoder.parameters(), lr=lr_e)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "(350,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_478": {
                "variable": {
                    "value": "d_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.decoder.parameters(), lr=lr_d)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "(350,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_482": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CIFAR10(root='./cifar10_ds', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "ImageDatasetFromFile(train_list, data_root, input_height=None, crop_height=None, output_height=output_height, is_mirror=True)",
                            "Call"
                        ],
                        [
                            "ImageDatasetFromFile(train_list, data_root, input_height=None, crop_height=None, output_height=output_height, is_mirror=True)",
                            "Call"
                        ],
                        [
                            "ImageDatasetFromFile(train_list, data_root, input_height=None, crop_height=None, output_height=output_height, is_mirror=True)",
                            "Call"
                        ],
                        [
                            "DigitalMonstersDataset(root_path=data_root, output_height=image_size)",
                            "Call"
                        ],
                        [
                            "SVHN(root='./svhn', split='train', transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(root='./fmnist_ds', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "MNIST(root='./mnist_ds', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_750": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "midc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outc * scale)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "midc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outc * scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_65": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "midc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outc * scale)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_69": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cdim, cc, 5, 1, 2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_224": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "mu_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mu_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(mu_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "logvar_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logvar_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logvar_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_271": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-0.5 * (1 + logvar - logvar_o - logvar.exp() / torch.exp(logvar_o) - (mu - mu_o).pow(2) / torch.exp(logvar_o)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_305": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(recon_x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_out_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./saves/' + prefix + 'model_epoch_{}_iter_{}.pth'.format(epoch, iteration)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_364": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_fc_features + self.cond_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * zdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_fc_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.zeros(self.conv_output_size).view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "cc * 4 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.conv_input_size).view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * zdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, o_cond]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(zdim + self.cond_dim, num_fc_features)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(zdim, num_fc_features)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, y_cond]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_223": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_273": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-0.5 * (1 + logvar - logvar_o - logvar.exp() / torch.exp(logvar_o) - (mu - mu_o).pow(2) / torch.exp(logvar_o)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(kl)",
                            "Call"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_312": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(recon_x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_394": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_395": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "current_device_749": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_80": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(output, identity_data))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "identity_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_expand(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "cdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "channels[0]",
                            "Subscript"
                        ],
                        [
                            "channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "cc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "channels[0]",
                            "Subscript"
                        ],
                        [
                            "channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LeakyReLU_97": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_98": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "cc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "channels[0]",
                            "Subscript"
                        ],
                        [
                            "channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_314": {
                "variable": {
                    "value": "recon_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_x.view(recon_x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_571": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b_size, z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_710": {
                "variable": {
                    "value": "noise_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b_size, z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_750": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_104": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "self.conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "zdim + self.cond_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_fc_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.zeros(self.conv_output_size).view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "cc * 4 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.conv_input_size).view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "zdim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_fc_features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.zeros(self.conv_output_size).view(-1).shape[0]",
                            "Subscript"
                        ],
                        [
                            "cc * 4 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.conv_input_size).view(-1).shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_161": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_708": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "self.conv_input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_653": {
                "input": {
                    "value": "lossE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lossE_real + lossE_fake",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_268": {
                "input": {
                    "value": "logvar_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logvar_o).to(mu.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_714": {
                "tensors": {
                    "value": "[real_batch[:max_imgs], rec_det[:max_imgs], fake[:max_imgs]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_563": {
                "tensors": {
                    "value": "[real_batch, rec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_673": {
                "tensors": {
                    "value": "[real_batch[:max_imgs], rec_det[:max_imgs], fake[:max_imgs]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/checkpointer.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "last_checkpoint.read().strip()",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, '%s.pth' % _name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_86": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/custom_adam.py": {
        "torch": {
            "zeros_like_68": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/dataloader.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_113": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_136": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_237": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_274": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_126": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_146": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_263": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_300": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/launcher.py": {
        "torch": {
            "current_device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_40": {
                "device": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_85": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_name_87": {
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "style_soft_intro_vae/lod_driver.py": {
        "torch": {}
    },
    "style_soft_intro_vae/lreq.py": {
        "torch": {
            "Parameter_56": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_86": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_88": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_143": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_159": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_149": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_153": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_168": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/make_figures/make_recon_figure_ffhq.py": {
        "torch": {}
    },
    "style_soft_intro_vae/make_figures/make_recon_figure_interpolation.py": {
        "torch": {}
    },
    "style_soft_intro_vae/make_figures/make_recon_figure_interpolation_2_images.py": {
        "torch": {}
    },
    "style_soft_intro_vae/make_figures/make_recon_figure_multires.py": {
        "torch": {}
    },
    "style_soft_intro_vae/make_figures/make_recon_figure_paged.py": {
        "torch": {}
    },
    "style_soft_intro_vae/metrics/fid_score.py": {
        "torch": {
            "adaptive_avg_pool2d_130": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_179": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(res, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(res, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_239": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(res, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(res, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/metrics/inception.py": {
        "torch": {
            "ModuleList_80": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_227": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_256": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_290": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_326": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_101": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_125": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/net.py": {
        "torch": {
            "reshape_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "addcmul_34": {
                "input": {
                    "value": "style[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "style[:, 0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "factor",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "factor",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_69": {
                "variable": {
                    "value": "self.instance_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "startf",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "latent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "latent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "latent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "dlatent_size",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_82": {
                "variable": {
                    "value": "self.instance_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((x - m) ** 2, dim=[2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "style_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "variable": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_146": {
                "variable": {
                    "value": "self.instance_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_153": {
                "variable": {
                    "value": "self.instance_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_181": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_202": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_217": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "styles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_271": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "styles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_284": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_289": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_292": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lerp_294": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "variable": {
                    "value": "styles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_361": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "styles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_374": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_379": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_382": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lerp_384": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "styles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_449": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "styles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_462": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_467": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_470": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lerp_472": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_514": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_522": {
                "variable": {
                    "value": "to_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_570": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "needed_resolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layer_to_resolution[lod]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "lerp_571": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_617": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, 512, 4, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_648": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_680": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_29": {
                "input": {
                    "value": "torch.mean(x.pow(2.0), dim=1, keepdim=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((x - m) ** 2, dim=[2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "style_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_736": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_761": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "(x - m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "addcmul_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([1, 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_174": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_191": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([1, 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_194": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2, tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_514": {},
            "ConvTranspose2d_619": {
                "in_channels": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_620": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_623": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_624": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_627": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_628": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_631": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_653": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_654": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_655": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_657": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_658": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_659": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_661": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_662": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_663": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_665": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_666": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "x.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "(x - m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_172": {
                "*size": {
                    "value": "[1, 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_175": {
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_192": {
                "*size": {
                    "value": "[1, 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_178": {
                "input": {
                    "value": "-x * x / (2.0 * s * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_198": {
                "input": {
                    "value": "-x * x / (2.0 * s * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/scheduler.py": {
        "torch": {}
    },
    "style_soft_intro_vae/style_mixing/stylemix_sandwich.py": {
        "torch": {}
    },
    "style_soft_intro_vae/tracker.py": {
        "torch": {
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_soft_intro_vae/train_style_soft_intro_vae.py": {
        "torch": {}
    },
    "style_soft_intro_vae/utils.py": {
        "torch": {
            "save_46": {
                "obj": {
                    "value": "x.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "x.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}