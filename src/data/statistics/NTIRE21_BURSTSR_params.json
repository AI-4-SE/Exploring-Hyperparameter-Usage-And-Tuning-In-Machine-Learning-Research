{
    "data_processing/camera_pipeline.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "xyz2cams",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xyz2cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[[1.0234, -0.2969, -0.2266], [-0.5625, 1.6328, -0.0469], [-0.0703, 0.2188, 0.6406]], [[0.4913, -0.0541, -0.0202], [-0.613, 1.3513, 0.2906], [-0.1564, 0.2151, 0.7183]], [[0.838, -0.263, -0.0639], [-0.2887, 1.0725, 0.2496], [-0.0627, 0.1427, 0.5438]], [[0.6596, -0.2079, -0.0562], [-0.4782, 1.3016, 0.1933], [-0.097, 0.1581, 0.5181]]]",
                            "List"
                        ],
                        [
                            "torch.tensor(xyz2cams)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_40": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(xyz2cams * weights).sum(dim=0) / weights_sum",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]])",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_90": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ccm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ccm.to(image.device).type_as(image)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.clamp(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "image.view(3, -1)",
                            "Call"
                        ],
                        [
                            "torch.mm(ccm, image)",
                            "Call"
                        ],
                        [
                            "image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.stack((red, green_red, green_blue, blue), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((green_red, red, blue, green_blue), dim=1)",
                            "Call"
                        ],
                        [
                            "image.clamp(0.0, 1.0) * 255",
                            "BinOp"
                        ],
                        [
                            "image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "apply_gains(image, meta_info['rgb_gain'], meta_info['red_gain'], meta_info['blue_gain'])",
                            "Call"
                        ],
                        [
                            "apply_ccm(image, meta_info['cam2rgb'])",
                            "Call"
                        ],
                        [
                            "gamma_compression(image)",
                            "Call"
                        ],
                        [
                            "apply_smoothstep(image)",
                            "Call"
                        ],
                        [
                            "image.clamp(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "df_utils.torch_to_npimage(image)",
                            "Call"
                        ],
                        [
                            "apply_gains(image, meta_info['rgb_gain'], meta_info['red_gain'], meta_info['blue_gain'])",
                            "Call"
                        ],
                        [
                            "demosaic(image)",
                            "Call"
                        ],
                        [
                            "apply_ccm(image, meta_info['cam2rgb'])",
                            "Call"
                        ],
                        [
                            "gamma_compression(image)",
                            "Call"
                        ],
                        [
                            "apply_smoothstep(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_121": {
                "variable": {
                    "value": "safe_gains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask + (1.0 - mask) * gains",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "im_sc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_images, image.shape[-2] * 2, image.shape[-1] * 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(red, green_red, green_blue, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_67": {
                "input": {
                    "value": "torch.asin(1.0 - 2.0 * image) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "[1.0 / red_gain, 1.0, 1.0 / blue_gain]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(green_red, red, blue, green_blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_182": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[red_gain, 1.0, blue_gain]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "[red_gain, 1.0, 1.0, blue_gain]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "asin_67": {
                "input": {
                    "value": "1.0 - 2.0 * image",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_processing/synthetic_burst_generation.py": {
        "torch": {
            "tensor_17": {
                "variable": {
                    "value": "crop_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "crop_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(crop_sz, crop_sz)",
                            "Tuple"
                        ],
                        [
                            "torch.tensor(crop_sz).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_172": {
                "variable": {
                    "value": "(rvs, cvs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(0, image.shape[0]), torch.arange(0, image.shape[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "sample_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cvs, rvs, torch.ones_like(cvs))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_251": {
                "variable": {
                    "value": "burst_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_252": {
                "variable": {
                    "value": "sample_pos_inv_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_pos_inv_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sample_pos_inv_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "frames_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames_crop.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "crop_sz.int().tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "frames_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_69": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "t_mat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.identity(3)",
                            "Call"
                        ],
                        [
                            "t_scale @ t_rot @ t_shear @ t_mat",
                            "BinOp"
                        ],
                        [
                            "t_mat[:2, :]",
                            "Subscript"
                        ],
                        [
                            "get_tmat((image.shape[0], image.shape[1]), translation, theta, shear_factor, scale_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "t_mat_tensor_3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_mat_tensor.float(), torch.tensor([0.0, 0.0, 1.0]).view(1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_226": {
                "variable": {
                    "value": "sample_pos_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_grid.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "t_mat_tensor_inverse.t().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "sample_pos_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample_pos_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sample_grid.view(-1, 3), t_mat_tensor_inverse.t().float()).view(*sample_grid.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "sample_pos_inv[border_crop:-border_crop, border_crop:-border_crop, :]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(sample_pos_inv.numpy(), None, fx=1.0 / downsample_factor, fy=1.0 / downsample_factor, interpolation=interpolation)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sample_pos_inv).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_242": {
                "variable": {
                    "value": "sample_pos_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_173": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_175": {
                "input": {
                    "value": "cvs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/burstsr_dataset.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "im_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread('{}/im_raw.png'.format(path), cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "np.transpose(im_raw, (2, 0, 1)).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_raw)",
                            "Call"
                        ],
                        [
                            "self.im_raw.float()",
                            "Call"
                        ],
                        [
                            "im_raw - torch.tensor(self.black_level).view(4, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "im_raw * torch.tensor(self.cam_wb).view(4, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "im_raw / self.norm_factor",
                            "BinOp"
                        ],
                        [
                            "self.im_raw[:, r1:r2, c1:c2]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread('{}/im_raw.png'.format(path), cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "np.transpose(im_raw, (2, 0, 1)).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_raw)",
                            "Call"
                        ],
                        [
                            "self.im_raw.float()",
                            "Call"
                        ],
                        [
                            "im_raw - torch.tensor(self.black_level).view(3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "im_raw * torch.tensor(self.cam_wb).view(3, 1, 1) / 1024.0",
                            "BinOp"
                        ],
                        [
                            "im_raw / self.norm_factor",
                            "BinOp"
                        ],
                        [
                            "self.im_raw[:, r1:r2, c1:c2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.im_raw.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im[0], (im[1] + im[2]) / 2, im[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "im_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread('{}/im_raw.png'.format(path), cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "np.transpose(im_raw, (2, 0, 1)).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_raw)",
                            "Call"
                        ],
                        [
                            "self.im_raw.float()",
                            "Call"
                        ],
                        [
                            "im_raw - torch.tensor(self.black_level).view(4, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "im_raw * torch.tensor(self.cam_wb).view(4, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "im_raw / self.norm_factor",
                            "BinOp"
                        ],
                        [
                            "self.im_raw[:, r1:r2, c1:c2]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread('{}/im_raw.png'.format(path), cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "np.transpose(im_raw, (2, 0, 1)).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_raw)",
                            "Call"
                        ],
                        [
                            "self.im_raw.float()",
                            "Call"
                        ],
                        [
                            "im_raw - torch.tensor(self.black_level).view(3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "im_raw * torch.tensor(self.cam_wb).view(3, 1, 1) / 1024.0",
                            "BinOp"
                        ],
                        [
                            "im_raw / self.norm_factor",
                            "BinOp"
                        ],
                        [
                            "self.im_raw[:, r1:r2, c1:c2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "self.xyz_srgb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.2404542, -1.5371385, -0.4985314, -0.969266, 1.8760108, 0.041556, 0.0556434, -0.2040259, 1.0572252]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "variable": {
                    "value": "self.im_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.im_raw.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.shape()[-1] // frames[0].shape()[-1]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "self.im_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_343": {
                "variable": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "burst_image_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[im.get_image_data(normalize=True, substract_black_level=self.substract_black_level, white_balance=self.white_balance) for im in frames]",
                            "ListComp"
                        ],
                        [
                            "[flatten_raw_image(im) for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[im.flip([1])[:, 1:-1].contiguous() for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[im.flip([0])[1:-1, :].contiguous() for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[pack_raw_image(im) for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[F.pad(im.unsqueeze(0), pad, mode='replicate').squeeze(0) for im in burst_image_data]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_333": {
                "variable": {
                    "value": "gt_image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_image_data.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[4 * p for p in pad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_333": {
                "variable": {
                    "value": "gt_image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, im_raw.shape[0] // 2, im_raw.shape[1] // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "im_raw.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_411": {
                "variable": {
                    "value": "im_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_raw_4ch.shape[1] * 2, im_raw_4ch.shape[2] * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "im_raw_4ch.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "self.black_level",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "self.black_level",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "meta_info_gt[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_387": {
                "variable": {
                    "value": "meta_info_burst[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "self.black_level",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "self.cam_wb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "self.black_level",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_331": {
                "input": {
                    "value": "im.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "self.cam_wb",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/burstsr_test_dataset.py": {
        "torch": {
            "stack_116": {
                "variable": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "burst_image_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[im.get_image_data(normalize=True, substract_black_level=self.substract_black_level, white_balance=self.white_balance) for im in frames]",
                            "ListComp"
                        ],
                        [
                            "[flatten_raw_image(im) for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[im.flip([1])[:, 1:-1].contiguous() for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[im.flip([0])[1:-1, :].contiguous() for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[pack_raw_image(im) for im in burst_image_data]",
                            "ListComp"
                        ],
                        [
                            "[F.pad(im.unsqueeze(0), pad, mode='replicate').squeeze(0) for im in burst_image_data]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "meta_info_burst[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_108": {
                "input": {
                    "value": "im.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/synthetic_burst_test_set.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._read_burst_image(index, i) for i in range(self.burst_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(burst, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "im.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_20": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/synthetic_burst_train_set.py": {
        "torch": {}
    },
    "datasets/synthetic_burst_val_set.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "burst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._read_burst_image(index, i) for i in range(self.burst_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(burst, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "im.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_20": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/zurich_raw2rgb_dataset.py": {
        "torch": {}
    },
    "pwcnet/correlation/correlation.py": {
        "torch": {}
    },
    "pwcnet/pwcnet.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "tenFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenFlow[:, 0:1, :, :] / ((tenInput.shape[3] - 1.0) / 2.0), tenFlow[:, 1:2, :, :] / ((tenInput.shape[2] - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "tenInput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenInput, backwarp_tenPartial[str(tenFlow.shape)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_33": {
                "variable": {
                    "value": "tenOutput",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenInput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tenInput, backwarp_tenPartial[str(tenFlow.shape)]], 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "(backwarp_tenGrid[str(tenFlow.shape)] + tenFlow).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_22": {
                "variable": {
                    "value": "tenHor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0 + 1.0 / tenFlow.shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 - 1.0 / tenFlow.shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "tenFlow.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_23": {
                "variable": {
                    "value": "tenVer",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0 + 1.0 / tenFlow.shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 - 1.0 / tenFlow.shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "tenFlow.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "backwarp_tenGrid[str(tenFlow.shape)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenHor, tenVer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_268": {
                "variable": {
                    "value": "source_img_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_img.view(-1, 3, int_height, int_width)",
                            "Call"
                        ],
                        [
                            "source_img[:, [2, 1, 0]].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_271": {
                "variable": {
                    "value": "target_img_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_img.view(-1, 3, int_height, int_width)",
                            "Call"
                        ],
                        [
                            "target_img[:, [2, 1, 0]].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_281": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow[:, 0] * scale_factor_x, flow[:, 1] * scale_factor_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.netOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.netTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.netThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.netFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=64, out_channels=96, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.netFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=96, out_channels=128, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.netSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=128, out_channels=196, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.netOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.netTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.netThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128, out_channels=96, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.netFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96, out_channels=64, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.netFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64, out_channels=32, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.netSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64 + 32, out_channels=2, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netOne(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netTwo(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netThr(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netFou(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netFiv(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.netMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32, out_channels=128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_246": {
                "variable": {
                    "value": "weights_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_276": {
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(target_img_re, source_img_re)",
                            "Call"
                        ],
                        [
                            "20.0 * torch.nn.functional.interpolate(input=flow, size=(int_height, int_width), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "torch.stack((flow[:, 0] * scale_factor_x, flow[:, 1] * scale_factor_y), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int_height, int_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "variable": {
                    "value": "self.netUpflow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_122": {
                "variable": {
                    "value": "self.netUpfeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intPrevious + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_163": {
                "variable": {
                    "value": "tenVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation.FunctionCorrelation(tenFirst=tenFirst, tenSecond=tenSecond)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenVolume]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_62": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_73": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_100": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "intCurrent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, 81 + 32 + 2 + 2, 81 + 64 + 2 + 2, 81 + 96 + 2 + 2, 81 + 128 + 2 + 2, 81, None][intLevel + 0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "intCurrent + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_132": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_137": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_142": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_147": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_171": {
                "variable": {
                    "value": "tenVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation.FunctionCorrelation(tenFirst=tenFirst, tenSecond=backwarp(tenInput=tenSecond, tenFlow=tenFlow * self.fltBackwarp))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenVolume, tenFirst, tenFlow, tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_194": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_196": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_198": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_200": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_202": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_204": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pwcnet/run.py": {
        "torch": {
            "set_grad_enabled_23": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "tenFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenFlow[:, 0:1, :, :] / ((tenInput.shape[3] - 1.0) / 2.0), tenFlow[:, 1:2, :, :] / ((tenInput.shape[2] - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "tenInput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenInput, backwarp_tenPartial[str(tenFlow.shape)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_61": {
                "variable": {
                    "value": "tenOutput",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenInput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tenInput, backwarp_tenPartial[str(tenFlow.shape)]], 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "(backwarp_tenGrid[str(tenFlow.shape)] + tenFlow).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_302": {
                "variable": {
                    "value": "tenPreprocessedFirst",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenPreprocessedFirst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tenFirst.cuda().view(1, 3, intHeight, intWidth)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=tenPreprocessedFirst, size=(intPreprocessedHeight, intPreprocessedWidth), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(intPreprocessedHeight, intPreprocessedWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_303": {
                "variable": {
                    "value": "tenPreprocessedSecond",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenPreprocessedSecond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tenSecond.cuda().view(1, 3, intHeight, intWidth)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=tenPreprocessedSecond, size=(intPreprocessedHeight, intPreprocessedWidth), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(intPreprocessedHeight, intPreprocessedWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_48": {
                "variable": {
                    "value": "tenHor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0 + 1.0 / tenFlow.shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 - 1.0 / tenFlow.shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "tenFlow.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_49": {
                "variable": {
                    "value": "tenVer",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0 + 1.0 / tenFlow.shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 - 1.0 / tenFlow.shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "tenFlow.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "backwarp_tenGrid[str(tenFlow.shape)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenHor, tenVer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "input": {
                    "value": "netNetwork(tenPreprocessedFirst, tenPreprocessedSecond)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(intHeight, intWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.netOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.netTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.netThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.netFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=64, out_channels=96, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.netFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=96, out_channels=128, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.netSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=128, out_channels=196, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.netOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.netTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.netThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128, out_channels=96, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.netFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96, out_channels=64, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.netFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64, out_channels=32, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.netSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64 + 32, out_channels=2, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netOne(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netTwo(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netThr(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netFou(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.netFiv(tenFeat), tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.netMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32, out_channels=128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_21": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_152": {
                "variable": {
                    "value": "self.netUpflow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_153": {
                "variable": {
                    "value": "self.netUpfeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intPrevious + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_194": {
                "variable": {
                    "value": "tenVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation.FunctionCorrelation(tenFirst=tenFirst, tenSecond=tenSecond)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenVolume]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_100": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_107": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_125": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_129": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "intCurrent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, 81 + 32 + 2 + 2, 81 + 64 + 2 + 2, 81 + 96 + 2 + 2, 81 + 128 + 2 + 2, 81, None][intLevel + 0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_158": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "intCurrent + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_163": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_168": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_178": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_202": {
                "variable": {
                    "value": "tenVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation.FunctionCorrelation(tenFirst=tenFirst, tenSecond=backwarp(tenInput=tenSecond, tenFlow=tenFlow * self.fltBackwarp))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "tenFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenVolume, tenFirst, tenFlow, tenFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_229": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_231": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_233": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_235": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_237": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_239": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_259": {
                "f": {
                    "value": "__file__.replace('run.py', 'network-' + arguments_strModel + '.pytorch')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/evaluate_burstsr_val.py": {
        "torch": {
            "interpolate_14": {
                "variable": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burst[:, 0, [0, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "burst_rgb.view(-1, *burst_rgb.shape[-3:])",
                            "Call"
                        ],
                        [
                            "F.interpolate(burst_rgb, scale_factor=8, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/save_results_burstsr_test.py": {
        "torch": {
            "interpolate_16": {
                "variable": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burst[:, 0, [0, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "burst_rgb.view(-1, *burst_rgb.shape[-3:])",
                            "Call"
                        ],
                        [
                            "F.interpolate(burst_rgb, scale_factor=8, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/save_results_synburst_val.py": {
        "torch": {
            "interpolate_16": {
                "variable": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burst[:, 0, [0, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "burst_rgb.view(-1, *burst_rgb.shape[-3:])",
                            "Call"
                        ],
                        [
                            "F.interpolate(burst_rgb, scale_factor=8, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_burstsr_dataset.py": {
        "torch": {
            "DataLoader_16": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BurstSRDataset(root='PATH_TO_BURST_SR', split='val', burst_size=3, crop_sz=56, random_flip=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_34": {
                "variable": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burst[:, 0, [0, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "burst_rgb.view(-1, *burst_rgb.shape[-3:])",
                            "Call"
                        ],
                        [
                            "F.interpolate(burst_rgb, scale_factor=8, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_synthetic_bursts.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SyntheticBurst(zurich_raw2rgb, burst_size=3, crop_sz=256)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "variable": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "burst_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burst[:, 0, [0, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "burst_rgb.view(-1, *burst_rgb.shape[-3:])",
                            "Call"
                        ],
                        [
                            "F.interpolate(burst_rgb, scale_factor=8, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_format_utils.py": {
        "torch": {
            "from_numpy_7": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv.cvtColor(a, cv.COLOR_BGR2RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_7": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "interpolate_86": {
                "variable": {
                    "value": "frame_gt_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[..., self.boundary_ignore:-self.boundary_ignore, self.boundary_ignore:-self.boundary_ignore]",
                            "Subscript"
                        ],
                        [
                            "gt[..., self.boundary_ignore:-self.boundary_ignore, self.boundary_ignore:-self.boundary_ignore]",
                            "Subscript"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "ds_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / float(2.0 * sr_factor)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_101": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_warped_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_warped_m[..., self.boundary_ignore:-self.boundary_ignore, self.boundary_ignore:-self.boundary_ignore]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[..., self.boundary_ignore:-self.boundary_ignore, self.boundary_ignore:-self.boundary_ignore]",
                            "Subscript"
                        ],
                        [
                            "gt[..., self.boundary_ignore:-self.boundary_ignore, self.boundary_ignore:-self.boundary_ignore]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_26": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "variable"
                        ]
                    ]
                }
            },
            "mse_loss_28": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "variable"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alignment_net(pred / (pred.max() + 1e-06), gt / (gt.max() + 1e-06))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "ds_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / float(2.0 * sr_factor)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/postprocessing_functions.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "meta_info['cam_wb']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "meta_info['black_level']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/spatial_color_alignment.py": {
        "torch": {
            "arange_8": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(sz - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(sz + 1) / 2 + end_pad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_8": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_9": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 / (2 * sigma ** 2) * (k - center.reshape(-1, 1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_43": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.view(-1, 1, *im.shape[-2:])",
                            "Call"
                        ],
                        [
                            "F.pad(im, pad, mode='reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ksz // 2, ksz // 2, ksz // 2, ksz // 2]",
                            "List"
                        ],
                        [
                            "(im_q.shape[-1] - valid.shape[-1]) // 2",
                            "BinOp"
                        ],
                        [
                            "[pad, pad, pad, pad]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "im_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.view(-1, 1, *im.shape[-2:])",
                            "Call"
                        ],
                        [
                            "F.pad(im, pad, mode='reflect')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gauss_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss_kernel.to(im_ref.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_69": {
                "variable": {
                    "value": "c_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_mat_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "im_q_mean_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_q_mean_re.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(c_mat_all, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_70": {
                "variable": {
                    "value": "im_q_mean_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_82": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "err < thresh",
                            "Compare"
                        ],
                        [
                            "F.pad(valid, pad)",
                            "Call"
                        ],
                        [
                            "F.interpolate(valid.unsqueeze(1).float(), scale_factor=upsample_factor, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "valid > 0.9",
                            "Compare"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ksz // 2, ksz // 2, ksz // 2, ksz // 2]",
                            "List"
                        ],
                        [
                            "(im_q.shape[-1] - valid.shape[-1]) // 2",
                            "BinOp"
                        ],
                        [
                            "[pad, pad, pad, pad]",
                            "List"
                        ]
                    ]
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "upsample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_test.shape[-1] / valid.shape[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "im_t_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_test_re.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(c_mat_all, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_90": {
                "variable": {
                    "value": "im_t_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(center).view(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "lstsq_65": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ir.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "iq.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/warp.py": {
        "torch": {
            "meshgrid_18": {
                "variable": {
                    "value": "(rowv, colv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(0.5, H + 0.5), torch.arange(0.5, W + 0.5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(colv, rowv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "grid_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_norm_c, grid_norm_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_30": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((grid_norm_c, grid_norm_r), dim=1)",
                            "Call"
                        ],
                        [
                            "grid_norm.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_18": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "W + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}