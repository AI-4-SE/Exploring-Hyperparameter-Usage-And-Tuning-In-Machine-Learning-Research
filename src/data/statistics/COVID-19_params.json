{
    "Deep Learning Models/ALEXNET_MLP.py": {
        "sklearn": {
            "confusion_matrix_180": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_189": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_16": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/CB_test_caps_IV3.py": {
        "sklearn": {
            "confusion_matrix_104": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(results, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_112": {
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(results, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_19": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/DenseNet121_mlp.py": {
        "sklearn": {
            "confusion_matrix_101": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_110": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/DenseNet169_mlp.py": {
        "sklearn": {
            "confusion_matrix_102": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_111": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/DenseNet201_mlp.py": {
        "sklearn": {
            "confusion_matrix_103": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_112": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/MobileNet_V2_MLP.py": {
        "sklearn": {
            "confusion_matrix_101": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_110": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/MobileNet_mlp.py": {
        "sklearn": {
            "confusion_matrix_100": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_109": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/NASNetMobile_mlp.py": {
        "sklearn": {
            "confusion_matrix_109": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_118": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_16": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/Nasnet_large.py": {
        "sklearn": {
            "confusion_matrix_100": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_109": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/VGG16_MLP.py": {
        "sklearn": {
            "confusion_matrix_98": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_107": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/capsnet.py": {
        "sklearn": {
            "confusion_matrix_241": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_generator(test_it, 5480 // batch_size + 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "[labels[k] for k in y_pred]",
                            "ListComp"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "classification_report_250": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_generator(test_it, 5480 // batch_size + 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "[labels[k] for k in y_pred]",
                            "ListComp"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_16": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/inceptionv3_mlp.py": {
        "sklearn": {
            "confusion_matrix_100": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_109": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/resnet152_v2_ok.py": {
        "sklearn": {
            "confusion_matrix_100": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_109": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/resnet50_mlp.py": {
        "sklearn": {
            "confusion_matrix_99": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_108": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/resnet50_v2_mlp.py": {
        "sklearn": {
            "confusion_matrix_100": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_109": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/vgg19_mlp.py": {
        "sklearn": {
            "confusion_matrix_99": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_108": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/xception.py": {
        "sklearn": {
            "confusion_matrix_98": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_107": {
                "y_true": {
                    "value": "test_it.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Negative', 'Positive']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_4": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_10": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/CA_train_caps_IV3.py": {
        "tensorflow": {
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Deep Learning Models/extract_features.py": {
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_16": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Federated Learning/data/mri_data.py": {
        "torch": {
            "Tensor_155": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/data/subsample.py": {
        "torch": {
            "from_numpy_114": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/data/transforms.py": {
        "torch": {
            "fft_87": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "torch.rfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.irfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rfft_105": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "torch.rfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.irfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ifft_124": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "torch.rfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.irfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "irfft_142": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "torch.rfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.irfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "atan2_155": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "data[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "mean_complex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean_real, mean_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.fft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "torch.rfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.ifft(data, 2, normalized=normalized)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=(-3, -2))",
                            "Call"
                        ],
                        [
                            "torch.irfft(data, 2, normalized=True, onesided=False)",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_156": {
                "tensors": {
                    "value": "(mag, phase)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_168": {
                "tensors": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_205": {
                "input": {
                    "value": "(data ** 2).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_355": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_166": {
                "input": {
                    "value": "data[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_167": {
                "input": {
                    "value": "data[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/data/volume_sampler.py": {
        "torch": {
            "Generator_44": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_46": {
                "variable": {
                    "value": "ordering",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Federated Learning/fl_images.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu[0]) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_95": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UnetModel(in_chans=1, out_chans=1, chans=32, num_pool_layers=4, drop_prob=0.0).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net_glob, args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_48": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_112": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/fl_multi-images.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu[0]) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_126": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UnetModel_ad_da(in_chans=1, out_chans=1, chans=32, num_pool_layers=4, drop_prob=0.0).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net_glob, args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_51": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_122": {
                "params": {
                    "value": "G_s[i].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_123": {
                "params": {
                    "value": "FD[i].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "module": {
                    "value": "UnetModel_ad_da(in_chans=1, out_chans=1, chans=32, num_pool_layers=4, drop_prob=0.0).to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_114": {
                "module": {
                    "value": "Feature_discriminator().to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_148": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_145": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint.split('.')[0] + '_D_%s.pth' % i",
                            "BinOp"
                        ],
                        [
                            "args.checkpoint.split('.')[0] + '_D_%s.pth' % i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_153": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint.split('.')[0] + '_D_%s.pth' % i",
                            "BinOp"
                        ],
                        [
                            "args.checkpoint.split('.')[0] + '_D_%s.pth' % i",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Federated Learning/models/Fed.py": {
        "torch": {
            "div_15": {
                "variable": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "len(w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/models/recon_Update.py": {
        "torch": {
            "L1Loss_18": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "self.ldr_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.local_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_25": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_26": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(net.parameters(), lr=self.args.lr)",
                            "Call"
                        ],
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_60": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_61": {
                "variable": {
                    "value": "self.adv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "self.ldr_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.local_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "self.target_domain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_target",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.local_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_92": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(net.parameters(), lr=self.args.lr)",
                            "Call"
                        ],
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_70": {
                "input": {
                    "value": "(output * std + mean) / norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "(target * std + mean) / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/models/test.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.local_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ],
                        [
                            "datatest",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_28": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ],
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "net_g(input.to(self.device))",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ],
                        [
                            "net_g(input.to(self.device))",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_127": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ],
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "net_g(input.to(self.device))",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ],
                        [
                            "net_g(input.to(self.device))",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_178": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ],
                        [
                            "net_g(input.cuda())",
                            "Call"
                        ],
                        [
                            "net_g(input.to(self.device))",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ],
                        [
                            "net_g(input.to(self.device))",
                            "Call"
                        ],
                        [
                            "np.stack([out for (_, out) in sorted(outputs[fname])])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/models/unet_model.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, out_chans, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_chans, out_chans, kernel_size=2, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.down_sample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(in_chans, chans, drop_prob)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.up_transpose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.down_sample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(in_chans, chans, drop_prob)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.up_transpose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_246": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_157": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, downsample_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_243": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, downsample_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_33": {
                "num_features": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_34": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_35": {
                "p": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_prob",
                            "Method Argument"
                        ],
                        [
                            "drop_prob",
                            "Method Argument"
                        ],
                        [
                            "drop_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_37": {
                "num_features": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_39": {
                "p": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_prob",
                            "Method Argument"
                        ],
                        [
                            "drop_prob",
                            "Method Argument"
                        ],
                        [
                            "drop_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "num_features": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "ConvBlock(ch * 2, ch, drop_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_173": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "*args": {
                    "value": "ConvBlock(ch * 2, ch, drop_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_259": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chans",
                            "variable"
                        ],
                        [
                            "ch // 2",
                            "BinOp"
                        ],
                        [
                            "chans",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chans",
                            "variable"
                        ],
                        [
                            "ch // 2",
                            "BinOp"
                        ],
                        [
                            "chans",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/test.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu[0]) if torch.cuda.is_available() and args.gpu != -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net_glob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UnetModel(in_chans=1, out_chans=1, chans=32, num_pool_layers=4, drop_prob=0.0).to(args.device)",
                            "Call"
                        ],
                        [
                            "UnetModel_ad_da(in_chans=1, out_chans=1, chans=32, num_pool_layers=4, drop_prob=0.0).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net_glob, args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Federated Learning/utils/preprocess_datasets_brats.py": {
        "torch": {
            "zeros_like_53": {
                "variable": {
                    "value": "fake_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.to_tensor(img_np).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "img_tensor_complex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_tensor, fake_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}