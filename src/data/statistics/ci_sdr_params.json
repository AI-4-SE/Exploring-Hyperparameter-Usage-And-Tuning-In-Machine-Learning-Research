{
    "ci_sdr/pt/sdr.py": {
        "torch": {
            "sum_354": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reverberated ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_355": {
                "variable": {
                    "value": "den",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(reverberated - est) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_148": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pit_loss_from_loss_matrix(l, reduction=None, algorithm=algorithm) for l in loss_matrix_flat]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_351": {
                "variable": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "estimation",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.pad(est, [0, filter_length - 1])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, filter_length - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_361": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear_to_db(num, den, eps=soft_max_SDR_to_eps(soft_max_SDR))",
                            "Call"
                        ],
                        [
                            "-scores",
                            "UnaryOp"
                        ],
                        [
                            "torch.squeeze(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "candidates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(candidates)",
                            "Call"
                        ],
                        [
                            "torch.stack(candidates)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_327": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(candidates, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_330": {
                "variable": {
                    "value": "candidates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(candidates)",
                            "Call"
                        ],
                        [
                            "torch.stack(candidates)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_335": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(candidates_flat, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_36": {
                "input": {
                    "value": "numerator / denominator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log10_38": {
                "input": {
                    "value": "denominator / numerator + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "candidates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(candidates)",
                            "Call"
                        ],
                        [
                            "torch.stack(candidates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_335": {
                "input": {
                    "value": "candidates_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "einops.rearrange(candidates, 'permutations ... k -> permutations (...) k')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ci_sdr/pt/toeplitz.py": {
        "torch": {
            "as_tensor_74": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.flip(r[..., 1:], (-1,)), c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_78": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_85": {
                "input": {
                    "value": "torch.flip(vals.as_strided(size=(*vals.shape[:-1], r.shape[-1], c.shape[-1]), stride=(*stride[:-1], stride[-1], stride[-1])), (-2,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flip_85": {
                "input": {
                    "value": "vals.as_strided(size=(*vals.shape[:-1], r.shape[-1], c.shape[-1]), stride=(*stride[:-1], stride[-1], stride[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_83": {
                "input": {
                    "value": "r[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ci_sdr/pt/wiener_filter.py": {
        "torch": {
            "solve_371": {
                "variable": {
                    "value": "(w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "toeplitz(autocorr[..., :filter_length])",
                            "Call"
                        ],
                        [
                            "einops.rearrange(R, 'source1 source2 filter1 filter2 -> (source1 filter1) (source2 filter2)', filter1=filter_length, filter2=filter_length, source1=observation.shape[-2], source2=observation.shape[-2])",
                            "Call"
                        ],
                        [
                            "toeplitz(autocorr[..., :filter_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_372": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[..., 0]",
                            "Subscript"
                        ],
                        [
                            "einops.rearrange(w, '(source filter) -> source filter', filter=filter_length)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(signal, [0, n_fft - signal.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, n_fft - signal.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "solve_219": {
                "variable": {
                    "value": "(w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "toeplitz(autocorr[..., :filter_length])",
                            "Call"
                        ],
                        [
                            "einops.rearrange(R, 'source1 source2 filter1 filter2 -> (source1 filter1) (source2 filter2)', filter1=filter_length, filter2=filter_length, source1=observation.shape[-2], source2=observation.shape[-2])",
                            "Call"
                        ],
                        [
                            "toeplitz(autocorr[..., :filter_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_36": {
                "tensors": {
                    "value": "[a * c + b * d, -b * c + a * d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_38": {
                "tensors": {
                    "value": "[a * c - b * d, b * c + a * d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rfft_85": {
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(signal, [0, n_fft - signal.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "n_fft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(2 ** np.ceil(np.log2(observation_length + desired.shape[-1] - 1.0)))",
                            "Call"
                        ],
                        [
                            "int(2 ** np.ceil(np.log2(observation_length + desired.shape[-1] - 1.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "rfft_89": {
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(signal, [0, n_fft - signal.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "irfft_96": {
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(signal, [0, n_fft - signal.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "n_fft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(2 ** np.ceil(np.log2(observation_length + desired.shape[-1] - 1.0)))",
                            "Call"
                        ],
                        [
                            "int(2 ** np.ceil(np.log2(observation_length + desired.shape[-1] - 1.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "irfft_106": {
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(signal, [0, n_fft - signal.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "(n_fft,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_342": {
                "variable": {
                    "value": "desired",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desired",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(desired, [-first_filter_index, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[-first_filter_index, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_345": {
                "variable": {
                    "value": "observation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "observation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "observation[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(observation, [first_filter_index, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[first_filter_index, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_238": {
                "input": {
                    "value": "estimate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Observation * W",
                            "BinOp"
                        ],
                        [
                            "complex_mul(Observation, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_burn.py": {
        "torch": {
            "tensor_6": {
                "variable": {
                    "value": "t1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2, 4, 7, 1, 3, 7, 8, 0, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clone_7": {
                "variable": {
                    "value": "t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 2, 4, 7, 1, 3, 7, 8, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 2, 4, 7, 1, 3, 7, 8, 0, 3, 4], [5.0, 2, 7, 9, 3, 8, 4, 2, 9, 4, 5]])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "t1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2, 4, 7, 1, 3, 7, 8, 0, 3, 4], [5.0, 2, 7, 9, 3, 8, 4, 2, 9, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clone_20": {
                "variable": {
                    "value": "t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 2, 4, 7, 1, 3, 7, 8, 0, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 2, 4, 7, 1, 3, 7, 8, 0, 3, 4], [5.0, 2, 7, 9, 3, 8, 4, 2, 9, 4, 5]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_sdr.py": {
        "torch": {
            "tensor_104": {
                "variable": {
                    "value": "reference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_reverberation_early[:, ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_image[:, ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "reference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_reverberation_early[(1, 0), ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_image[(0, 1), ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "reference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_reverberation_early[:, ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_image[:, ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "reference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_reverberation_early[(1, 0), ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.speech_image[(0, 1), ref_channel, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "reference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rng.normal(size=[3, 5, 7, 2, 100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rng.normal(size=[3, 5, 7, 2, 100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_55": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_149": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_158": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_170": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_176": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "data": {
                    "value": "estimation[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "estimation[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "data": {
                    "value": "estimation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.speech_reverberation_early[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_image[:, ref_channel, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[:speakers, :]",
                            "Subscript"
                        ],
                        [
                            "data.observation[(1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "data.speech_source",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[:, ref_channel, :])",
                            "Call"
                        ],
                        [
                            "torch.tensor(data.speech_image[(0, 1), ref_channel, :])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[:, ref_channel, :], data.speech_image[permutation, ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(1, 0), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(1, 0), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "np.array([data.speech_reverberation_early[(0, 1), ref_channel, :], data.speech_image[(0, 1), ref_channel, :]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(rng.normal(size=[3, 5, 7, 2, 100]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/tests_pt_wiener_filter.py": {
        "torch": {
            "tensor_19": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(x)",
                            "Call"
                        ],
                        [
                            "[1.0, -1, 1, -1, 1, -1, 0]",
                            "List"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "[0, 0, 1.0, -1, 1, -1, 1, -1, 0, 0]",
                            "List"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "[1.0, -1, 1, -1, 1, -1, 0, 0]",
                            "List"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_20": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(y)",
                            "Call"
                        ],
                        [
                            "scipy.signal.lfilter(b, a, x)",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(x, b, mode='full')",
                            "Call"
                        ],
                        [
                            "scipy.signal.filtfilt(b, a, x)",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(scipy.signal.convolve(x, b, mode='full')[::-1], b)[::-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.lfilter(b, a, x)",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(x, b, mode='full')",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(x, [1, 1], mode='full')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(x)",
                            "Call"
                        ],
                        [
                            "[1.0, -1, 1, -1, 1, -1, 0]",
                            "List"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "[0, 0, 1.0, -1, 1, -1, 1, -1, 0, 0]",
                            "List"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "[1.0, -1, 1, -1, 1, -1, 0, 0]",
                            "List"
                        ],
                        [
                            "np.array(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(y)",
                            "Call"
                        ],
                        [
                            "scipy.signal.lfilter(b, a, x)",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(x, b, mode='full')",
                            "Call"
                        ],
                        [
                            "scipy.signal.filtfilt(b, a, x)",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(scipy.signal.convolve(x, b, mode='full')[::-1], b)[::-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.lfilter(b, a, x)",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(x, b, mode='full')",
                            "Call"
                        ],
                        [
                            "scipy.signal.convolve(x, [1, 1], mode='full')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}