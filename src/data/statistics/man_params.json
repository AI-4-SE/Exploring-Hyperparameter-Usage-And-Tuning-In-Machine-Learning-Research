{
    "code/data_prep/fdu_mtl_dataset.py": {
        "torch": {}
    },
    "code/data_prep/folded_dataset.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(n_samples)",
                            "Call"
                        ],
                        [
                            "pickle.load(open(opt.amazon_preshuffle_file, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.hstack([self.folds[f] for f in folds]).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_48": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(n_samples)",
                            "Call"
                        ],
                        [
                            "pickle.load(open(opt.amazon_preshuffle_file, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.hstack([self.folds[f] for f in folds]).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_49": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensors[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(n_samples)",
                            "Call"
                        ],
                        [
                            "pickle.load(open(opt.amazon_preshuffle_file, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.hstack([self.folds[f] for f in folds]).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(n_samples)",
                            "Call"
                        ],
                        [
                            "pickle.load(open(opt.amazon_preshuffle_file, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.hstack([self.folds[f] for f in folds]).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_56": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(n_samples)",
                            "Call"
                        ],
                        [
                            "pickle.load(open(opt.amazon_preshuffle_file, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.hstack([self.folds[f] for f in folds]).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_50": {
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/data_prep/msda_preprocessed_amazon_dataset.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lx.toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "ly",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(ly).long().to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ux.toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(uy).long().to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_33": {
                "variable": {
                    "value": "unlabeled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/layers.py": {
        "torch": {
            "Linear_45": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(flat_input).view(batch_size, max_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_58": {
                "variable": {
                    "value": "idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor(max_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_64": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_22": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeds.sum(1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "embeds.sum(1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.softmax(logits)",
                            "Call"
                        ],
                        [
                            "alphas * mask",
                            "BinOp"
                        ],
                        [
                            "alphas / torch.sum(alphas, 1).view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/models.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.fcnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(1, kernel_num, (K, vocab.emb_size)) for K in kernel_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.fcnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[functional.relu(conv(embeds)).squeeze(3) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[functional.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_106": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "vocab.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(hidden_sizes)",
                            "Call"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bdrnn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_117": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_emb(data)",
                            "Call"
                        ],
                        [
                            "embeds.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.word_emb(data)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_230": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(input)",
                            "Call"
                        ],
                        [
                            "functional.relu(scores)",
                            "Call"
                        ],
                        [
                            "scores / torch.sum(scores, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_83": {
                "input": {
                    "value": "conv(embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_84": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_191": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_domains",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(input)",
                            "Call"
                        ],
                        [
                            "functional.relu(scores)",
                            "Call"
                        ],
                        [
                            "scores / torch.sum(scores, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kernel_num",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(K, vocab.emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_161": {
                "num_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_224": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "vocab.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "len(kernel_sizes) * kernel_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_126": {
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "unpacked_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(output, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "pad_packed_sequence(output, batch_first=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_148": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "hidden_sizes[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_154": {
                "num_features": {
                    "value": "hidden_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_213": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_219": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_129": {
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/options.py": {
        "torch": {
            "ReLU_94": {
                "variable": {
                    "value": "opt.act_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "variable": {
                    "value": "opt.act_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/train_man_exp1.py": {
        "torch": {
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*map(list, [F_s.parameters() if F_s else [], C.parameters()] + [f.parameters() for f in F_d.values()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.D_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_28": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "train_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "dev_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "test_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "unlabeled_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "uset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unlabeled_sets[domain]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset([train_sets[domain], unlabeled_sets[domain]])",
                            "Call"
                        ],
                        [
                            "unlabeled_sets[domain]",
                            "Subscript"
                        ],
                        [
                            "train_sets[domain]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F_s(inputs), d_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_295": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "d_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.domain_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_58": {
                "variable": {
                    "value": "uset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_sets[domain], unlabeled_sets[domain]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netF_s_fold{fold}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netC_fold{fold}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netD_fold{fold}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shared_feat, domain_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_198": {
                "variable": {
                    "value": "l_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.to(opt.device)",
                            "Call"
                        ],
                        [
                            "targets.to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_201": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_261": {
                "obj": {
                    "value": "F_s.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netF_s_fold{}.pth'.format(opt.model_save_file, fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "C.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netC_fold{}.pth'.format(opt.model_save_file, fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netD_fold{}.pth'.format(opt.model_save_file, fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_164": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_212": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_101": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'net_F_d_{domain}_fold{fold}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_167": {
                "variable": {
                    "value": "(_, tgt_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_169": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_173": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_div_218": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "F_d[d].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/net_F_d_{}_fold{}.pth'.format(opt.model_save_file, d, fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_223": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_man_exp2.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*map(list, [F_s.parameters() if F_s else [], C.parameters()] + [f.parameters() for f in F_d.values()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.D_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "train_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dev_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "unlabeled_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "uset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unlabeled_sets[domain]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset([train_sets[domain], unlabeled_sets[domain]])",
                            "Call"
                        ],
                        [
                            "unlabeled_sets[domain]",
                            "Subscript"
                        ],
                        [
                            "train_sets[domain]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F_s(inputs), d_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_293": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "d_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.domain_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_65": {
                "variable": {
                    "value": "uset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_sets[domain], unlabeled_sets[domain]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netF_s.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netC.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netD.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shared_feat, domain_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_200": {
                "variable": {
                    "value": "l_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.to(opt.device)",
                            "Call"
                        ],
                        [
                            "targets.to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_202": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_259": {
                "obj": {
                    "value": "F_s.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netF_s.pth'.format(opt.model_save_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "C.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netC.pth'.format(opt.model_save_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netD.pth'.format(opt.model_save_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_213": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_107": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'net_F_d_{domain}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "(_, tgt_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_174": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_178": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_div_218": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "F_d[d].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/net_F_d_{}.pth'.format(opt.model_save_file, d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_223": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_man_exp3.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "opt.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*map(list, [F_s.parameters() if F_s else [], C.parameters()] + [f.parameters() for f in F_d.values()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.D_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "train_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.sorted_collate if opt.model == 'lstm' else utils.unsorted_collate",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "dev_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.sorted_collate if opt.model == 'lstm' else utils.unsorted_collate",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "test_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_sets[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.sorted_collate if opt.model == 'lstm' else utils.unsorted_collate",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "unlabeled_loaders[domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "uset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unlabeled_sets[domain]",
                            "Subscript"
                        ],
                        [
                            "ConcatDataset([train_sets[domain], unlabeled_sets[domain]])",
                            "Call"
                        ],
                        [
                            "unlabeled_sets[domain]",
                            "Subscript"
                        ],
                        [
                            "train_sets[domain]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.sorted_collate if opt.model == 'lstm' else utils.unsorted_collate",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_311": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F_s(inputs), d_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_313": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_308": {
                "variable": {
                    "value": "d_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.domain_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_66": {
                "variable": {
                    "value": "uset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_sets[domain], unlabeled_sets[domain]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netC.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netD.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shared_feat, domain_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_220": {
                "variable": {
                    "value": "l_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.to(opt.device)",
                            "Call"
                        ],
                        [
                            "targets.to(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_222": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_279": {
                "obj": {
                    "value": "F_s.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netF_s.pth'.format(opt.model_save_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_285": {
                "obj": {
                    "value": "C.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netC.pth'.format(opt.model_save_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netD.pth'.format(opt.model_save_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'netF_s.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_185": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_233": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_123": {
                "f": {
                    "value": "os.path.join(opt.model_save_file, f'net_F_d_{domain}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_188": {
                "variable": {
                    "value": "(_, tgt_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_190": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_194": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_div_238": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "F_d[d].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/net_F_d_{}.pth'.format(opt.model_save_file, d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_243": {
                "variable": {
                    "value": "l_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(shared_feat)",
                            "Call"
                        ],
                        [
                            "D(shared_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "d_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_domain_label(opt.loss, domain, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ],
                        [
                            "utils.get_random_domain_label(opt.loss, len(d_inputs[1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_70": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature_vecs[0].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(features.values())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_76": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_103": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sf.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_features[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_71": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(feature_vecs[0].size())",
                            "Call"
                        ],
                        [
                            "alpha / torch.sum(alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "alpha.cuda() if opt.use_cuda else alpha",
                            "IfExp"
                        ],
                        [
                            "torch.rand(len(feature), 1).expand(feature.size())",
                            "Call"
                        ],
                        [
                            "alpha.cuda() if opt.use_cuda else alpha",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_85": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([f * alpha[i] for (i, f) in enumerate(feature_vecs)])",
                            "Call"
                        ],
                        [
                            "alpha * feature + (1 - alpha) * (feature + 0.5 * feature.std() * noise)",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(opt.device, require_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).cuda() if opt.use_cuda else torch.ones(disc_interpolates.size())",
                    "type": "IfExp",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "prod * prod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/vocab.py": {
        "torch": {
            "Embedding_48": {
                "variable": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.eos_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "word_emb.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}