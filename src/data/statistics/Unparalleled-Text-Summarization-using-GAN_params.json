{
    "lib/discriminator_lstm.py": {
        "tensorflow": {
            "LSTMCell_14": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_15": {
                "variable": {
                    "value": "(lstm_outputs, last_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=500, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "lstm_length",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(discriminator_word_embedding_matrix, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_6": {
                "variable": {
                    "value": "discriminator_word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_12": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator_word_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='word_embedding_matrix', shape=[vocab_size, 300], initializer=init, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(discriminator_word_embedding_matrix, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_21": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_23": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.linear(lstm_outputs, 1, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_4": {
                "name_or_scope": {
                    "value": "discriminator_word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "output_project",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/generator.py": {
        "tensorflow": {
            "one_hot_41": {
                "variable": {
                    "value": "input_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(encoder_inputs, [1, beam_size]), [batch_size * beam_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_42": {
                "variable": {
                    "value": "input_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(encoder_inputs, [1, beam_size]), [batch_size * beam_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_43": {
                "variable": {
                    "value": "encoder_inputs_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(encoder_inputs, [1, beam_size]), [batch_size * beam_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_29": {
                "variable": {
                    "value": "path_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([batch_size, 1]), tf.zeros([batch_size, beam_size - 1]) - 10.0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(encoder_inputs, [1, beam_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "bos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(decoder_inputs[0], [1, beam_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_51": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_52": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=latent_dim * 2, state_is_tuple=True, reuse=tf.get_variable_scope().reuse)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=latent_dim * 2, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "encoder_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_length * beam_size",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_embedding_matrix, encoder_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "V",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "W_s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_s",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "b_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_attn",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "w_c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_69": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[encoder_shape[0], encoder_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "generator_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "generator_pointer_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(c_t, num_or_size_splits=encoder_shape[1], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "encoder_shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "encoder_inputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(e_t, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(tf.expand_dims(attention_weight, axis=1), attention_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_97": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([state, attention_context], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "P_vocab_projection1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_98": {
                "variable": {
                    "value": "vocab_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(h_i, W_h) + tf.matmul(state, W_s) + w_c * c_i + b_attn)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([state, attention_context], axis=1), 1000, name='P_vocab_projection1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "P_vocab_projection2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "P_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(tf.concat([input_t, state.h, attention_context], axis=1), 1, name='P_gen')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "out_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "new_path_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_path_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07) + penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_175": {
                "variable": {
                    "value": "(path_probs, top_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_path_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07) + penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_31": {
                "input": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(encoder_inputs, [1, beam_size]), [batch_size * beam_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_48": {
                "input": {
                    "value": "decoder_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_73": {
                "inputs": {
                    "value": "tf.concat([raw_input, last_attention_context], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_82": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_i, W_h) + tf.matmul(state, W_s) + w_c * c_i + b_attn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "e_t_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(hidden, V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "input": {
                    "value": "tf.matmul(tf.expand_dims(attention_weight, axis=1), input_one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "logits": {
                    "value": "vocab_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden, vocab_size, name='P_vocab_projection2')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[batch_size, beam_size - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_30": {
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_73": {
                "values": {
                    "value": "[raw_input, last_attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_87": {
                "values": {
                    "value": "e_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "a": {
                    "value": "tf.expand_dims(attention_weight, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "attention_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "a": {
                    "value": "tf.expand_dims(attention_weight, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "input_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(encoder_inputs, vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_97": {
                "values": {
                    "value": "[state, attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "out_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "new_path_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_path_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07) + penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_128": {
                "variable": {
                    "value": "(path_probs, top_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_path_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(path_probs, [batch_size, beam_size, 1]) + tf.log(out_probs + 1e-07) + penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(new_path_prob, [batch_size, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_135": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_s_c",
                    "type": "variable",
                    "possible_values": []
                },
                "h": {
                    "value": "new_s_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_136": {
                "variable": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([encoder_shape[0], encoder_shape[1]])",
                            "Call"
                        ],
                        [
                            "attention_coverage + attention_weight",
                            "BinOp"
                        ],
                        [
                            "tf.gather(attention_coverage, top_batch_ids)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_start_id + tf.floordiv(tf.reshape(top_ids, [batch_size * beam_size]), vocab_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_137": {
                "variable": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(attention_context, top_batch_ids)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.matmul(tf.expand_dims(attention_weight, axis=1), attention_state), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_start_id + tf.floordiv(tf.reshape(top_ids, [batch_size * beam_size]), vocab_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.mod(top_ids, int(vocab_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_141": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample2D(decoder_outputs[-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.mod(top_ids, int(vocab_size)), [batch_size * beam_size])",
                            "Call"
                        ],
                        [
                            "tf.argmax(decoder_outputs[-1], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_163": {
                "x": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([encoder_shape[0], encoder_shape[1]])",
                            "Call"
                        ],
                        [
                            "attention_coverage + attention_weight",
                            "BinOp"
                        ],
                        [
                            "tf.gather(attention_coverage, top_batch_ids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.stack(e_t, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_166": {
                "inputs": {
                    "value": "tf.concat([input_t, state.h, attention_context], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "P_gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "tensor": {
                    "value": "path_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([batch_size, 1]), tf.zeros([batch_size, beam_size - 1]) - 10.0], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_173": {
                "x": {
                    "value": "out_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(h_i, W_h) + tf.matmul(state, W_s) + w_c * c_i + b_attn)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([state, attention_context], axis=1), 1000, name='P_vocab_projection1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='V', shape=[latent_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.stack(e_t, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_93": {
                "input": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.stack(e_t, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_144": {
                "variable": {
                    "value": "batch_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(encoder_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "abs_id",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(batch_id, axis=1), tf.expand_dims(last_output_id, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_146": {
                "variable": {
                    "value": "last_output_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "abs_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(batch_id, axis=1), tf.expand_dims(last_output_id, axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(last_output_id, axis=1), tf.expand_dims(last_output_id, axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_147": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample2D(decoder_outputs[-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.mod(top_ids, int(vocab_size)), [batch_size * beam_size])",
                            "Call"
                        ],
                        [
                            "tf.argmax(decoder_outputs[-1], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_166": {
                "values": {
                    "value": "[input_t, state.h, attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_179": {
                "input": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_180": {
                "input_tensor": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_182": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_183": {
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floordiv_133": {
                "x": {
                    "value": "tf.reshape(top_ids, [batch_size * beam_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_134": {
                "params": {
                    "value": "state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_batch_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_start_id + tf.floordiv(tf.reshape(top_ids, [batch_size * beam_size]), vocab_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mod_140": {
                "x1": {
                    "value": "top_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "int(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_149": {
                "variable": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_151": {
                "variable": {
                    "value": "abs_id",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(last_output_id, axis=1), tf.expand_dims(last_output_id, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_152": {
                "variable": {
                    "value": "last_output_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "abs_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(batch_id, axis=1), tf.expand_dims(last_output_id, axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(last_output_id, axis=1), tf.expand_dims(last_output_id, axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_153": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample2D(decoder_outputs[-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.mod(top_ids, int(vocab_size)), [batch_size * beam_size])",
                            "Call"
                        ],
                        [
                            "tf.argmax(decoder_outputs[-1], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "path_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([batch_size, 1]), tf.zeros([batch_size, beam_size - 1]) - 10.0], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_126": {
                "x": {
                    "value": "out_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "top_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_144": {},
            "matmul_82": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state",
                            "Name"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMStateTuple(new_s_c, new_s_h)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_s', shape=[latent_dim * 2, latent_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_145": {
                "input": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample2D(decoder_outputs[-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.mod(top_ids, int(vocab_size)), [batch_size * beam_size])",
                            "Call"
                        ],
                        [
                            "tf.argmax(decoder_outputs[-1], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_151": {
                "input": {
                    "value": "last_output_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample2D(decoder_outputs[-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.mod(top_ids, int(vocab_size)), [batch_size * beam_size])",
                            "Call"
                        ],
                        [
                            "tf.argmax(decoder_outputs[-1], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ops.py": {
        "tensorflow": {
            "reshape_10": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, hid_dim])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, num_or_size_splits=inputs.get_shape().as_list()[1], axis=1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(e, axis=1) for e in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hid_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_11": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, hid_dim])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, num_or_size_splits=inputs.get_shape().as_list()[1], axis=1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(e, axis=1) for e in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_w', shape=kernel_shape, dtype=tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_12": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, origin_shape[:-1] + [-1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(inputs, weight, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, bias)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "origin_shape[:-1] + [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_17": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, hid_dim])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, num_or_size_splits=inputs.get_shape().as_list()[1], axis=1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(e, axis=1) for e in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "inputs.get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_width, inputs.get_shape()[-1], output_dim]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_35": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, hid_dim])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, num_or_size_splits=inputs.get_shape().as_list()[1], axis=1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(e, axis=1) for e in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_w', shape=kernel_shape, dtype=tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_36": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, origin_shape[:-1] + [-1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(inputs, weight, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_b', shape=[output_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_46": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probability, [-1, shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probability, [-1, shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_51": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probability, [-1, shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(seq, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sign(seq)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_57": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(seq, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sign(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(seq, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sign(seq)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "tf.multinomial(tf.log(probability), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_52": {
                "input": {
                    "value": "tf.multinomial(tf.log(probability), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_59": {
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(seq, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_18": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_48": {
                "logits": {
                    "value": "tf.log(probability)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_52": {
                "logits": {
                    "value": "tf.log(probability)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_34": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_48": {
                "x": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probability, [-1, shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_52": {
                "x": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(probability, [-1, shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(probability, 1e-07, 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/reconstructor.py": {
        "tensorflow": {
            "get_variable_21": {
                "variable": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rec_word_embedding_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, 100]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_28": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='rec_word_embedding_matrix', shape=[vocab_size, 100], initializer=init, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_embedding_matrix, decoder_inputs)",
                            "Call"
                        ],
                        [
                            "batch_to_time_major(decoder_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_29": {
                "variable": {
                    "value": "input_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_30": {
                "variable": {
                    "value": "input_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='rec_word_embedding_matrix', shape=[vocab_size, 100], initializer=init, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "variable": {
                    "value": "encoder_inputs_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='rec_word_embedding_matrix', shape=[vocab_size, 100], initializer=init, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_122": {
                "variable": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([encoder_shape[0], encoder_shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.split(attention_coverage, num_or_size_splits=encoder_shape[1], axis=1)",
                            "Call"
                        ],
                        [
                            "attention_coverage + attention_weight",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "encoder_shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "encoder_inputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_38": {
                "variable": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_39": {
                "variable": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_41": {
                "variable": {
                    "value": "(encoder_outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=latent_dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units=latent_dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "encoder_length",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_inputs_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_embedding_matrix, encoder_inputs)",
                            "Call"
                        ]
                    ]
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "encoder_state_c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(state_fw.c, state_bw.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "encoder_state_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(state_fw.h, state_bw.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_55": {
                "variable": {
                    "value": "encoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "encoder_state_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((state_fw.c, state_bw.c), 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "encoder_state_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((state_fw.h, state_bw.h), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "V",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "W_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "W_s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_s",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "b_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_attn",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "w_c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_68": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "attention_coverage",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[encoder_shape[0], encoder_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_128": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "len(targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_mean(tf.stack(total_loss, axis=1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "reconstructor_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "reconstructor_pointer_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_78": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(c_t, num_or_size_splits=encoder_shape[1], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "encoder_shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "encoder_inputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(e_t, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(tf.expand_dims(attention_weight, axis=1), attention_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_96": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([state, attention_context], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "P_vocab_projection1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_97": {
                "variable": {
                    "value": "vocab_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(h_i, W_h) + tf.matmul(state, W_s) + w_c * c_i + b_attn)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([state, attention_context], axis=1), 500, name='P_vocab_projection1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "P_vocab_projection2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "P_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(tf.concat([input_t, state.h, attention_context], axis=1), 1, name='P_gen')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "reconstructor_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "variable": {
                    "value": "target_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(target, vocab_size) * prob_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_72": {
                "inputs": {
                    "value": "tf.concat([raw_input, last_attention_context], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_81": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_i, W_h) + tf.matmul(state, W_s) + w_c * c_i + b_attn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "e_t_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(hidden, V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "input": {
                    "value": "tf.matmul(tf.expand_dims(attention_weight, axis=1), input_one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "logits": {
                    "value": "vocab_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden, vocab_size, name='P_vocab_projection2')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_133": {
                "input_tensor": {
                    "value": "tf.stack(total_loss, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_72": {
                "values": {
                    "value": "[raw_input, last_attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_86": {
                "values": {
                    "value": "e_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "a": {
                    "value": "tf.expand_dims(attention_weight, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "attention_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_92": {
                "a": {
                    "value": "tf.expand_dims(attention_weight, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "input_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(encoder_inputs, vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_96": {
                "values": {
                    "value": "[state, attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_118": {
                "inputs": {
                    "value": "tf.concat([input_t, state.h, attention_context], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "P_gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_131": {
                "x": {
                    "value": "tf.clip_by_value(target_prob, 1e-10, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_133": {
                "values": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.reduce_mean(tf.stack(total_loss, axis=1), axis=1), [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(h_i, W_h) + tf.matmul(state, W_s) + w_c * c_i + b_attn)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.concat([state, attention_context], axis=1), 500, name='P_vocab_projection1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='V', shape=[latent_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.stack(e_t, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.stack(e_t, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_118": {
                "values": {
                    "value": "[input_t, state.h, attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_130": {
                "indices": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "t": {
                    "value": "target_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.one_hot(target, vocab_size) * prob_t, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "W_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_s', shape=[latent_dim * 2, latent_dim])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "Session_31": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "make_pretrain.py": {
        "tensorflow": {}
    },
    "seq2seq2seq.py": {
        "tensorflow": {
            "Saver_65": {
                "variable": {
                    "value": "self.generator_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.generator_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "self.discriminator_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.discriminator_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_69": {
                "variable": {
                    "value": "self.reconstructor_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.reconstructor_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.source_sentence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.source_sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.reconstructor_decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.source_sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.real_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.code_sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "generator_decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.code_sequence_length + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.generator_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.code_sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "generator_target",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.generator_target, EOS_slice]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "reconstructor_decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[BOS_slice, self.reconstructor_decoder_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "reconstructor_decoder_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.source_sentence, EOS_slice]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "real_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.real_sample, EOS_slice]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.word_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_107": {
                "variable": {
                    "value": "generator_decoder_inputs_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='word_embedding_matrix', shape=[self.vocab_size, self.word_embedding_dim], initializer=init, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "generator_decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.batch_size, self.code_sequence_length + 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([BOS_slice, self.generator_target], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "generator_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "generator_raw_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_124": {
                "variable": {
                    "value": "generator_outputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack(generator_outputs_ids, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "self.log_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "generator_outputs_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_129": {
                "variable": {
                    "value": "generator_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_raw_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "self.generator_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(generator_raw_output, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_148": {
                "variable": {
                    "value": "generator_argmax_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "generator_argmax_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(generator_argmax_outputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_149": {
                "variable": {
                    "value": "baseline_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack(baseline_ids, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_173": {
                "variable": {
                    "value": "true_sample_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "discriminator_lstm(real_sample, self.code_lstm_length, self.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "false_sample_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "discriminator_lstm(generator_outputs_ids, self.code_lstm_length, self.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "self.reconstruct_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstructor_argmax_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_191": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "len(generator_outputs_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_194": {
                "variable": {
                    "value": "rec_base",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.rec_base - global_step * 2e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_196": {
                "variable": {
                    "value": "rec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.rec_weight + global_step * 5e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "variable": {
                    "value": "self.generator_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_236": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "len(generator_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_247": {
                "variable": {
                    "value": "self.step_increment_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1, name='global_step', trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "generator_decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[BOS_slice, self.generator_target]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "reconstructor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "discriminator_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "reconstruct_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "generator_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_210": {
                "variable": {
                    "value": "last_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_total_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_224": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-cur_score * tf.log(tf.clip_by_value(prob, 1e-07, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "pretrain_generator_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_238": {
                "variable": {
                    "value": "target_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(target, self.vocab_size) * prob_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_249": {
                "variable": {
                    "value": "self.train_discriminator_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_254": {
                "variable": {
                    "value": "train_generator_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_257": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_260": {
                "variable": {
                    "value": "self.train_reconstructor_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_267": {
                "variable": {
                    "value": "pretrain_generator_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_271": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_355": {
                "checkpoint_dir": {
                    "value": "gen_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'generator/')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'generator/')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_436": {
                "checkpoint_dir": {
                    "value": "gen_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'generator/')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'generator/')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_79": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_124": {
                "values": {
                    "value": "generator_outputs_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.stack(generator_outputs_ids, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_149": {
                "values": {
                    "value": "baseline_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.stack(baseline_ids, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "tf.log(1.0 - false_sample_pred + 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_204": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_total_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_206": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_total_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_243": {
                "inputs": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_244": {
                "inputs": {
                    "value": "total_coverage_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "latest_checkpoint_297": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'generator/')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "tf.log(true_sample_pred + 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_184": {
                "x": {
                    "value": "1.0 - false_sample_pred + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(cur_total_score)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(cur_total_score)",
                            "Call"
                        ],
                        [
                            "2.0 * score - 1",
                            "BinOp"
                        ],
                        [
                            "score - tf.reduce_mean(score)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_225": {
                "input_tensor": {
                    "value": "tf.reduce_sum(c_l, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_239": {
                "input_tensor": {
                    "value": "tf.reduce_sum(c_l, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_360": {
                "checkpoint_dir": {
                    "value": "rec_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'reconstructor/')",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_363": {
                "checkpoint_dir": {
                    "value": "dis_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'discriminator/')",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_183": {
                "x": {
                    "value": "true_sample_pred + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_197": {
                "input": {
                    "value": "reconstructor_sample_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_198": {
                "input": {
                    "value": "reconstructor_argmax_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_224": {
                "x": {
                    "value": "tf.clip_by_value(prob, 1e-07, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_225": {
                "input_tensor": {
                    "value": "c_l",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_238": {
                "indices": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_239": {
                "input_tensor": {
                    "value": "c_l",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "input_tensor": {
                    "value": "tf.log(tf.clip_by_value(target_prob, 1e-09, 1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_224": {
                "t": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_240": {
                "x": {
                    "value": "tf.clip_by_value(target_prob, 1e-09, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_240": {
                "t": {
                    "value": "target_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.one_hot(target, self.vocab_size) * prob_t, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}