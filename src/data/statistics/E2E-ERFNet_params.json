{
    "demo.py": {
        "sklearn": {
            "RANSACRegressor_79": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "cfg.test_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_73": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['row_wise_vertex_location_out_' + str(lane_index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out['row_wise_vertex_location_out_' + str(lane_index + 1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(row_wise_vertex_location_out, dim=0)",
                            "Call"
                        ],
                        [
                            "row_wise_vertex_location_out.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/eval_wrapper.py": {
        "sklearn": {
            "RANSACRegressor_60": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_53": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['row_wise_vertex_location_out_' + str(lane_index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out['row_wise_vertex_location_out_' + str(lane_index + 1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(row_wise_vertex_location_out, dim=0)",
                            "Call"
                        ],
                        [
                            "row_wise_vertex_location_out.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/tusimple/lane.py": {
        "sklearn": {
            "LinearRegression_7": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/demo.py": {
        "sklearn": {
            "RANSACRegressor_79": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "cfg.test_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_73": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['row_wise_vertex_location_out_' + str(lane_index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out['row_wise_vertex_location_out_' + str(lane_index + 1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(row_wise_vertex_location_out, dim=0)",
                            "Call"
                        ],
                        [
                            "row_wise_vertex_location_out.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/evaluation/eval_wrapper.py": {
        "sklearn": {
            "RANSACRegressor_60": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_53": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['row_wise_vertex_location_out_' + str(lane_index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out['row_wise_vertex_location_out_' + str(lane_index + 1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(row_wise_vertex_location_out, dim=0)",
                            "Call"
                        ],
                        [
                            "row_wise_vertex_location_out.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/evaluation/tusimple/lane.py": {
        "sklearn": {
            "LinearRegression_7": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/video.py": {
        "sklearn": {
            "RANSACRegressor_79": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_pipeline_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "PolynomialFeatures(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "memory": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RANSACRegressor(random_state=42, min_samples=2, residual_threshold=5.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "PolynomialFeatures_80": {
                "degree": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_25": {
                "f": {
                    "value": "cfg.test_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_73": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['row_wise_vertex_location_out_' + str(lane_index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out['row_wise_vertex_location_out_' + str(lane_index + 1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(row_wise_vertex_location_out, dim=0)",
                            "Call"
                        ],
                        [
                            "row_wise_vertex_location_out.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "video.py": {
        "sklearn": {
            "RANSACRegressor_79": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_pipeline_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "PolynomialFeatures(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "memory": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RANSACRegressor(random_state=42, min_samples=2, residual_threshold=5.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "PolynomialFeatures_80": {
                "degree": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_25": {
                "f": {
                    "value": "cfg.test_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_73": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['row_wise_vertex_location_out_' + str(lane_index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row_wise_vertex_location_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out['row_wise_vertex_location_out_' + str(lane_index + 1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(row_wise_vertex_location_out, dim=0)",
                            "Call"
                        ],
                        [
                            "row_wise_vertex_location_out.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataloader.py": {
        "torch": {
            "DataLoader_36": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneClsDataset(data_root, os.path.join(data_root, 'list/train_gt.txt'), img_transform=img_transform, simu_transform=simu_transform, segment_transform=None, row_anchor=row_anchor, griding_num=griding_num, use_aux=use_aux)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "SeqDistributedSampler(test_dataset, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneTestDataset(data_root, os.path.join(data_root, 'list/test.txt'), img_transform=img_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "SeqDistributedSampler(test_dataset, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_32": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneClsDataset(data_root, os.path.join(data_root, 'list/train_gt.txt'), img_transform=img_transform, simu_transform=simu_transform, segment_transform=None, row_anchor=row_anchor, griding_num=griding_num, use_aux=use_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_34": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneClsDataset(data_root, os.path.join(data_root, 'list/train_gt.txt'), img_transform=img_transform, simu_transform=simu_transform, segment_transform=None, row_anchor=row_anchor, griding_num=griding_num, use_aux=use_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_52": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneTestDataset(data_root, os.path.join(data_root, 'list/test.txt'), img_transform=img_transforms)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_66": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_69": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/dataset.py": {
        "torch": {}
    },
    "data/mytransforms.py": {
        "torch": {
            "from_numpy_97": {
                "ndarray": {
                    "value": "np.array(img, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "DistributedDataParallel_35": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2ENet(Channels=96, nums_lane=4, culomn_channels=cfg.griding_num, row_channels=cfg.row_num, initialed=True).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(net, device_ids=[args.local_rank])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_17": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "cfg.test_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/data/dataloader.py": {
        "torch": {
            "DataLoader_36": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneClsDataset(data_root, os.path.join(data_root, 'list/train_gt.txt'), img_transform=img_transform, simu_transform=simu_transform, segment_transform=None, row_anchor=row_anchor, griding_num=griding_num, use_aux=use_aux)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "SeqDistributedSampler(test_dataset, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneTestDataset(data_root, os.path.join(data_root, 'list/test.txt'), img_transform=img_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "SeqDistributedSampler(test_dataset, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_32": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneClsDataset(data_root, os.path.join(data_root, 'list/train_gt.txt'), img_transform=img_transform, simu_transform=simu_transform, segment_transform=None, row_anchor=row_anchor, griding_num=griding_num, use_aux=use_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_34": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneClsDataset(data_root, os.path.join(data_root, 'list/train_gt.txt'), img_transform=img_transform, simu_transform=simu_transform, segment_transform=None, row_anchor=row_anchor, griding_num=griding_num, use_aux=use_aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_52": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LaneTestDataset(data_root, os.path.join(data_root, 'list/test.txt'), img_transform=img_transforms)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_66": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_69": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/data/dataset.py": {
        "torch": {}
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/data/mytransforms.py": {
        "torch": {
            "from_numpy_97": {
                "ndarray": {
                    "value": "np.array(img, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/eval.py": {
        "torch": {
            "DistributedDataParallel_35": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2ENet(Channels=96, nums_lane=4, culomn_channels=cfg.griding_num, row_channels=cfg.row_num, initialed=True).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(net, device_ids=[args.local_rank])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_17": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "cfg.test_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/models/ERFNet.py": {
        "torch": {
            "device_163": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 3, 256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ninput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "noutput - ninput",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv(input), self.pool(input)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv3x1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1x3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv3x1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1 * dilated, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(dilated, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1x3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1 * dilated)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, dilated)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropprob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_105": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ninput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_26": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "input": {
                    "value": "output + input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_111": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/models/HRM.py": {
        "torch": {
            "randn_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 96, 128, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(exp_size, exp_size // divide)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_17": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(size=(1, 96, 128, 256))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "horizontal_x + unshuffle_x",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.se_block(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=[height, width]).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.dense(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch, channels, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_57": {
                "variable": {
                    "value": "self.horizontal_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.drop_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "exp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "exp_size // divide",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "exp_size // divide",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "exp_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/models/model.py": {
        "torch": {
            "randn_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 3, 256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.lane_maker_confidence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Channels, Channels // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.lane_marker_block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.lane_marker_block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.lane_marker_block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.lane_marker_block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nums_lane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_111": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/speed.py": {
        "torch": {
            "randn_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/train.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_74": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2ENet(Channels=96, nums_lane=4, culomn_channels=cfg.griding_num, row_channels=cfg.row_num, initialed=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(net, device_ids=[args.local_rank])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "resume_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_62": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "cfg.finetune",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/utils/common.py": {
        "torch": {
            "save_72": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, 'ep%03d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/utils/dist_utils.py": {
        "torch": {
            "cat_69": {
                "tensors": {
                    "value": "all_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(tensor) for _ in range(get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/utils/factory.py": {
        "torch": {
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "training_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "training_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "training_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiment/20200918_114835_lr_8e-04_b_12/code/utils/loss.py": {
        "torch": {
            "NLLLoss_10": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_13": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_14": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_15": {
                "variable": {
                    "value": "log_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_26": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ERFNet.py": {
        "torch": {
            "device_163": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 3, 256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ninput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "noutput - ninput",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv(input), self.pool(input)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv3x1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1x3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv3x1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1 * dilated, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(dilated, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1x3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1 * dilated)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, dilated)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropprob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_105": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ninput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_26": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "input": {
                    "value": "output + input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_111": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/HRM.py": {
        "torch": {
            "randn_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 96, 128, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(exp_size, exp_size // divide)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_17": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(size=(1, 96, 128, 256))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "horizontal_x + unshuffle_x",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.se_block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=[height, width]).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.dense(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch, channels, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_57": {
                "variable": {
                    "value": "self.horizontal_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "exp_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "exp_size // divide",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "exp_size // divide",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "exp_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "randn_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 3, 256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.lane_maker_confidence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Channels, Channels // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.lane_marker_block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.lane_marker_block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.lane_marker_block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.lane_marker_block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "HRM_Block(in_planes=Channels, stride=2, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nums_lane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "Channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "Channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "row_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "culomn_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_111": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "speed.py": {
        "torch": {
            "randn_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_74": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2ENet(Channels=96, nums_lane=4, culomn_channels=cfg.griding_num, row_channels=cfg.row_num, initialed=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(net, device_ids=[args.local_rank])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "resume_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_62": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "cfg.finetune",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/common.py": {
        "torch": {
            "save_72": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, 'ep%03d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/dist_utils.py": {
        "torch": {
            "cat_69": {
                "tensors": {
                    "value": "all_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(tensor) for _ in range(get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/factory.py": {
        "torch": {
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "training_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "training_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "training_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "NLLLoss_10": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_13": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_14": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_15": {
                "variable": {
                    "value": "log_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_26": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}