{
    "abcpy/approx_lhd.py": {
        "sklearn": {
            "ledoit_wolf_169": {
                "variable": {
                    "value": "(lw_cov_, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "stat_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.statistics_calc.statistics(y_sim)",
                            "Call"
                        ],
                        [
                            "self._calculate_summary_stat(y_obs, y_sim)",
                            "Call"
                        ],
                        [
                            "self._calculate_summary_stat(y_obs, y_sim)",
                            "Call"
                        ],
                        [
                            "self._calculate_summary_stat(y_obs, y_sim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "abcpy/distances.py": {
        "sklearn": {
            "LogisticRegression_335": {
                "variable": {
                    "value": "log_reg_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100000.0",
                            "float"
                        ]
                    ]
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.rng.randint(0, np.iinfo(np.uint32).max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NearestNeighbors_704": {
                "variable": {
                    "value": "s1_neighbourhood",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_705": {
                "variable": {
                    "value": "s2_neighbourhood",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_706": {
                "variable": {
                    "value": "s3_neighbourhood",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_831": {
                "variable": {
                    "value": "s1_neighbourhood",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_832": {
                "variable": {
                    "value": "s2_neighbourhood",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_1167": {
                "variable": {
                    "value": "s1_neighbourhood_k1",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_1168": {
                "variable": {
                    "value": "s1_neighbourhood_k",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_1169": {
                "variable": {
                    "value": "s2_neighbourhood_k1",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_1170": {
                "variable": {
                    "value": "s2_neighbourhood_k",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/modelselections.py": {
        "sklearn": {
            "RandomForestClassifier_167": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.N_tree",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "int(self.n_try_fraction * self.reference_table_statistics.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "bootstrap": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_212": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.N_tree",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "int(self.n_try_fraction * self.reference_table_statistics.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "bootstrap": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_226": {
                "variable": {
                    "value": "regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.N_tree",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/statisticslearning.py": {
        "sklearn": {
            "LinearRegression_312": {
                "variable": {
                    "value": "regr",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MinMaxScaler_481": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_1349": {
                "variable": {
                    "value": "self.scaler_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_1358": {
                "variable": {
                    "value": "simulations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "simulations.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_1359": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "parameters.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1777": {
                "variable": {
                    "value": "etas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(etas, torch.ones(etas.shape[0], 1).to(etas))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_1798": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "etas.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "transformed_samples.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1801": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1809": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_439": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1297": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1361": {
                "variable": {
                    "value": "simulations_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "simulations_val.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_1362": {
                "variable": {
                    "value": "parameters_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "parameters_val.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_1579": {
                "variable": {
                    "value": "optimizer_simulations",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.simulations_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_simulations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_1586": {
                "variable": {
                    "value": "optimizer_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_1782": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.view(-1, samples.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_436": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_1294": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_1800": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(etas.unsqueeze(1), transformed_samples.unsqueeze(2))",
                            "Call"
                        ],
                        [
                            "logp.sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reshaped_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.view(-1, samples.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_1808": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reshaped_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.view(-1, samples.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_1777": {
                "*size": {
                    "value": "etas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_1803": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(logp, reshaped_samples, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1805": {
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_1694": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_1789": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn_like(reshaped_samples).to(reshaped_samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/transformers.py": {
        "sklearn": {},
        "torch": {}
    },
    "abcpy/NN_utilities/algorithms.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "pairs_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pairs_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SiameseSimilarities(similarities_dataset, positive_weight=positive_weight)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "triplets_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "triplets_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TripletSimilarities(similarities_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "data_loader_FP_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_FP_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ParameterSimulationPairs(samples, target, 'cuda' if cuda and load_all_data_GPU else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_212": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "pairs_train_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pairs_dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SiameseSimilarities(similarities_dataset_val, positive_weight=positive_weight)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_79": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "triplets_train_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "triplets_dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TripletSimilarities(similarities_dataset_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_153": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "data_loader_FP_nn_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_FP_nn_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ParameterSimulationPairs(samples_val, target_val, 'cuda' if cuda and load_all_data_GPU else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_215": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_220": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optim.Adam(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer(embedding_net.parameters(), lr=lr, **optimizer_kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/NN_utilities/datasets.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "samples.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "self.similarity_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "similarity_matrix.astype('int')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "self.simulations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "simulations.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parameters.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "self.similarity_matrix[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "self.similarity_matrix[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_111": {
                "input": {
                    "value": "self.similarity_matrix[new_anchor]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/NN_utilities/losses.py": {
        "torch": {
            "bmm_45": {
                "variable": {
                    "value": "inner_prod_second_der_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_der_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "second_der_t",
                            "Method Argument"
                        ],
                        [
                            "second_der_t",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "eta.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "new_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eta, torch.ones(eta.shape[0], 1).to(eta))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_positive - distance_negative + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "eta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_21": {
                "input": {
                    "value": "self.margin - (distances + self.eps).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_21": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_49": {
                "input": {
                    "value": "first_der_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_der_t",
                            "Method Argument"
                        ],
                        [
                            "first_der_t",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "eta.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_52": {
                "input": {
                    "value": "first_der_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_der_t",
                            "Method Argument"
                        ],
                        [
                            "first_der_t",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "eta.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/NN_utilities/networks.py": {
        "torch": {
            "tensor_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.scaler.transform(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_274": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_out.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(f.shape[0], *f.shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linear_317": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_out.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_318": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((f.shape[0], *f.shape)).to(f)",
                            "Call"
                        ],
                        [
                            "z * H + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * torch.einsum('ibo,jbo->ijbo', f, f)",
                            "BinOp"
                        ],
                        [
                            "F.linear(H, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * H + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * torch.einsum('ibo,jbo->ijbo', f, f)",
                            "BinOp"
                        ],
                        [
                            "F.linear(H, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_out.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_sizes_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.fc_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_132": {
                "variable": {
                    "value": "self.bn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "batch_norm_last_layer_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_sizes_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.fc_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self.nonlinearities_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_242": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_261": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_hidden[i].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_276": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(f)",
                            "Call"
                        ],
                        [
                            "z * s + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * f ** 2",
                            "BinOp"
                        ],
                        [
                            "z * s + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * f ** 2",
                            "BinOp"
                        ],
                        [
                            "F.linear(s, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "F.linear(s, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_out.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_306": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_hidden[i].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_307": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((f.shape[0], *f.shape)).to(f)",
                            "Call"
                        ],
                        [
                            "z * H + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * torch.einsum('ibo,jbo->ijbo', f, f)",
                            "BinOp"
                        ],
                        [
                            "F.linear(H, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * H + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * torch.einsum('ibo,jbo->ijbo', f, f)",
                            "BinOp"
                        ],
                        [
                            "F.linear(H, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_hidden[i].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_263": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(f)",
                            "Call"
                        ],
                        [
                            "z * s + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * f ** 2",
                            "BinOp"
                        ],
                        [
                            "z * s + grad(z, x, torch.ones_like(z), retain_graph=True)[0] * f ** 2",
                            "BinOp"
                        ],
                        [
                            "F.linear(s, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "F.linear(s, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fc_hidden[i].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_268": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_312": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_255": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_300": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity_in(x)",
                            "Call"
                        ],
                        [
                            "self.nonlinearities_hidden[i](x)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_315": {
                "equation": {
                    "value": "ibo,jbo->ijbo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "hidden_sizes_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "hidden_sizes_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_304": {
                "equation": {
                    "value": "ibo,jbo->ijbo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_in.weight.unsqueeze(0).repeat(x.shape[0], 1, 1).transpose(2, 1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_hidden[i].weight)",
                            "Call"
                        ],
                        [
                            "z * f",
                            "BinOp"
                        ],
                        [
                            "F.linear(f, self.fc_out.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_315": {
                "outputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonlinearity_fcn(self.fc_in(x))",
                            "Call"
                        ],
                        [
                            "nonlinearity_fcn(self.fc_hidden[i](x))",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "self.bn_out(x)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.scaler.transform(x), dtype=torch.float32).to(next(self.net.parameters()).device)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_272": {
                "outputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonlinearity_fcn(self.fc_in(x))",
                            "Call"
                        ],
                        [
                            "nonlinearity_fcn(self.fc_hidden[i](x))",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "self.bn_out(x)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.scaler.transform(x), dtype=torch.float32).to(next(self.net.parameters()).device)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_304": {
                "outputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonlinearity_fcn(self.fc_in(x))",
                            "Call"
                        ],
                        [
                            "nonlinearity_fcn(self.fc_hidden[i](x))",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "self.bn_out(x)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.scaler.transform(x), dtype=torch.float32).to(next(self.net.parameters()).device)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_315": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_259": {
                "outputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonlinearity_fcn(self.fc_in(x))",
                            "Call"
                        ],
                        [
                            "nonlinearity_fcn(self.fc_hidden[i](x))",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "self.bn_out(x)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "self.fc_in(x)",
                            "Call"
                        ],
                        [
                            "self.fc_hidden[i](x1)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.scaler.transform(x), dtype=torch.float32).to(next(self.net.parameters()).device)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_272": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_304": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_259": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ],
                        [
                            "x1.grad_fn(torch.ones_like(x1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "abcpy/NN_utilities/trainer.py": {
        "torch": {
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/NN_utilities/utilities.py": {
        "torch": {
            "zeros_76": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(output.shape) + list(input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(output.shape) + list(input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "J2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(output.shape) + list(input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(output.shape) + list(input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(output.shape) + list(input.shape[1:]) + list(input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "J.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "J.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_110": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_150": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_82": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_158": {
                "outputs": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_160": {
                "outputs": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_118": {
                "outputs": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_121": {
                "outputs": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(list(output.shape) + list(input.shape[1:])).to(input)",
                            "Call"
                        ],
                        [
                            "J.reshape(output.shape[0], output.shape[1], in_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros(J.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "abcpy/statistics.py": {
        "torch": {
            "from_numpy_542": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/NN_utilities_networks_tests.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "self.tensor_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "self.tensor_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "self.tensor_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_28": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_first_der_only.forward_and_derivatives(self.tensor)",
                            "Call"
                        ],
                        [
                            "self.net.forward_and_derivatives(self.tensor)",
                            "Call"
                        ],
                        [
                            "self.net.forward_and_full_derivatives(self.tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, y)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_36": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_first_der_only.forward_and_derivatives(self.tensor)",
                            "Call"
                        ],
                        [
                            "self.net.forward_and_derivatives(self.tensor)",
                            "Call"
                        ],
                        [
                            "self.net.forward_and_full_derivatives(self.tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, y)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_37": {
                "input": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.forward_and_derivatives(self.tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_second_order(self.tensor, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_45": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_first_der_only.forward_and_derivatives(self.tensor)",
                            "Call"
                        ],
                        [
                            "self.net.forward_and_derivatives(self.tensor)",
                            "Call"
                        ],
                        [
                            "self.net.forward_and_full_derivatives(self.tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, y)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_46": {
                "input": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.forward_and_full_derivatives(self.tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_70": {
                "input": {
                    "value": "out[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "out_discard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_with_discard_wrapper(self.tensor_1)",
                            "Call"
                        ],
                        [
                            "self.net_with_discard_wrapper(self.tensor_2)",
                            "Call"
                        ],
                        [
                            "self.net_with_discard_wrapper(self.tensor_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_74": {
                "input": {
                    "value": "out[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "out_discard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_with_discard_wrapper(self.tensor_1)",
                            "Call"
                        ],
                        [
                            "self.net_with_discard_wrapper(self.tensor_2)",
                            "Call"
                        ],
                        [
                            "self.net_with_discard_wrapper(self.tensor_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_78": {
                "input": {
                    "value": "out[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "out_discard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net_with_discard_wrapper(self.tensor_1)",
                            "Call"
                        ],
                        [
                            "self.net_with_discard_wrapper(self.tensor_2)",
                            "Call"
                        ],
                        [
                            "self.net_with_discard_wrapper(self.tensor_3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/NN_utilities_utilities_tests.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_55": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "biik->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_82": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "biik->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_40": {
                "input": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_47": {
                "input": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_48": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_57": {
                "input": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_58": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_with_infinities)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_with_infinities)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_with_infinities)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_59": {
                "input": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_with_infinities)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_60": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_67": {
                "input": {
                    "value": "self.f_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_74": {
                "input": {
                    "value": "self.f_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_75": {
                "input": {
                    "value": "self.s_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_84": {
                "input": {
                    "value": "self.f_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_85": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_with_infinities)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_with_infinities)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_with_infinities)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_86": {
                "input": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_with_infinities)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_hessian(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "jacobian_hessian(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_87": {
                "input": {
                    "value": "self.s_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian_second_order(self.tensor, self.y, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ],
                        [
                            "jacobian_second_order(self.tensor, self.y_bn, diffable=False)",
                            "Call"
                        ],
                        [
                            "torch.einsum('biik->bik', H2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softplus_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/statistics_tests.py": {
        "torch": {
            "randn_136": {
                "variable": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_135": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_178": {
                "input": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "out_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stat_calc_loaded.net(self.tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_186": {
                "input": {
                    "value": "self.out_discard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "out_new_discard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stat_calc_with_discard_loaded.net(self.tensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/statisticslearning_tests.py": {
        "torch": {}
    },
    "tests/test_examples.py": {
        "torch": {}
    },
    "tests/transformers_tests.py": {
        "torch": {
            "from_numpy_120": {
                "variable": {
                    "value": "x_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}