{
    "data_loader.py": {
        "tensorflow": {
            "string_input_producer_8": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[csv_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TextLineReader_11": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_csv_17": {
                "variable": {
                    "value": "(filename_i, filename_j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "records": {
                    "value": "csv_filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "record_defaults": {
                    "value": "record_defaults",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.constant([], dtype=tf.string), tf.constant([], dtype=tf.string)]",
                            "List"
                        ]
                    ]
                }
            },
            "read_file_20": {
                "variable": {
                    "value": "file_contents_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "read_file_21": {
                "variable": {
                    "value": "file_contents_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename_j",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_crop_69": {
                "variable": {
                    "value": "inputs[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs['image_i']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[model.IMG_HEIGHT, model.IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_crop_71": {
                "variable": {
                    "value": "inputs[image_j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs['image_j']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[model.IMG_HEIGHT, model.IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_74": {
                "variable": {
                    "value": "inputs[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(inputs['image_i'], 127.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_75": {
                "variable": {
                    "value": "inputs[image_j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(inputs['image_j'], 127.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "decode_jpeg_23": {
                "variable": {
                    "value": "image_decoded_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(filename_i)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "model.IMG_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_25": {
                "variable": {
                    "value": "image_decoded_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(filename_j)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "model.IMG_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_66": {
                "variable": {
                    "value": "inputs[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "inputs['image_i']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_flip_left_right_67": {
                "variable": {
                    "value": "inputs[image_j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "inputs['image_j']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_batch_79": {
                "variable": {
                    "value": "(inputs[images_i], inputs[images_j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['image_i'], inputs['image_j']]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_82": {
                "variable": {
                    "value": "(inputs[images_i], inputs[images_j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['image_i'], inputs['image_j']]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_14": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_15": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_28": {
                "variable": {
                    "value": "image_decoded_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(filename_i)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "model.IMG_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_30": {
                "variable": {
                    "value": "image_decoded_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(filename_j)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "model.IMG_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_74": {
                "x": {
                    "value": "inputs['image_i']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "127.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_75": {
                "x": {
                    "value": "inputs['image_j']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "127.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "tensorflow": {
            "moments_19": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=1.0, stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=1.0, stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "o_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "f_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "s_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "o_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "f_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "s_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_93": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_norm",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : instance_norm(conv)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : conv",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv2d_transpose_110": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "o_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[f_h, f_w]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[s_h, s_w]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "variable": {
                    "value": "fcw",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(outshape, dtype=tf.float32, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "variable": {
                    "value": "fcb",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[outshape[-1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_161": {
                "variable": {
                    "value": "fcl",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(inpfc, fcw)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "fcb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[outshape[-1]], dtype=tf.float32), trainable=True, name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_162": {
                "variable": {
                    "value": "fc_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fcl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(inpfc, fcw), fcb)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "instance_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "instance_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_37": {
                "variable": {
                    "value": "slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(x.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_38": {
                "variable": {
                    "value": "slice_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(x.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_39": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(x, i, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "slice_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(mask, i, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_12": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputconv, o_d, f_w, s_w, padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "instance_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputconv, o_d, f_w, s_w, padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.cond(do_norm, lambda : instance_norm(conv), lambda : conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d_transpose(inputconv, o_d, [f_h, f_w], [s_h, s_w], padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "instance_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputconv, o_d, f_w, s_w, padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "instance_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputconv, o_d, f_w, s_w, padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.cond(do_norm, lambda : instance_norm(conv), lambda : conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d_transpose(inputconv, o_d, [f_h, f_w], [s_h, s_w], padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "instance_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputconv, o_d, f_w, s_w, padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "instance_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputconv, o_d, f_w, s_w, padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.cond(do_norm, lambda : instance_norm(conv), lambda : conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d_transpose(inputconv, o_d, [f_h, f_w], [s_h, s_w], padding, activation_fn=None, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "instance_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, 'relu')",
                            "Call"
                        ],
                        [
                            "lrelu(conv, relufactor, 'lrelu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_155": {
                "shape": {
                    "value": "outshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_158": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[outshape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "a": {
                    "value": "inpfc",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "fcw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(outshape, dtype=tf.float32, stddev=0.1), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_21": {
                "mean": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_26": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_28": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(var + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_44": {
                "mean": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_51": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(var + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_64": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_87": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_90": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_114": {
                "stddev": {
                    "value": "stddev",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "x": {
                    "value": "var + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "x": {
                    "value": "var + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "reduce_mean_28": {
                "input_tensor": {
                    "value": "tf.abs(real_images - generated_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "tf.abs(tf.multiply(gen_image, 1 - mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "input_tensor": {
                    "value": "tf.squared_difference(prob_fake_is_real, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_28": {
                "x": {
                    "value": "real_images - generated_images",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_33": {
                "x": {
                    "value": "tf.multiply(gen_image, 1 - mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_52": {
                "x": {
                    "value": "prob_fake_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "x": {
                    "value": "gen_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "tf.squared_difference(prob_real_is_real, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "input_tensor": {
                    "value": "tf.squared_difference(prob_fake_is_real, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_74": {
                "x": {
                    "value": "prob_real_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_75": {
                "x": {
                    "value": "prob_fake_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.input_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, model.IMG_WIDTH, model.IMG_HEIGHT, model.IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.input_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, model.IMG_WIDTH, model.IMG_HEIGHT, model.IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.fake_pool_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.IMG_WIDTH, model.IMG_HEIGHT, model.IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_pool_A",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.fake_pool_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.IMG_WIDTH, model.IMG_HEIGHT, model.IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_pool_B",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.fake_pool_A_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.IMG_WIDTH, model.IMG_HEIGHT, model.IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_pool_A_mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.fake_pool_B_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.IMG_WIDTH, model.IMG_HEIGHT, model.IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_pool_B_mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "self.transition_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self.donorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "donorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_184": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_185": {
                "variable": {
                    "value": "self.model_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_208": {
                "variable": {
                    "value": "self.g_A_loss_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "g_A_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss_A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cycle_consistency_loss_a + cycle_consistency_loss_b + lsgan_loss_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_209": {
                "variable": {
                    "value": "self.g_B_loss_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "g_B_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss_B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cycle_consistency_loss_b + cycle_consistency_loss_a + lsgan_loss_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_210": {
                "variable": {
                    "value": "self.d_A_loss_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d_A_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss_A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "losses.lsgan_loss_discriminator(prob_real_is_real=self.prob_real_a_is_real, prob_fake_is_real=self.prob_fake_pool_a_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_211": {
                "variable": {
                    "value": "self.d_B_loss_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "d_B_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss_B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "losses.lsgan_loss_discriminator(prob_real_is_real=self.prob_real_b_is_real, prob_fake_is_real=self.prob_fake_pool_b_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_369": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_514": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_515": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_380": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_385": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_386": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_520": {
                "variable": {
                    "value": "chkpt_fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_523": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_524": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_377": {
                "variable": {
                    "value": "chkpt_fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_499": {
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "concat_42": {
                "variable": {
                    "value": "mask_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_a] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "mask_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_b] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_45": {
                "variable": {
                    "value": "mask_a_on_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs['images_a']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "current_autoenc(images_a, 'g_A_ae')",
                            "Call"
                        ],
                        [
                            "tf.concat([mask_a] * 3, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_46": {
                "variable": {
                    "value": "mask_b_on_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs['images_b']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "current_autoenc(images_b, 'g_B_ae')",
                            "Call"
                        ],
                        [
                            "tf.concat([mask_b] * 3, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_63": {
                "variable": {
                    "value": "mask_bcycle",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_bcycle] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "mask_acycle",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_acycle] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_66": {
                "variable": {
                    "value": "mask_acycle_on_fakeA",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_images_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(fake_images_a_from_g, mask_b) + tf.multiply(images_b, 1 - mask_b)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_acycle",
                    "type": "Call",
                    "possible_values": [
                        [
                            "current_autoenc(fake_images_a, 'g_A_ae')",
                            "Call"
                        ],
                        [
                            "tf.concat([mask_acycle] * 3, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_67": {
                "variable": {
                    "value": "mask_bcycle_on_fakeB",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_images_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(fake_images_b_from_g, mask_a) + tf.multiply(images_a, 1 - mask_a)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_bcycle",
                    "type": "Call",
                    "possible_values": [
                        [
                            "current_autoenc(fake_images_b, 'g_B_ae')",
                            "Call"
                        ],
                        [
                            "tf.concat([mask_bcycle] * 3, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_107": {
                "variable": {
                    "value": "pad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputae",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [ks, ks], [ks, ks], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Constant"
                        ],
                        [
                            "'CONSTANT'",
                            "Constant"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_145": {
                "variable": {
                    "value": "out_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputres",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Constant"
                        ],
                        [
                            "'CONSTANT'",
                            "Constant"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_149": {
                "variable": {
                    "value": "out_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(inputres, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c1')",
                            "Call"
                        ],
                        [
                            "tf.pad(out_res, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c2', do_relu=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputres, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c1')",
                            "Call"
                        ],
                        [
                            "tf.pad(out_res, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c2', do_relu=False)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Constant"
                        ],
                        [
                            "'CONSTANT'",
                            "Constant"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_166": {
                "variable": {
                    "value": "out_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputres",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Constant"
                        ],
                        [
                            "'CONSTANT'",
                            "Constant"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_170": {
                "variable": {
                    "value": "out_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(inputres, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c1')",
                            "Call"
                        ],
                        [
                            "tf.pad(out_res, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c2', do_relu=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputres, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c1')",
                            "Call"
                        ],
                        [
                            "tf.pad(out_res, [[0, 0], [1, 1], [1, 1], [0, 0]], padding)",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(out_res, tf.constant(True, dtype=bool), dim, 3, 3, 1, 1, 0.02, 'VALID', 'c2', do_relu=False)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Constant"
                        ],
                        [
                            "'CONSTANT'",
                            "Constant"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_182": {
                "variable": {
                    "value": "inputgen",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputgen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(inputgen, [[0, 0], [ks, ks], [ks, ks], [0, 0]], padding)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [ks, ks], [ks, ks], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "Constant"
                        ],
                        [
                            "'CONSTANT'",
                            "Constant"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ],
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_226": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(mask, transition_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_227": {
                "variable": {
                    "value": "inputdisc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdisc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(inputdisc, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(mask, transition_rate), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_230": {
                "variable": {
                    "value": "pad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdisc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(inputdisc, mask)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padw, padw], [padw, padw], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_237": {
                "variable": {
                    "value": "pad_o_c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_c1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.general_conv2d(pad_input, tf.constant(True, dtype=bool), ngf, f, f, 2, 2, 0.02, name='c1')",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(inputgen, tf.constant(True, dtype=bool), ngf, f, f, 1, 1, 0.02, name='c1')",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(pad_input, donorm, ndf, f, f, 2, 2, 0.02, 'VALID', 'c1', relufactor=0.2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padw, padw], [padw, padw], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_243": {
                "variable": {
                    "value": "pad_o_c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_c2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.general_conv2d(o_c1, tf.constant(True, dtype=bool), ngf * 2, ks, ks, 2, 2, 0.02, 'SAME', 'c2')",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(o_c1, tf.constant(True, dtype=bool), ngf * 2, ks, ks, 2, 2, 0.02, padding='same', name='c2')",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(pad_o_c1, donorm, ndf * 2, f, f, 2, 2, 0.02, 'VALID', 'c2', relufactor=0.2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padw, padw], [padw, padw], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_249": {
                "variable": {
                    "value": "pad_o_c3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_c3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.general_conv2d(o_c2, tf.constant(True, dtype=bool), ngf * 4, ks, ks, 2, 2, 0.02, padding='same', name='c3')",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(pad_o_c2, donorm, ndf * 4, f, f, 2, 2, 0.02, 'VALID', 'c3', relufactor=0.2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padw, padw], [padw, padw], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_255": {
                "variable": {
                    "value": "pad_o_c4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_c4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.upsamplingDeconv(o_r1, size=[size_d1[1] * 2, size_d1[2] * 2], is_scale=False, method=1, align_corners=False, name='up1')",
                            "Call"
                        ],
                        [
                            "layers.general_deconv2d(o_r9, [BATCH_SIZE, 128, 128, ngf * 2], ngf * 2, ks, ks, 2, 2, 0.02, 'SAME', 'c4')",
                            "Call"
                        ],
                        [
                            "layers.general_conv2d(pad_o_c3, donorm, ndf * 8, f, f, 1, 1, 0.02, 'VALID', 'c4', relufactor=0.2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padw, padw], [padw, padw], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_132": {
                "x": {
                    "value": "o_c6_end",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.general_conv2d(oc5_end, tf.constant(False, dtype=bool), 1, (f, f), (1, 1), padding='VALID', name='c6', do_relu=False)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_153": {
                "features": {
                    "value": "out_res + inputres",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_174": {
                "features": {
                    "value": "out_res + inputres",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_217": {
                "variable": {
                    "value": "out_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputgen + o_c6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "t1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_219": {
                "variable": {
                    "value": "out_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o_c6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.general_conv2d(o_c5, tf.constant(False, dtype=bool), IMG_CHANNELS, f, f, 1, 1, 0.02, 'SAME', 'c6', do_relu=False)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "t1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_52": {
                "x": {
                    "value": "images_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs['images_a']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mask_a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_55": {
                "x": {
                    "value": "images_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs['images_b']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mask_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_72": {
                "x": {
                    "value": "cycle_images_a_from_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "current_generator(fake_images_b, name='g_B', skip=skip)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_bcycle",
                    "type": "Call",
                    "possible_values": [
                        [
                            "current_autoenc(fake_images_b, 'g_B_ae')",
                            "Call"
                        ],
                        [
                            "tf.concat([mask_bcycle] * 3, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_73": {
                "x": {
                    "value": "fake_images_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(fake_images_b_from_g, mask_a) + tf.multiply(images_a, 1 - mask_a)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mask_bcycle",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_75": {
                "x": {
                    "value": "cycle_images_b_from_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "current_generator(fake_images_a, name='g_A', skip=skip)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_acycle",
                    "type": "Call",
                    "possible_values": [
                        [
                            "current_autoenc(fake_images_a, 'g_A_ae')",
                            "Call"
                        ],
                        [
                            "tf.concat([mask_acycle] * 3, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_76": {
                "x": {
                    "value": "fake_images_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(fake_images_a_from_g, mask_b) + tf.multiply(images_b, 1 - mask_b)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mask_acycle",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_110": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_120": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_129": {
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_148": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_151": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_169": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_172": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_186": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_189": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_192": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_213": {
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_226": {
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(mask, transition_rate), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "transition_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs['transition_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_259": {
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "test/evaluate_losses.py": {
        "tensorflow": {
            "constant_24": {
                "variable": {
                    "value": "prob_fake_a_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1.0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_25": {
                "variable": {
                    "value": "prob_fake_b_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 1.0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_38": {
                "variable": {
                    "value": "prob_real_a_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 1.0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_39": {
                "variable": {
                    "value": "prob_fake_pool_a_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test/evaluate_networks.py": {
        "tensorflow": {
            "stack_14": {
                "values": {
                    "value": "x_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_15": {
                "values": {
                    "value": "x_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "shape": {
                    "value": "[1, 16, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "shape": {
                    "value": "[1, 16, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_33": {
                "values": {
                    "value": "x_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_34": {
                "values": {
                    "value": "x_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones_like(np.random.randn(1, 16, 16, 3)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "shape": {
                    "value": "[1, 16, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "shape": {
                    "value": "[1, 16, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/test_losses.py": {
        "tensorflow": {
            "ones_42": {
                "variable": {
                    "value": "prob_real_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "prob_fake_is_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_10": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_25": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_52": {
                "shape": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_53": {
                "shape": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_model.py": {
        "tensorflow": {
            "ones_27": {
                "shape": {
                    "value": "images_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[model.BATCH_SIZE, model.IMG_HEIGHT, model.IMG_WIDTH, model.IMG_CHANNELS]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_28": {
                "shape": {
                    "value": "images_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[model.BATCH_SIZE, model.IMG_HEIGHT, model.IMG_WIDTH, model.IMG_CHANNELS]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_29": {
                "shape": {
                    "value": "pool_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[model.POOL_SIZE, model.IMG_HEIGHT, model.IMG_WIDTH, model.IMG_CHANNELS]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_30": {
                "shape": {
                    "value": "pool_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[model.POOL_SIZE, model.IMG_HEIGHT, model.IMG_WIDTH, model.IMG_CHANNELS]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}