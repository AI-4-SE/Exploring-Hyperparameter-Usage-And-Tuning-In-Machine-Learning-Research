{
    "svp/amazon/__main__.py": {
        "torch": {
            "is_available_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/amazon/active.py": {
        "torch": {
            "device_count_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/amazon/coreset.py": {
        "torch": {
            "CrossEntropyLoss_194": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_312": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_199": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_317": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/amazon/datasets.py": {
        "torch": {}
    },
    "svp/amazon/models.py": {
        "torch": {
            "Conv1d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_71": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_91": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_93": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_116": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_130": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_132": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_157": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self.character_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "69",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_grad_by_freq": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_176": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.sections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_filters * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_222": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_224": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool1d_85": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "sections[section_{}.format(section_index)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "section",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_filters, out_filters, 1, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_filters, out_filters, 1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_filters, out_filters, 1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_54": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_98": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_139": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "svp/amazon/train.py": {
        "torch": {
            "CrossEntropyLoss_144": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_149": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "MODELS[arch](num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_205": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_209": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/cifar/__main__.py": {
        "torch": {
            "is_available_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/cifar/active.py": {
        "torch": {
            "device_count_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/cifar/coreset.py": {
        "torch": {
            "CrossEntropyLoss_192": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_310": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_315": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/cifar/datasets.py": {
        "torch": {}
    },
    "svp/cifar/models.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_39": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_117": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_198": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_202": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_208": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_218": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_219": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_225": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_239": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_245": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_249": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_264": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_284": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filters[-1] * Block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_307": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "H.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * self.expansion, 1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shortcut] + [shortcut.mul(0)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * self.expansion, 1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * self.expansion, 1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * self.expansion, 1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * self.expansion, 1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_266": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "variable": {
                    "value": "section",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*section",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_282": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_298": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_305": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "shortcut",
                            "variable"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn3(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv3(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "getattr(self, f'section_{section_index}')(H)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(H, H.size()[2:])",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "svp/cifar/train.py": {
        "torch": {
            "CrossEntropyLoss_143": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "MODELS[arch](num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_208": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/common/active.py": {
        "torch": {
            "SubsetRandomSampler_81": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(yield (model, stats))",
                            "Yield"
                        ]
                    ]
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetWithIndex(train_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(labeled)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "svp/common/cli.py": {
        "torch": {
            "device_count_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/common/coreset.py": {
        "torch": {}
    },
    "svp/common/datasets.py": {
        "torch": {}
    },
    "svp/common/selection/__init__.py": {
        "torch": {
            "Subset_147": {
                "variable": {
                    "value": "subset_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(dataset, subset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "svp/common/train.py": {
        "torch": {
            "SubsetRandomSampler_70": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(len(train_dataset), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetWithIndex(train_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.size(0)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_85": {
                "variable": {
                    "value": "dev_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dev_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "dev_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetWithIndex(train_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "dev_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(dev_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "eval_num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "variable"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetWithIndex(test_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "eval_num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "variable"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "dev_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DatasetWithIndex(dev_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "eval_num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "variable"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_grad_enabled_393": {
                "mode": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'accuracy': current_accuracy, 'mode': accuracy_mode, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(run_dir, f'checkpoint_{epoch}.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_300": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'accuracy': current_accuracy, 'mode': accuracy_mode, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(run_dir, 'checkpoint_best_model.t7')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svp/common/utils.py": {
        "torch": {
            "manual_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(10000) if seed is None else seed",
                            "IfExp"
                        ]
                    ]
                }
            },
            "manual_seed_all_55": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(10000) if seed is None else seed",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_134": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "_device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_139": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/imagenet/__main__.py": {
        "torch": {
            "is_available_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/imagenet/active.py": {
        "torch": {
            "device_count_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/imagenet/coreset.py": {
        "torch": {
            "DataParallel_243": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_368": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svp/imagenet/datasets.py": {
        "torch": {}
    },
    "svp/imagenet/train.py": {
        "torch": {
            "DataParallel_174": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "MODELS[arch](num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_230": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_263": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_234": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}