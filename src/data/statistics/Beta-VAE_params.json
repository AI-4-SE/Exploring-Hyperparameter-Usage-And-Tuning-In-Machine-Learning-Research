{
    "disentanglement_lib.py": {
        "sklearn": {
            "GradientBoostingClassifier_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "linspace_11": {
                "start": {
                    "value": "starting_in_01.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "starting_in_01.item() + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_frames + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_20": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_76": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.lv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.conv_prep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent, self.conv_out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Normal_144": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lv.mul(0.5).exp()",
                            "Call"
                        ],
                        [
                            "lv.mul(0.5).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_163": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.TopDown(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, n_hidden[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.lv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent, n_hidden[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_250": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lv.mul(0.5).exp()",
                            "Call"
                        ],
                        [
                            "lv.mul(0.5).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_270": {
                "variable": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_271": {
                "variable": {
                    "value": "q_zGx",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "lv.mul(0.5).exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.TopDown(z))",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.TopDown(z))",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.conv_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_203": {
                "variable": {
                    "value": "new_mu[:, latent_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "(loc - 2 * scale).item()",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "(loc + 2 * scale).item()",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_traversal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_traversal + (1 if num_traversal % 2 == 0 else num_traversal)",
                            "BinOp"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_238": {
                "in_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_240": {
                "in_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Bernoulli_275": {
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.TopDown(z))",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_176": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.TopDown(z))",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ],
                        [
                            "self.TopDown(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.res(x) + x",
                            "BinOp"
                        ],
                        [
                            "self.post_conv(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.res(x) + x",
                            "BinOp"
                        ],
                        [
                            "self.post_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_189": {
                "input": {
                    "value": "self.TopDown(batch_mu.unsqueeze(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_287": {
                "input": {
                    "value": "self.TopDown(batch_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_287": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_177": {
                "input": {
                    "value": "1 + lv - mu.pow(2) - lv.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_200": {
                "input": {
                    "value": "self.TopDown(new_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "input": {
                    "value": "self.TopDown(new_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_295": {
                "input": {
                    "value": "self.TopDown(new_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout2d_43": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_89": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "randperm_121": {
                "variable": {
                    "value": "rand_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data['imgs'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_122": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "imgs_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['imgs'][rand_perm[:150000]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "imgs_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "imgs_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['imgs'][rand_perm[150000:165000]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "variable": {
                    "value": "imgs_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "latent_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['latents_values'][rand_perm[:150000]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "latent_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['latents_values'][rand_perm[150000:165000]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "mu_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "imgs_train.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "net.latent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "mu_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "imgs_val.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "net.latent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, ckpt_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_52": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('./data/', train=False, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('./data/', train=True, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['imgs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_100": {
                "variable": {
                    "value": "rand_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset(**train_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset(**val_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_120": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_52": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "visualize.py": {
        "torch": {
            "Adam_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}